{"version":3,"file":"provides-BjJALsf_.cjs","sources":["../package/listings/libs/argument-parser.ts","../package/listings/provides.ts"],"sourcesContent":["import { arg } from \"@unified-latex/unified-latex-builder\";\nimport { Argument, ArgumentParser } from \"@unified-latex/unified-latex-types\";\nimport { parse as parseArgspec } from \"@unified-latex/unified-latex-util-argspec\";\nimport { Node } from \"@unified-latex/unified-latex-util-argspec/libs/argspec-types\";\nimport { gobbleSingleArgument } from \"@unified-latex/unified-latex-util-arguments\";\nimport { match } from \"@unified-latex/unified-latex-util-match\";\n\nconst argSpecM = parseArgspec(\"m\")[0];\nconst argSpecO = parseArgspec(\"o\")[0];\nconst argSpecRDelim: { [delim: string]: Node } = {};\n\n/**\n * This argument parser parses arguments in the form of\n * - [⟨key=value list⟩]⟨character⟩⟨source code⟩⟨same character⟩\n * - [⟨key=value list⟩]{⟨source code⟩}\n */\nexport const argumentParser: ArgumentParser = (nodes, startPos) => {\n    const { argument: optionalArg, nodesRemoved: optionalArgNodesRemoved } =\n        gobbleSingleArgument(nodes, argSpecO, startPos);\n\n    let codeArg: Argument | Argument[] | null = null;\n    let codeArgNodesRemoved: number = 0;\n    const nextNode = nodes[startPos];\n    if (match.group(nextNode)) {\n        const mandatoryArg = gobbleSingleArgument(nodes, argSpecM, startPos);\n        codeArg = mandatoryArg.argument;\n        codeArgNodesRemoved = mandatoryArg.nodesRemoved;\n    } else if (match.string(nextNode) && nextNode.content.length === 1) {\n        const delim = nextNode.content;\n        argSpecRDelim[delim] =\n            argSpecRDelim[delim] || parseArgspec(`r${delim}${delim}`)[0];\n        const delimArg = gobbleSingleArgument(\n            nodes,\n            argSpecRDelim[delim],\n            startPos\n        );\n        codeArg = delimArg.argument;\n        codeArgNodesRemoved = delimArg.nodesRemoved;\n    }\n\n    return {\n        args: [optionalArg || arg(null), codeArg || arg(null)],\n        nodesRemoved: optionalArgNodesRemoved + codeArgNodesRemoved,\n    };\n};\n","import {\n    MacroInfoRecord,\n    EnvInfoRecord,\n} from \"@unified-latex/unified-latex-types\";\nimport { argumentParser } from \"./libs/argument-parser\";\n\nexport const macros: MacroInfoRecord = {\n    lstset: { signature: \"m\" },\n    lstinline: { argumentParser: argumentParser },\n    lstinputlisting: { signature: \"o m\" },\n    lstdefinestyle: { signature: \"m m\" },\n    lstnewenvironment: { signature: \"m o o m m\" },\n    lstMakeShortInline: { signature: \"o m\" },\n    lstDeleteShortInline: { signature: \"m\" },\n    lstdefineformat: { signature: \"m m\" },\n    lstdefinelanguage: { signature: \"o m o m o\" },\n    lstalias: { signature: \"o m o m\" },\n    lstloadlanguages: { signature: \"m\" },\n};\n\nexport const environments: EnvInfoRecord = {};\n"],"names":["parseArgspec","gobbleSingleArgument","match","arg"],"mappings":";;;;;AAOA,MAAM,WAAWA,wBAAA,MAAa,GAAG,EAAE,CAAC;AACpC,MAAM,WAAWA,wBAAA,MAAa,GAAG,EAAE,CAAC;AACpC,MAAM,gBAA2C,CAAA;AAOpC,MAAA,iBAAiC,CAAC,OAAO,aAAa;AACzD,QAAA,EAAE,UAAU,aAAa,cAAc,4BACzCC,0BAAAA,qBAAqB,OAAO,UAAU,QAAQ;AAElD,MAAI,UAAwC;AAC5C,MAAI,sBAA8B;AAC5B,QAAA,WAAW,MAAM,QAAQ;AAC3B,MAAAC,sBAAA,MAAM,MAAM,QAAQ,GAAG;AACvB,UAAM,eAAeD,0BAAA,qBAAqB,OAAO,UAAU,QAAQ;AACnE,cAAU,aAAa;AACvB,0BAAsB,aAAa;AAAA,EAAA,WAC5BC,sBAAAA,MAAM,OAAO,QAAQ,KAAK,SAAS,QAAQ,WAAW,GAAG;AAChE,UAAM,QAAQ,SAAS;AACvB,kBAAc,KAAK,IACf,cAAc,KAAK,KAAKF,wBAAA,MAAa,IAAI,KAAK,GAAG,KAAK,EAAE,EAAE,CAAC;AAC/D,UAAM,WAAWC,0BAAA;AAAA,MACb;AAAA,MACA,cAAc,KAAK;AAAA,MACnB;AAAA,IAAA;AAEJ,cAAU,SAAS;AACnB,0BAAsB,SAAS;AAAA,EACnC;AAEO,SAAA;AAAA,IACH,MAAM,CAAC,eAAeE,wBAAI,IAAI,GAAG,WAAWA,oBAAAA,IAAI,IAAI,CAAC;AAAA,IACrD,cAAc,0BAA0B;AAAA,EAAA;AAEhD;ACtCO,MAAM,SAA0B;AAAA,EACnC,QAAQ,EAAE,WAAW,IAAI;AAAA,EACzB,WAAW,EAAE,eAA+B;AAAA,EAC5C,iBAAiB,EAAE,WAAW,MAAM;AAAA,EACpC,gBAAgB,EAAE,WAAW,MAAM;AAAA,EACnC,mBAAmB,EAAE,WAAW,YAAY;AAAA,EAC5C,oBAAoB,EAAE,WAAW,MAAM;AAAA,EACvC,sBAAsB,EAAE,WAAW,IAAI;AAAA,EACvC,iBAAiB,EAAE,WAAW,MAAM;AAAA,EACpC,mBAAmB,EAAE,WAAW,YAAY;AAAA,EAC5C,UAAU,EAAE,WAAW,UAAU;AAAA,EACjC,kBAAkB,EAAE,WAAW,IAAI;AACvC;AAEO,MAAM,eAA8B,CAAA;;;"}