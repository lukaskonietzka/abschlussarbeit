{"version":3,"file":"prettier-plugin-latex-f9d12326.js","sources":["../node_modules/@unified-latex/unified-latex-util-print-raw/index.js","../node_modules/@unified-latex/unified-latex-util-match/index.js","../node_modules/@unified-latex/unified-latex-util-visit/index.js","../node_modules/@unified-latex/unified-latex-util-trim/index.js","../node_modules/@unified-latex/unified-latex-util-pegjs/index.js","../node_modules/@unified-latex/unified-latex-util-argspec/index.js","../node_modules/@unified-latex/unified-latex-builder/index.js","../node_modules/trie-prefix-tree/dist/config.js","../node_modules/trie-prefix-tree/dist/append.js","../node_modules/trie-prefix-tree/dist/create.js","../node_modules/trie-prefix-tree/dist/utils.js","../node_modules/trie-prefix-tree/dist/checkPrefix.js","../node_modules/trie-prefix-tree/dist/recursePrefix.js","../node_modules/trie-prefix-tree/dist/recurseRandomWord.js","../node_modules/trie-prefix-tree/dist/permutations.js","../node_modules/trie-prefix-tree/dist/index.js","../node_modules/@unified-latex/unified-latex-util-scan/index.js","../node_modules/@unified-latex/unified-latex-util-render-info/index.js","../node_modules/@unified-latex/unified-latex-util-arguments/index.js","../node_modules/@unified-latex/unified-latex-ctan/package/tikz/index.js","../node_modules/@unified-latex/unified-latex-util-pgfkeys/index.js","../node_modules/@unified-latex/unified-latex-util-align/index.js","../node_modules/bail/index.js","../node_modules/is-buffer/index.js","../node_modules/extend/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/index.js","../node_modules/@unified-latex/unified-latex-util-split/index.js","../node_modules/@unified-latex/unified-latex-util-replace/index.js","../node_modules/color-name/index.js","../node_modules/is-arrayish/index.js","../node_modules/simple-swizzle/index.js","../node_modules/color-string/index.js","../node_modules/color-convert/conversions.js","../node_modules/color-convert/route.js","../node_modules/color-convert/index.js","../node_modules/color/index.js","../node_modules/@unified-latex/unified-latex-ctan/index.js","../node_modules/@unified-latex/unified-latex-util-environments/index.js","../node_modules/@unified-latex/unified-latex-util-catcode/index.js","../node_modules/@unified-latex/unified-latex-util-parse/index.js","../node_modules/@unified-latex/unified-latex-prettier/index.js","../src/prettier-plugin-latex.ts"],"sourcesContent":["// libs/print-raw.ts\nvar linebreak = Symbol(\"linebreak\");\nvar ESCAPE = \"\\\\\";\nfunction _printRaw(node) {\n  if (typeof node === \"string\") {\n    return [node];\n  }\n  if (Array.isArray(node)) {\n    return [].concat(\n      ...node.map((n) => _printRaw(n))\n    );\n  }\n  let argsString, escape;\n  switch (node.type) {\n    case \"root\":\n      return _printRaw(node.content);\n    case \"argument\":\n      return [node.openMark, ..._printRaw(node.content), node.closeMark];\n    case \"comment\":\n      var suffix = node.suffixParbreak ? \"\" : linebreak;\n      var leadingWhitespace = \"\";\n      if (node.sameline && node.leadingWhitespace) {\n        leadingWhitespace = \" \";\n      }\n      if (node.sameline) {\n        return [\n          leadingWhitespace,\n          \"%\",\n          ..._printRaw(node.content),\n          suffix\n        ];\n      }\n      return [linebreak, \"%\", ..._printRaw(node.content), suffix];\n    case \"environment\":\n    case \"mathenv\":\n    case \"verbatim\":\n      var env = _printRaw(node.env);\n      var envStart = [ESCAPE + \"begin{\", ...env, \"}\"];\n      var envEnd = [ESCAPE + \"end{\", ...env, \"}\"];\n      argsString = node.args == null ? [] : _printRaw(node.args);\n      return [\n        ...envStart,\n        ...argsString,\n        ..._printRaw(node.content),\n        ...envEnd\n      ];\n    case \"displaymath\":\n      return [ESCAPE + \"[\", ..._printRaw(node.content), ESCAPE + \"]\"];\n    case \"group\":\n      return [\"{\", ..._printRaw(node.content), \"}\"];\n    case \"inlinemath\":\n      return [\"$\", ..._printRaw(node.content), \"$\"];\n    case \"macro\":\n      argsString = node.args == null ? [] : _printRaw(node.args);\n      escape = node.escapeToken == null ? ESCAPE : node.escapeToken;\n      return [escape, ..._printRaw(node.content), ...argsString];\n    case \"parbreak\":\n      return [linebreak, linebreak];\n    case \"string\":\n      return [node.content];\n    case \"verb\":\n      return [\n        ESCAPE,\n        node.env,\n        node.escape,\n        ..._printRaw(node.content),\n        node.escape\n      ];\n    case \"whitespace\":\n      return [\" \"];\n    default:\n      console.warn(\n        \"Cannot find render for node \",\n        node,\n        `(of type ${typeof node})`\n      );\n      return [\"\" + node];\n  }\n}\nfunction printRaw(node, options) {\n  const asArray = options != null ? options.asArray : false;\n  const printedTokens = _printRaw(node);\n  if (asArray) {\n    return printedTokens;\n  }\n  return printedTokens.map((x) => x === linebreak ? \"\\n\" : x).join(\"\");\n}\nexport {\n  linebreak,\n  printRaw\n};\n//# sourceMappingURL=index.js.map\n","// libs/match.ts\nimport { printRaw } from \"@unified-latex/unified-latex-util-print-raw\";\nfunction createMacroMatcher(macros) {\n  const macrosHash = Array.isArray(macros) ? macros.length > 0 ? typeof macros[0] === \"string\" ? Object.fromEntries(\n    macros.map((macro2) => {\n      if (typeof macro2 !== \"string\") {\n        throw new Error(\"Wrong branch of map function\");\n      }\n      return [macro2, {}];\n    })\n  ) : Object.fromEntries(\n    macros.map((macro2) => {\n      if (typeof macro2 === \"string\") {\n        throw new Error(\"Wrong branch of map function\");\n      }\n      if (macro2.escapeToken != null) {\n        return [\n          macro2.content,\n          { escapeToken: macro2.escapeToken }\n        ];\n      }\n      return [macro2.content, {}];\n    })\n  ) : {} : macros;\n  return function matchAgainstMacros(node) {\n    if (node == null || node.type !== \"macro\") {\n      return false;\n    }\n    const spec = macrosHash[node.content];\n    if (!spec) {\n      return false;\n    }\n    if (typeof spec === \"object\" && \"escapeToken\" in spec) {\n      return spec.escapeToken == null || spec.escapeToken === node.escapeToken;\n    }\n    return true;\n  };\n}\nfunction createEnvironmentMatcher(macros) {\n  const environmentsHash = Array.isArray(macros) ? Object.fromEntries(\n    macros.map((str) => {\n      return [str, {}];\n    })\n  ) : macros;\n  return function matchAgainstEnvironments(node) {\n    if (!match.anyEnvironment(node)) {\n      return false;\n    }\n    const envName = printRaw(node.env);\n    const spec = environmentsHash[envName];\n    if (!spec) {\n      return false;\n    }\n    return true;\n  };\n}\nvar match = {\n  macro(node, macroName) {\n    if (node == null) {\n      return false;\n    }\n    return node.type === \"macro\" && (macroName == null || node.content === macroName);\n  },\n  anyMacro(node) {\n    return match.macro(node);\n  },\n  environment(node, envName) {\n    if (node == null) {\n      return false;\n    }\n    return (node.type === \"environment\" || node.type === \"mathenv\") && (envName == null || printRaw(node.env) === envName);\n  },\n  anyEnvironment(node) {\n    return match.environment(node);\n  },\n  comment(node) {\n    if (node == null) {\n      return false;\n    }\n    return node.type === \"comment\";\n  },\n  parbreak(node) {\n    if (node == null) {\n      return false;\n    }\n    return node.type === \"parbreak\";\n  },\n  whitespace(node) {\n    if (node == null) {\n      return false;\n    }\n    return node.type === \"whitespace\";\n  },\n  /**\n   * Matches whitespace or a comment with leading whitespace.\n   */\n  whitespaceLike(node) {\n    if (node == null) {\n      return false;\n    }\n    return node.type === \"whitespace\" || node.type === \"whitespace\" && node.leadingWhitespace === true;\n  },\n  string(node, value) {\n    if (node == null) {\n      return false;\n    }\n    return node.type === \"string\" && (value == null || node.content === value);\n  },\n  anyString(node) {\n    return match.string(node);\n  },\n  group(node) {\n    if (node == null) {\n      return false;\n    }\n    return node.type === \"group\";\n  },\n  argument(node) {\n    if (node == null) {\n      return false;\n    }\n    return node.type === \"argument\";\n  },\n  blankArgument(node) {\n    if (!match.argument(node)) {\n      return false;\n    }\n    return node.openMark === \"\" && node.closeMark === \"\" && node.content.length === 0;\n  },\n  math(node) {\n    if (node == null) {\n      return false;\n    }\n    return node.type === \"displaymath\" || node.type === \"inlinemath\";\n  },\n  createMacroMatcher,\n  createEnvironmentMatcher\n};\nvar {\n  anyEnvironment,\n  anyMacro,\n  anyString,\n  argument,\n  blankArgument,\n  comment,\n  environment,\n  group,\n  macro,\n  math,\n  parbreak,\n  string,\n  whitespace\n} = match;\nexport {\n  anyEnvironment,\n  anyMacro,\n  anyString,\n  argument,\n  blankArgument,\n  comment,\n  environment,\n  group,\n  macro,\n  match,\n  math,\n  parbreak,\n  string,\n  whitespace\n};\n//# sourceMappingURL=index.js.map\n","// libs/list-math-children.ts\nimport { match } from \"@unified-latex/unified-latex-util-match\";\nfunction listMathChildren(node) {\n  const NULL_RETURN = { enter: [], leave: [] };\n  if (Array.isArray(node)) {\n    return NULL_RETURN;\n  }\n  if (match.math(node)) {\n    return { enter: [\"content\"], leave: [] };\n  }\n  const renderInfo = node._renderInfo || {};\n  if (renderInfo.inMathMode == null) {\n    return NULL_RETURN;\n  }\n  if (match.macro(node)) {\n    if (renderInfo.inMathMode === true) {\n      return { enter: [\"args\"], leave: [] };\n    } else if (renderInfo.inMathMode === false) {\n      return { enter: [], leave: [\"args\"] };\n    }\n  }\n  if (match.environment(node)) {\n    if (renderInfo.inMathMode === true) {\n      return { enter: [\"content\"], leave: [] };\n    } else {\n      return { enter: [], leave: [\"content\"] };\n    }\n  }\n  return NULL_RETURN;\n}\n\n// libs/visit.ts\nvar CONTINUE = Symbol(\"continue\");\nvar SKIP = Symbol(\"skip\");\nvar EXIT = Symbol(\"exit\");\nvar DEFAULT_CONTEXT = {\n  inMathMode: false,\n  hasMathModeAncestor: false\n};\nfunction visit(tree, visitor, options) {\n  const {\n    startingContext = DEFAULT_CONTEXT,\n    test = () => true,\n    includeArrays = false\n  } = options || {};\n  let enter;\n  let leave;\n  if (typeof visitor === \"function\") {\n    enter = visitor;\n  } else if (visitor && typeof visitor === \"object\") {\n    enter = visitor.enter;\n    leave = visitor.leave;\n  }\n  walk(tree, {\n    key: void 0,\n    index: void 0,\n    parents: [],\n    containingArray: void 0,\n    context: { ...startingContext }\n  });\n  function walk(node, { key, index, parents, context, containingArray }) {\n    const nodePassesTest = includeArrays ? test(node, { key, index, parents, context, containingArray }) : !Array.isArray(node) && test(node, { key, index, parents, context, containingArray });\n    const result = enter && nodePassesTest ? toResult(\n      enter(node, {\n        key,\n        index,\n        parents,\n        context,\n        containingArray\n      })\n    ) : [CONTINUE];\n    if (result[0] === EXIT) {\n      return result;\n    }\n    if (result[0] === SKIP) {\n      return leave && nodePassesTest ? toResult(\n        leave(node, {\n          key,\n          index,\n          parents,\n          context,\n          containingArray\n        })\n      ) : result;\n    }\n    if (Array.isArray(node)) {\n      for (let index2 = 0; index2 > -1 && index2 < node.length; index2++) {\n        const item = node[index2];\n        const result2 = walk(item, {\n          key,\n          index: index2,\n          parents,\n          context,\n          containingArray: node\n        });\n        if (result2[0] === EXIT) {\n          return result2;\n        }\n        if (typeof result2[1] === \"number\") {\n          index2 = result2[1] - 1;\n        }\n      }\n    } else {\n      let childProps = [\"content\", \"args\"];\n      switch (node.type) {\n        case \"macro\":\n          childProps = [\"args\"];\n          break;\n        case \"comment\":\n        case \"string\":\n        case \"verb\":\n        case \"verbatim\":\n          childProps = [];\n          break;\n        default:\n          break;\n      }\n      const mathModeProps = listMathChildren(node);\n      for (const key2 of childProps) {\n        const value = node[key2];\n        const grandparents = [node].concat(parents);\n        if (value == null) {\n          continue;\n        }\n        const newContext = { ...context };\n        if (mathModeProps.enter.includes(key2)) {\n          newContext.inMathMode = true;\n          newContext.hasMathModeAncestor = true;\n        } else if (mathModeProps.leave.includes(key2)) {\n          newContext.inMathMode = false;\n        }\n        const result2 = walk(value, {\n          key: key2,\n          index: void 0,\n          parents: grandparents,\n          context: newContext,\n          containingArray: void 0\n        });\n        if (result2[0] === EXIT) {\n          return result2;\n        }\n      }\n    }\n    return leave && nodePassesTest ? toResult(\n      leave(node, {\n        key,\n        index,\n        parents,\n        context,\n        containingArray\n      })\n    ) : result;\n  }\n}\nfunction toResult(value) {\n  if (value == null) {\n    return [CONTINUE];\n  }\n  if (Array.isArray(value)) {\n    return value;\n  }\n  if (typeof value === \"number\") {\n    return [CONTINUE, value];\n  }\n  return [value];\n}\nexport {\n  CONTINUE,\n  EXIT,\n  SKIP,\n  visit\n};\n//# sourceMappingURL=index.js.map\n","// libs/trim.ts\nimport { match } from \"@unified-latex/unified-latex-util-match\";\nfunction trim(nodes) {\n  if (!Array.isArray(nodes)) {\n    console.warn(\"Trying to trim a non-array ast\", nodes);\n    return nodes;\n  }\n  const { trimmedStart } = trimStart(nodes);\n  const { trimmedEnd } = trimEnd(nodes);\n  return { trimmedStart, trimmedEnd };\n}\nfunction trimStart(nodes) {\n  const { start } = amountOfLeadingAndTrailingWhitespace(nodes);\n  nodes.splice(0, start);\n  for (const leadingToken of nodes) {\n    if (!match.comment(leadingToken)) {\n      break;\n    }\n    if (leadingToken.leadingWhitespace || leadingToken.sameline) {\n      leadingToken.leadingWhitespace = false;\n      delete leadingToken.position;\n    }\n    if (start > 0 && leadingToken.sameline) {\n      leadingToken.sameline = false;\n      delete leadingToken.position;\n    }\n  }\n  return { trimmedStart: start };\n}\nfunction trimEnd(nodes) {\n  const { end } = amountOfLeadingAndTrailingWhitespace(nodes);\n  nodes.splice(nodes.length - end, end);\n  for (let i = nodes.length - 1; i >= 0; i--) {\n    const trailingToken = nodes[i];\n    if (!match.comment(trailingToken)) {\n      break;\n    }\n    delete trailingToken.suffixParbreak;\n    if (match.comment(trailingToken) && trailingToken.leadingWhitespace && !trailingToken.sameline) {\n      trailingToken.leadingWhitespace = false;\n      delete trailingToken.position;\n    }\n  }\n  return { trimmedEnd: end };\n}\nfunction amountOfLeadingAndTrailingWhitespace(ast) {\n  let start = 0;\n  let end = 0;\n  for (const node of ast) {\n    if (match.whitespace(node) || match.parbreak(node)) {\n      start++;\n    } else {\n      break;\n    }\n  }\n  if (start === ast.length) {\n    return { start, end: 0 };\n  }\n  for (let i = ast.length - 1; i >= 0; i--) {\n    const node = ast[i];\n    if (match.whitespace(node) || match.parbreak(node)) {\n      end++;\n    } else {\n      break;\n    }\n  }\n  return { start, end };\n}\n\n// libs/unified-latex-trim-environment-contents.ts\nimport { match as match2 } from \"@unified-latex/unified-latex-util-match\";\nimport { visit } from \"@unified-latex/unified-latex-util-visit\";\nvar unifiedLatexTrimEnvironmentContents = function unifiedLatexTrimEnvironmentContents2() {\n  return (tree) => {\n    visit(tree, (node) => {\n      if (!(match2.math(node) || match2.anyEnvironment(node))) {\n        return;\n      }\n      let firstNode = node.content[0];\n      if (match2.comment(firstNode) && firstNode.sameline) {\n        firstNode.suffixParbreak = false;\n        trimEnd(node.content);\n        const { trimmedStart } = trimStart(node.content.slice(1));\n        node.content.splice(1, trimmedStart);\n      } else {\n        trim(node.content);\n      }\n    });\n  };\n};\n\n// libs/unified-latex-trim-root.ts\nvar unifiedLatexTrimRoot = function unifiedLatexTrimRoot2() {\n  return (tree) => {\n    trim(tree.content);\n  };\n};\n\n// libs/has-whitespace-equivalent.ts\nimport { match as match3 } from \"@unified-latex/unified-latex-util-match\";\nfunction hasWhitespaceEquivalent(nodes) {\n  let start = false;\n  let end = false;\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (match3.comment(node)) {\n      if (node.leadingWhitespace) {\n        start = true;\n        break;\n      }\n      continue;\n    }\n    if (match3.whitespace(node)) {\n      start = true;\n    }\n    break;\n  }\n  for (let j = nodes.length - 1; j >= 0; j--) {\n    const node = nodes[j];\n    if (match3.comment(node)) {\n      if (node.leadingWhitespace) {\n        end = true;\n        break;\n      }\n      continue;\n    }\n    if (match3.whitespace(node)) {\n      end = true;\n    }\n    break;\n  }\n  return { start, end };\n}\nexport {\n  hasWhitespaceEquivalent,\n  trim,\n  trimEnd,\n  trimStart,\n  unifiedLatexTrimEnvironmentContents,\n  unifiedLatexTrimRoot\n};\n//# sourceMappingURL=index.js.map\n","// libs/decorate-array-for-pegjs.ts\nfunction decorateArrayForPegjs(array) {\n  array.charAt = function(i) {\n    return this[i];\n  };\n  array.charCodeAt = () => 0;\n  array.substring = function(i, j) {\n    return this.slice(i, j);\n  };\n  array.replace = function(a, b) {\n    const ret = JSON.stringify(this);\n    return ret.replace(a, b);\n  };\n  return array;\n}\n\n// libs/split-strings.ts\nimport { match } from \"@unified-latex/unified-latex-util-match\";\nfunction splitStringsIntoSingleChars(nodes) {\n  return nodes.flatMap(\n    (node) => match.anyString(node) ? Array.from(node.content).map((c) => ({\n      type: \"string\",\n      content: c\n    })) : node\n  );\n}\n\n// grammars/latex.pegjs\nvar latex_default = (\n  // Generated by Peggy 2.0.1.\n  //\n  // https://peggyjs.org/\n  function() {\n    \"use strict\";\n    function peg$subclass(child, parent) {\n      function C() {\n        this.constructor = child;\n      }\n      C.prototype = parent.prototype;\n      child.prototype = new C();\n    }\n    function peg$SyntaxError(message, expected, found, location) {\n      var self = Error.call(this, message);\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n      }\n      self.expected = expected;\n      self.found = found;\n      self.location = location;\n      self.name = \"SyntaxError\";\n      return self;\n    }\n    peg$subclass(peg$SyntaxError, Error);\n    function peg$padEnd(str, targetLength, padString) {\n      padString = padString || \" \";\n      if (str.length > targetLength) {\n        return str;\n      }\n      targetLength -= str.length;\n      padString += padString.repeat(targetLength);\n      return str + padString.slice(0, targetLength);\n    }\n    peg$SyntaxError.prototype.format = function(sources) {\n      var str = \"Error: \" + this.message;\n      if (this.location) {\n        var src = null;\n        var k;\n        for (k = 0; k < sources.length; k++) {\n          if (sources[k].source === this.location.source) {\n            src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n            break;\n          }\n        }\n        var s = this.location.start;\n        var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n        if (src) {\n          var e = this.location.end;\n          var filler = peg$padEnd(\"\", s.line.toString().length, \" \");\n          var line = src[s.line - 1];\n          var last = s.line === e.line ? e.column : line.length + 1;\n          var hatLen = last - s.column || 1;\n          str += \"\\n --> \" + loc + \"\\n\" + filler + \" |\\n\" + s.line + \" | \" + line + \"\\n\" + filler + \" | \" + peg$padEnd(\"\", s.column - 1, \" \") + peg$padEnd(\"\", hatLen, \"^\");\n        } else {\n          str += \"\\n at \" + loc;\n        }\n      }\n      return str;\n    };\n    peg$SyntaxError.buildMessage = function(expected, found) {\n      var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return '\"' + literalEscape(expectation.text) + '\"';\n        },\n        class: function(expectation) {\n          var escapedParts = expectation.parts.map(function(part) {\n            return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n          });\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts.join(\"\") + \"]\";\n        },\n        any: function() {\n          return \"any character\";\n        },\n        end: function() {\n          return \"end of input\";\n        },\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n      function hex(ch) {\n        return ch.charCodeAt(0).toString(16).toUpperCase();\n      }\n      function literalEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"').replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function classEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function describeExpectation(expectation) {\n        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n      }\n      function describeExpected(expected2) {\n        var descriptions = expected2.map(describeExpectation);\n        var i, j;\n        descriptions.sort();\n        if (descriptions.length > 0) {\n          for (i = 1, j = 1; i < descriptions.length; i++) {\n            if (descriptions[i - 1] !== descriptions[i]) {\n              descriptions[j] = descriptions[i];\n              j++;\n            }\n          }\n          descriptions.length = j;\n        }\n        switch (descriptions.length) {\n          case 1:\n            return descriptions[0];\n          case 2:\n            return descriptions[0] + \" or \" + descriptions[1];\n          default:\n            return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n        }\n      }\n      function describeFound(found2) {\n        return found2 ? '\"' + literalEscape(found2) + '\"' : \"end of input\";\n      }\n      return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    function peg$parse(input, options) {\n      options = options !== void 0 ? options : {};\n      var peg$FAILED = {};\n      var peg$source = options.grammarSource;\n      var peg$startRuleFunctions = { document: peg$parsedocument, math: peg$parsemath };\n      var peg$startRuleFunction = peg$parsedocument;\n      var peg$c0 = \"%\";\n      var peg$c1 = \".\";\n      var peg$c2 = \"verb*\";\n      var peg$c3 = \"verb\";\n      var peg$c4 = \"[\";\n      var peg$c5 = \"]\";\n      var peg$c6 = \"lstinline\";\n      var peg$c7 = \"mintinline\";\n      var peg$c8 = \"mint\";\n      var peg$c9 = \"minted\";\n      var peg$c10 = \"verbatim*\";\n      var peg$c11 = \"verbatim\";\n      var peg$c12 = \"filecontents*\";\n      var peg$c13 = \"filecontents\";\n      var peg$c14 = \"comment\";\n      var peg$c15 = \"lstlisting\";\n      var peg$c16 = \"(\";\n      var peg$c17 = \")\";\n      var peg$c18 = \"begin\";\n      var peg$c19 = \"end\";\n      var peg$c20 = \"equation*\";\n      var peg$c21 = \"equation\";\n      var peg$c22 = \"align*\";\n      var peg$c23 = \"align\";\n      var peg$c24 = \"alignat*\";\n      var peg$c25 = \"alignat\";\n      var peg$c26 = \"gather*\";\n      var peg$c27 = \"gather\";\n      var peg$c28 = \"multline*\";\n      var peg$c29 = \"multline\";\n      var peg$c30 = \"flalign*\";\n      var peg$c31 = \"flalign\";\n      var peg$c32 = \"split\";\n      var peg$c33 = \"math\";\n      var peg$c34 = \"displaymath\";\n      var peg$c35 = \"\\\\\";\n      var peg$c36 = \"{\";\n      var peg$c37 = \"}\";\n      var peg$c38 = \"$\";\n      var peg$c39 = \"&\";\n      var peg$c40 = \"\\r\";\n      var peg$c41 = \"\\n\";\n      var peg$c42 = \"\\r\\n\";\n      var peg$c43 = \"#\";\n      var peg$c44 = \"^\";\n      var peg$c45 = \"_\";\n      var peg$c46 = \"\\0\";\n      var peg$r0 = /^[^ \\t\\n\\r]/;\n      var peg$r1 = /^[ \\t]/;\n      var peg$r2 = /^[a-zA-Z]/;\n      var peg$r3 = /^[0-9]/;\n      var peg$r4 = /^[.,;:\\-*\\/()!?=+<>[\\]`'\"~]/;\n      var peg$e0 = peg$otherExpectation(\"document\");\n      var peg$e1 = peg$otherExpectation(\"math\");\n      var peg$e2 = peg$otherExpectation(\"token\");\n      var peg$e3 = peg$anyExpectation();\n      var peg$e4 = peg$otherExpectation(\"parbreak\");\n      var peg$e5 = peg$otherExpectation(\"math token\");\n      var peg$e6 = peg$otherExpectation(\"nonchar token\");\n      var peg$e7 = peg$literalExpectation(\"%\", false);\n      var peg$e8 = peg$otherExpectation(\"whitespace\");\n      var peg$e9 = peg$otherExpectation(\"number\");\n      var peg$e10 = peg$literalExpectation(\".\", false);\n      var peg$e11 = peg$otherExpectation(\"special macro\");\n      var peg$e12 = peg$literalExpectation(\"verb*\", false);\n      var peg$e13 = peg$literalExpectation(\"verb\", false);\n      var peg$e14 = peg$literalExpectation(\"[\", false);\n      var peg$e15 = peg$literalExpectation(\"]\", false);\n      var peg$e16 = peg$classExpectation([\" \", \"\t\", \"\\n\", \"\\r\"], true, false);\n      var peg$e17 = peg$otherExpectation(\"verbatim listings\");\n      var peg$e18 = peg$literalExpectation(\"lstinline\", false);\n      var peg$e19 = peg$otherExpectation(\"verbatim minted\");\n      var peg$e20 = peg$literalExpectation(\"mintinline\", false);\n      var peg$e21 = peg$literalExpectation(\"mint\", false);\n      var peg$e22 = peg$otherExpectation(\"verbatim minted environment\");\n      var peg$e23 = peg$literalExpectation(\"minted\", false);\n      var peg$e24 = peg$otherExpectation(\"verbatim environment\");\n      var peg$e25 = peg$literalExpectation(\"verbatim*\", false);\n      var peg$e26 = peg$literalExpectation(\"verbatim\", false);\n      var peg$e27 = peg$literalExpectation(\"filecontents*\", false);\n      var peg$e28 = peg$literalExpectation(\"filecontents\", false);\n      var peg$e29 = peg$literalExpectation(\"comment\", false);\n      var peg$e30 = peg$literalExpectation(\"lstlisting\", false);\n      var peg$e31 = peg$otherExpectation(\"macro\");\n      var peg$e32 = peg$otherExpectation(\"group\");\n      var peg$e33 = peg$otherExpectation(\"environment\");\n      var peg$e34 = peg$otherExpectation(\"math environment\");\n      var peg$e35 = peg$otherExpectation(\"math group\");\n      var peg$e36 = peg$literalExpectation(\"(\", false);\n      var peg$e37 = peg$literalExpectation(\")\", false);\n      var peg$e38 = peg$literalExpectation(\"begin\", false);\n      var peg$e39 = peg$literalExpectation(\"end\", false);\n      var peg$e40 = peg$literalExpectation(\"equation*\", false);\n      var peg$e41 = peg$literalExpectation(\"equation\", false);\n      var peg$e42 = peg$literalExpectation(\"align*\", false);\n      var peg$e43 = peg$literalExpectation(\"align\", false);\n      var peg$e44 = peg$literalExpectation(\"alignat*\", false);\n      var peg$e45 = peg$literalExpectation(\"alignat\", false);\n      var peg$e46 = peg$literalExpectation(\"gather*\", false);\n      var peg$e47 = peg$literalExpectation(\"gather\", false);\n      var peg$e48 = peg$literalExpectation(\"multline*\", false);\n      var peg$e49 = peg$literalExpectation(\"multline\", false);\n      var peg$e50 = peg$literalExpectation(\"flalign*\", false);\n      var peg$e51 = peg$literalExpectation(\"flalign\", false);\n      var peg$e52 = peg$literalExpectation(\"split\", false);\n      var peg$e53 = peg$literalExpectation(\"math\", false);\n      var peg$e54 = peg$literalExpectation(\"displaymath\", false);\n      var peg$e55 = peg$otherExpectation(\"escape\");\n      var peg$e56 = peg$literalExpectation(\"\\\\\", false);\n      var peg$e57 = peg$literalExpectation(\"{\", false);\n      var peg$e58 = peg$literalExpectation(\"}\", false);\n      var peg$e59 = peg$literalExpectation(\"$\", false);\n      var peg$e60 = peg$literalExpectation(\"&\", false);\n      var peg$e61 = peg$otherExpectation(\"newline\");\n      var peg$e62 = peg$literalExpectation(\"\\r\", false);\n      var peg$e63 = peg$literalExpectation(\"\\n\", false);\n      var peg$e64 = peg$literalExpectation(\"\\r\\n\", false);\n      var peg$e65 = peg$literalExpectation(\"#\", false);\n      var peg$e66 = peg$literalExpectation(\"^\", false);\n      var peg$e67 = peg$literalExpectation(\"_\", false);\n      var peg$e68 = peg$literalExpectation(\"\\0\", false);\n      var peg$e69 = peg$classExpectation([\" \", \"\t\"], false, false);\n      var peg$e70 = peg$otherExpectation(\"letter\");\n      var peg$e71 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false);\n      var peg$e72 = peg$otherExpectation(\"digit\");\n      var peg$e73 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n      var peg$e74 = peg$otherExpectation(\"punctuation\");\n      var peg$e75 = peg$classExpectation([\".\", \",\", \";\", \":\", \"-\", \"*\", \"/\", \"(\", \")\", \"!\", \"?\", \"=\", \"+\", \"<\", \">\", \"[\", \"]\", \"`\", \"'\", '\"', \"~\"], false, false);\n      var peg$e76 = peg$otherExpectation(\"full comment\");\n      var peg$e77 = peg$otherExpectation(\"comment\");\n      var peg$f0 = function(content) {\n        return createNode(\"root\", { content: content.flatMap((x) => x) });\n      };\n      var peg$f1 = function(t) {\n        return t;\n      };\n      var peg$f2 = function(eq) {\n        return createNode(\"inlinemath\", { content: eq.flatMap((x) => x) });\n      };\n      var peg$f3 = function(s) {\n        return createNode(\"string\", { content: s });\n      };\n      var peg$f4 = function(s) {\n        return createNode(\"string\", { content: s });\n      };\n      var peg$f5 = function() {\n        return createNode(\"parbreak\");\n      };\n      var peg$f6 = function(x) {\n        return x;\n      };\n      var peg$f7 = function(x) {\n        return x;\n      };\n      var peg$f8 = function() {\n        return createNode(\"macro\", { content: \"^\", escapeToken: \"\" });\n      };\n      var peg$f9 = function() {\n        return createNode(\"macro\", { content: \"_\", escapeToken: \"\" });\n      };\n      var peg$f10 = function(s) {\n        return createNode(\"string\", { content: s });\n      };\n      var peg$f11 = function() {\n        return createNode(\"whitespace\");\n      };\n      var peg$f12 = function(a, b) {\n        return a.join(\"\") + \".\" + b.join(\"\");\n      };\n      var peg$f13 = function(b) {\n        return \".\" + b.join(\"\");\n      };\n      var peg$f14 = function(a) {\n        return a.join(\"\") + \".\";\n      };\n      var peg$f15 = function(s) {\n        return createNode(\"string\", { content: s });\n      };\n      var peg$f16 = function(env, e, end) {\n        return end == e;\n      };\n      var peg$f17 = function(env, e, x) {\n        return x;\n      };\n      var peg$f18 = function(env, e, x, end) {\n        return end == e;\n      };\n      var peg$f19 = function(env, e, x) {\n        return createNode(\"verb\", {\n          env,\n          escape: e,\n          content: x.join(\"\")\n        });\n      };\n      var peg$f20 = function(x) {\n        return x;\n      };\n      var peg$f21 = function(x) {\n        return createNode(\"displaymath\", { content: x.flatMap((x2) => x2) });\n      };\n      var peg$f22 = function(x) {\n        return x;\n      };\n      var peg$f23 = function(x) {\n        return createNode(\"inlinemath\", { content: x.flatMap((x2) => x2) });\n      };\n      var peg$f24 = function(x) {\n        return x;\n      };\n      var peg$f25 = function(x) {\n        return createNode(\"displaymath\", { content: x.flatMap((x2) => x2) });\n      };\n      var peg$f26 = function(end) {\n        return end.type === \"string\" && end.content === \"]\";\n      };\n      var peg$f27 = function(x) {\n        return x;\n      };\n      var peg$f28 = function(o) {\n        return [\n          createNode(\"string\", { content: \"[\" }),\n          ...o,\n          createNode(\"string\", { content: \"]\" })\n        ];\n      };\n      var peg$f29 = function(x) {\n        return x;\n      };\n      var peg$f30 = function(v) {\n        return createNode(\"group\", {\n          content: createNode(\"string\", { content: v.join(\"\") })\n        });\n      };\n      var peg$f31 = function(d, end) {\n        return end == d;\n      };\n      var peg$f32 = function(d, x) {\n        return x;\n      };\n      var peg$f33 = function(d, v, end) {\n        return end == d;\n      };\n      var peg$f34 = function(d, v) {\n        return [\n          createNode(\"string\", { content: d }),\n          createNode(\"string\", { content: v.join(\"\") }),\n          createNode(\"string\", { content: d })\n        ];\n      };\n      var peg$f35 = function(macro, option, verbatim) {\n        return [\n          createNode(\"macro\", { content: macro }),\n          ...option || [],\n          ...[].concat(verbatim)\n        ];\n      };\n      var peg$f36 = function(macro, option, language, verbatim) {\n        return [\n          createNode(\"macro\", { content: macro }),\n          ...option || [],\n          language,\n          ...[].concat(verbatim)\n        ];\n      };\n      var peg$f37 = function(env, lang, end_env) {\n        return compare_env({ content: [env] }, end_env);\n      };\n      var peg$f38 = function(env, lang, x) {\n        return x;\n      };\n      var peg$f39 = function(env, lang, body) {\n        return createNode(\"verbatim\", {\n          env: `${env}{${lang.content.content}}`,\n          content: body.join(\"\")\n        });\n      };\n      var peg$f40 = function(env, end_env) {\n        return compare_env({ content: [env] }, end_env);\n      };\n      var peg$f41 = function(env, x) {\n        return x;\n      };\n      var peg$f42 = function(env, body) {\n        return createNode(\"verbatim\", {\n          env,\n          content: body.join(\"\")\n        });\n      };\n      var peg$f43 = function(n) {\n        return n.join(\"\");\n      };\n      var peg$f44 = function(n) {\n        return n;\n      };\n      var peg$f45 = function(m) {\n        return createNode(\"macro\", { content: m });\n      };\n      var peg$f46 = function(c) {\n        return c;\n      };\n      var peg$f47 = function(x) {\n        return createNode(\"group\", { content: x.flatMap((x2) => x2) });\n      };\n      var peg$f48 = function(g) {\n        return text().slice(1, -1);\n      };\n      var peg$f49 = function(env, env_comment, end_env) {\n        return compare_env(env, end_env);\n      };\n      var peg$f50 = function(env, env_comment, x) {\n        return x;\n      };\n      var peg$f51 = function(env, env_comment, body) {\n        body = body.flatMap((x) => x);\n        return createNode(\"environment\", {\n          env,\n          content: env_comment ? [env_comment, ...body] : body\n        });\n      };\n      var peg$f52 = function(env, env_comment, end_env) {\n        return compare_env({ content: [env] }, end_env);\n      };\n      var peg$f53 = function(env, env_comment, x) {\n        return x;\n      };\n      var peg$f54 = function(env, env_comment, body) {\n        body = body.flatMap((x) => x);\n        return createNode(\"mathenv\", {\n          env,\n          content: env_comment ? [env_comment, ...body] : body\n        });\n      };\n      var peg$f55 = function(c) {\n        return c;\n      };\n      var peg$f56 = function(x) {\n        return createNode(\"group\", { content: x.flatMap((x2) => x2) });\n      };\n      var peg$f57 = function(e) {\n        return createNode(\"string\", { content: e });\n      };\n      var peg$f58 = function() {\n        return createNode(\"string\", { content: \"\\\\\" });\n      };\n      var peg$f59 = function(s) {\n        return createNode(\"string\", { content: s });\n      };\n      var peg$f60 = function(s) {\n        return createNode(\"string\", { content: s });\n      };\n      var peg$f61 = function(s) {\n        return createNode(\"string\", { content: s });\n      };\n      var peg$f62 = function(s) {\n        return createNode(\"string\", { content: s });\n      };\n      var peg$f63 = function(s) {\n        return createNode(\"string\", { content: s });\n      };\n      var peg$f64 = function(s) {\n        return createNode(\"string\", { content: s });\n      };\n      var peg$f65 = function(s) {\n        return createNode(\"string\", { content: s });\n      };\n      var peg$f66 = function() {\n        return \" \";\n      };\n      var peg$f67 = function(p) {\n        return createNode(\"string\", { content: p });\n      };\n      var peg$f68 = function(leading_sp, comment) {\n        return createNode(\"comment\", {\n          ...comment,\n          sameline: false,\n          leadingWhitespace: leading_sp.length > 0\n        });\n      };\n      var peg$f69 = function(spaces, x) {\n        return createNode(\"comment\", {\n          ...x,\n          sameline: true,\n          leadingWhitespace: spaces.length > 0\n        });\n      };\n      var peg$f70 = function(c) {\n        return c;\n      };\n      var peg$f71 = function(c) {\n        return { content: c.join(\"\"), suffixParbreak: true };\n      };\n      var peg$f72 = function(c) {\n        return c;\n      };\n      var peg$f73 = function(c) {\n        return { content: c.join(\"\") };\n      };\n      var peg$f74 = function() {\n        var loc = location();\n        return loc.start.column === 1;\n      };\n      var peg$currPos = 0;\n      var peg$savedPos = 0;\n      var peg$posDetailsCache = [{ line: 1, column: 1 }];\n      var peg$maxFailPos = 0;\n      var peg$maxFailExpected = [];\n      var peg$silentFails = 0;\n      var peg$result;\n      if (\"startRule\" in options) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n          throw new Error(`Can't start parsing from rule \"` + options.startRule + '\".');\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n      }\n      function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n      }\n      function offset() {\n        return peg$savedPos;\n      }\n      function range() {\n        return {\n          source: peg$source,\n          start: peg$savedPos,\n          end: peg$currPos\n        };\n      }\n      function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n      }\n      function expected(description, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError(\n          [peg$otherExpectation(description)],\n          input.substring(peg$savedPos, peg$currPos),\n          location2\n        );\n      }\n      function error(message, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location2);\n      }\n      function peg$literalExpectation(text2, ignoreCase) {\n        return { type: \"literal\", text: text2, ignoreCase };\n      }\n      function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts, inverted, ignoreCase };\n      }\n      function peg$anyExpectation() {\n        return { type: \"any\" };\n      }\n      function peg$endExpectation() {\n        return { type: \"end\" };\n      }\n      function peg$otherExpectation(description) {\n        return { type: \"other\", description };\n      }\n      function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n          return details;\n        } else {\n          p = pos - 1;\n          while (!peg$posDetailsCache[p]) {\n            p--;\n          }\n          details = peg$posDetailsCache[p];\n          details = {\n            line: details.line,\n            column: details.column\n          };\n          while (p < pos) {\n            if (input.charCodeAt(p) === 10) {\n              details.line++;\n              details.column = 1;\n            } else {\n              details.column++;\n            }\n            p++;\n          }\n          peg$posDetailsCache[pos] = details;\n          return details;\n        }\n      }\n      function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n          source: peg$source,\n          start: {\n            offset: startPos,\n            line: startPosDetails.line,\n            column: startPosDetails.column\n          },\n          end: {\n            offset: endPos,\n            line: endPosDetails.line,\n            column: endPosDetails.column\n          }\n        };\n      }\n      function peg$fail(expected2) {\n        if (peg$currPos < peg$maxFailPos) {\n          return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n          peg$maxFailPos = peg$currPos;\n          peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected2);\n      }\n      function peg$buildSimpleError(message, location2) {\n        return new peg$SyntaxError(message, null, null, location2);\n      }\n      function peg$buildStructuredError(expected2, found, location2) {\n        return new peg$SyntaxError(\n          peg$SyntaxError.buildMessage(expected2, found),\n          expected2,\n          found,\n          location2\n        );\n      }\n      function peg$parsedocument() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsetoken();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsetoken();\n        }\n        peg$savedPos = s0;\n        s1 = peg$f0(s1);\n        s0 = s1;\n        peg$silentFails--;\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e0);\n        }\n        return s0;\n      }\n      function peg$parsemath() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = [];\n        s1 = peg$parsemath_token();\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          s1 = peg$parsemath_token();\n        }\n        peg$silentFails--;\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e1);\n        }\n        return s0;\n      }\n      function peg$parsetoken() {\n        var s0, s1, s2, s3, s4, s5;\n        peg$silentFails++;\n        s0 = peg$parsespecial_macro();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsemacro();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsefull_comment();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsegroup();\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsemath_shift();\n                if (s1 !== peg$FAILED) {\n                  s2 = [];\n                  s3 = peg$currPos;\n                  s4 = peg$currPos;\n                  peg$silentFails++;\n                  s5 = peg$parsemath_shift();\n                  peg$silentFails--;\n                  if (s5 === peg$FAILED) {\n                    s4 = void 0;\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parsemath_token();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s3;\n                      s3 = peg$f1(s5);\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                  if (s3 !== peg$FAILED) {\n                    while (s3 !== peg$FAILED) {\n                      s2.push(s3);\n                      s3 = peg$currPos;\n                      s4 = peg$currPos;\n                      peg$silentFails++;\n                      s5 = peg$parsemath_shift();\n                      peg$silentFails--;\n                      if (s5 === peg$FAILED) {\n                        s4 = void 0;\n                      } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                      }\n                      if (s4 !== peg$FAILED) {\n                        s5 = peg$parsemath_token();\n                        if (s5 !== peg$FAILED) {\n                          peg$savedPos = s3;\n                          s3 = peg$f1(s5);\n                        } else {\n                          peg$currPos = s3;\n                          s3 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    }\n                  } else {\n                    s2 = peg$FAILED;\n                  }\n                  if (s2 !== peg$FAILED) {\n                    s3 = peg$parsemath_shift();\n                    if (s3 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s0 = peg$f2(s2);\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parsealignment_tab();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parseparbreak();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parsemacro_parameter();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parseignore();\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$parsenumber();\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$parsewhitespace();\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$parsepunctuation();\n                              if (s0 === peg$FAILED) {\n                                s0 = peg$currPos;\n                                s1 = peg$currPos;\n                                s2 = [];\n                                s3 = peg$currPos;\n                                s4 = peg$currPos;\n                                peg$silentFails++;\n                                s5 = peg$parsenonchar_token();\n                                peg$silentFails--;\n                                if (s5 === peg$FAILED) {\n                                  s4 = void 0;\n                                } else {\n                                  peg$currPos = s4;\n                                  s4 = peg$FAILED;\n                                }\n                                if (s4 !== peg$FAILED) {\n                                  if (input.length > peg$currPos) {\n                                    s5 = input.charAt(peg$currPos);\n                                    peg$currPos++;\n                                  } else {\n                                    s5 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                      peg$fail(peg$e3);\n                                    }\n                                  }\n                                  if (s5 !== peg$FAILED) {\n                                    s4 = [s4, s5];\n                                    s3 = s4;\n                                  } else {\n                                    peg$currPos = s3;\n                                    s3 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s3;\n                                  s3 = peg$FAILED;\n                                }\n                                if (s3 !== peg$FAILED) {\n                                  while (s3 !== peg$FAILED) {\n                                    s2.push(s3);\n                                    s3 = peg$currPos;\n                                    s4 = peg$currPos;\n                                    peg$silentFails++;\n                                    s5 = peg$parsenonchar_token();\n                                    peg$silentFails--;\n                                    if (s5 === peg$FAILED) {\n                                      s4 = void 0;\n                                    } else {\n                                      peg$currPos = s4;\n                                      s4 = peg$FAILED;\n                                    }\n                                    if (s4 !== peg$FAILED) {\n                                      if (input.length > peg$currPos) {\n                                        s5 = input.charAt(peg$currPos);\n                                        peg$currPos++;\n                                      } else {\n                                        s5 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                          peg$fail(peg$e3);\n                                        }\n                                      }\n                                      if (s5 !== peg$FAILED) {\n                                        s4 = [s4, s5];\n                                        s3 = s4;\n                                      } else {\n                                        peg$currPos = s3;\n                                        s3 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s3;\n                                      s3 = peg$FAILED;\n                                    }\n                                  }\n                                } else {\n                                  s2 = peg$FAILED;\n                                }\n                                if (s2 !== peg$FAILED) {\n                                  s1 = input.substring(s1, peg$currPos);\n                                } else {\n                                  s1 = s2;\n                                }\n                                if (s1 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$f3(s1);\n                                }\n                                s0 = s1;\n                                if (s0 === peg$FAILED) {\n                                  s0 = peg$parsebegin_group();\n                                  if (s0 === peg$FAILED) {\n                                    s0 = peg$parseend_group();\n                                    if (s0 === peg$FAILED) {\n                                      s0 = peg$parsemath_shift();\n                                      if (s0 === peg$FAILED) {\n                                        s0 = peg$currPos;\n                                        if (input.length > peg$currPos) {\n                                          s1 = input.charAt(peg$currPos);\n                                          peg$currPos++;\n                                        } else {\n                                          s1 = peg$FAILED;\n                                          if (peg$silentFails === 0) {\n                                            peg$fail(peg$e3);\n                                          }\n                                        }\n                                        if (s1 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$f4(s1);\n                                        }\n                                        s0 = s1;\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e2);\n          }\n        }\n        return s0;\n      }\n      function peg$parseparbreak() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = [];\n        s3 = peg$parsesp();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsesp();\n        }\n        s3 = peg$parsenl();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = [];\n          s7 = peg$parsesp();\n          while (s7 !== peg$FAILED) {\n            s6.push(s7);\n            s7 = peg$parsesp();\n          }\n          s7 = peg$parsenl();\n          if (s7 !== peg$FAILED) {\n            s6 = [s6, s7];\n            s5 = s6;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$currPos;\n              s6 = [];\n              s7 = peg$parsesp();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parsesp();\n              }\n              s7 = peg$parsenl();\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            }\n          } else {\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesp();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesp();\n            }\n            s6 = peg$currPos;\n            peg$silentFails++;\n            s7 = peg$parsecomment_start();\n            peg$silentFails--;\n            if (s7 === peg$FAILED) {\n              s6 = void 0;\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              s2 = [s2, s3, s4, s5, s6];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          s2 = [];\n          s3 = peg$parsesp();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parsesp();\n          }\n          s3 = peg$parsenl();\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$currPos;\n            s6 = [];\n            s7 = peg$parsesp();\n            while (s7 !== peg$FAILED) {\n              s6.push(s7);\n              s7 = peg$parsesp();\n            }\n            s7 = peg$parsenl();\n            if (s7 !== peg$FAILED) {\n              s6 = [s6, s7];\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              while (s5 !== peg$FAILED) {\n                s4.push(s5);\n                s5 = peg$currPos;\n                s6 = [];\n                s7 = peg$parsesp();\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n                  s7 = peg$parsesp();\n                }\n                s7 = peg$parsenl();\n                if (s7 !== peg$FAILED) {\n                  s6 = [s6, s7];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              }\n            } else {\n              s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n              s2 = [s2, s3, s4];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f5();\n        }\n        s0 = s1;\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e4);\n          }\n        }\n        return s0;\n      }\n      function peg$parsemath_token() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$parsespecial_macro();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsemacro();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsefull_comment();\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = [];\n              s2 = peg$parsewhitespace();\n              while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parsewhitespace();\n              }\n              s2 = peg$parsegroup();\n              if (s2 !== peg$FAILED) {\n                s3 = [];\n                s4 = peg$parsewhitespace();\n                while (s4 !== peg$FAILED) {\n                  s3.push(s4);\n                  s4 = peg$parsewhitespace();\n                }\n                peg$savedPos = s0;\n                s0 = peg$f6(s2);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = [];\n                s2 = peg$parsewhitespace();\n                while (s2 !== peg$FAILED) {\n                  s1.push(s2);\n                  s2 = peg$parsewhitespace();\n                }\n                s2 = peg$parsealignment_tab();\n                if (s2 !== peg$FAILED) {\n                  s3 = [];\n                  s4 = peg$parsewhitespace();\n                  while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    s4 = peg$parsewhitespace();\n                  }\n                  peg$savedPos = s0;\n                  s0 = peg$f7(s2);\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parsemacro_parameter();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = [];\n                    s2 = peg$parsewhitespace();\n                    while (s2 !== peg$FAILED) {\n                      s1.push(s2);\n                      s2 = peg$parsewhitespace();\n                    }\n                    s2 = peg$parsesuperscript();\n                    if (s2 !== peg$FAILED) {\n                      s3 = [];\n                      s4 = peg$parsewhitespace();\n                      while (s4 !== peg$FAILED) {\n                        s3.push(s4);\n                        s4 = peg$parsewhitespace();\n                      }\n                      peg$savedPos = s0;\n                      s0 = peg$f8();\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      s1 = [];\n                      s2 = peg$parsewhitespace();\n                      while (s2 !== peg$FAILED) {\n                        s1.push(s2);\n                        s2 = peg$parsewhitespace();\n                      }\n                      s2 = peg$parsesubscript();\n                      if (s2 !== peg$FAILED) {\n                        s3 = [];\n                        s4 = peg$parsewhitespace();\n                        while (s4 !== peg$FAILED) {\n                          s3.push(s4);\n                          s4 = peg$parsewhitespace();\n                        }\n                        peg$savedPos = s0;\n                        s0 = peg$f9();\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parseignore();\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$parsewhitespace();\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            if (input.length > peg$currPos) {\n                              s1 = input.charAt(peg$currPos);\n                              peg$currPos++;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) {\n                                peg$fail(peg$e3);\n                              }\n                            }\n                            if (s1 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$f10(s1);\n                            }\n                            s0 = s1;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e5);\n          }\n        }\n        return s0;\n      }\n      function peg$parsenonchar_token() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$parseescape();\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 37) {\n            s0 = peg$c0;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e7);\n            }\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsebegin_group();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseend_group();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsemath_shift();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parsealignment_tab();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parsenl();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parsemacro_parameter();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parseignore();\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$parsesp();\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$parsepunctuation();\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$parseEOF();\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e6);\n          }\n        }\n        return s0;\n      }\n      function peg$parsewhitespace() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parsenl();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parsesp();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsesp();\n          }\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          s2 = [];\n          s3 = peg$parsesp();\n          if (s3 !== peg$FAILED) {\n            while (s3 !== peg$FAILED) {\n              s2.push(s3);\n              s3 = peg$parsesp();\n            }\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenl();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$currPos;\n              peg$silentFails++;\n              s5 = peg$parsecomment_start();\n              peg$silentFails--;\n              if (s5 === peg$FAILED) {\n                s4 = void 0;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n              if (s4 !== peg$FAILED) {\n                s5 = [];\n                s6 = peg$parsesp();\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parsesp();\n                }\n                s6 = peg$currPos;\n                peg$silentFails++;\n                s7 = peg$parsenl();\n                peg$silentFails--;\n                if (s7 === peg$FAILED) {\n                  s6 = void 0;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n                if (s6 !== peg$FAILED) {\n                  s2 = [s2, s3, s4, s5, s6];\n                  s1 = s2;\n                } else {\n                  peg$currPos = s1;\n                  s1 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n          if (s1 === peg$FAILED) {\n            s1 = [];\n            s2 = peg$parsesp();\n            if (s2 !== peg$FAILED) {\n              while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parsesp();\n              }\n            } else {\n              s1 = peg$FAILED;\n            }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f11();\n        }\n        s0 = s1;\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e8);\n          }\n        }\n        return s0;\n      }\n      function peg$parsenumber() {\n        var s0, s1, s2, s3, s4, s5;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = [];\n        s3 = peg$parsenum();\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parsenum();\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s3 = peg$c1;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e10);\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$parsenum();\n            if (s5 !== peg$FAILED) {\n              while (s5 !== peg$FAILED) {\n                s4.push(s5);\n                s5 = peg$parsenum();\n              }\n            } else {\n              s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s1 = peg$f12(s2, s4);\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s2 = peg$c1;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e10);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = [];\n            s4 = peg$parsenum();\n            if (s4 !== peg$FAILED) {\n              while (s4 !== peg$FAILED) {\n                s3.push(s4);\n                s4 = peg$parsenum();\n              }\n            } else {\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s1 = peg$f13(s3);\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n          if (s1 === peg$FAILED) {\n            s1 = peg$currPos;\n            s2 = [];\n            s3 = peg$parsenum();\n            if (s3 !== peg$FAILED) {\n              while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$parsenum();\n              }\n            } else {\n              s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 46) {\n                s3 = peg$c1;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e10);\n                }\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s1;\n                s1 = peg$f14(s2);\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f15(s1);\n        }\n        s0 = s1;\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e9);\n          }\n        }\n        return s0;\n      }\n      function peg$parsespecial_macro() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parseescape();\n        if (s1 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 5) === peg$c2) {\n            s2 = peg$c2;\n            peg$currPos += 5;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e12);\n            }\n          }\n          if (s2 === peg$FAILED) {\n            if (input.substr(peg$currPos, 4) === peg$c3) {\n              s2 = peg$c3;\n              peg$currPos += 4;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e13);\n              }\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e3);\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = [];\n              s5 = peg$currPos;\n              s6 = peg$currPos;\n              peg$silentFails++;\n              s7 = peg$currPos;\n              if (input.length > peg$currPos) {\n                s8 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e3);\n                }\n              }\n              if (s8 !== peg$FAILED) {\n                peg$savedPos = peg$currPos;\n                s9 = peg$f16(s2, s3, s8);\n                if (s9) {\n                  s9 = void 0;\n                } else {\n                  s9 = peg$FAILED;\n                }\n                if (s9 !== peg$FAILED) {\n                  s8 = [s8, s9];\n                  s7 = s8;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              peg$silentFails--;\n              if (s7 === peg$FAILED) {\n                s6 = void 0;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.length > peg$currPos) {\n                  s7 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$e3);\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s5;\n                  s5 = peg$f17(s2, s3, s7);\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n              while (s5 !== peg$FAILED) {\n                s4.push(s5);\n                s5 = peg$currPos;\n                s6 = peg$currPos;\n                peg$silentFails++;\n                s7 = peg$currPos;\n                if (input.length > peg$currPos) {\n                  s8 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$e3);\n                  }\n                }\n                if (s8 !== peg$FAILED) {\n                  peg$savedPos = peg$currPos;\n                  s9 = peg$f16(s2, s3, s8);\n                  if (s9) {\n                    s9 = void 0;\n                  } else {\n                    s9 = peg$FAILED;\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s8 = [s8, s9];\n                    s7 = s8;\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                peg$silentFails--;\n                if (s7 === peg$FAILED) {\n                  s6 = void 0;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n                if (s6 !== peg$FAILED) {\n                  if (input.length > peg$currPos) {\n                    s7 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$e3);\n                    }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s5;\n                    s5 = peg$f17(s2, s3, s7);\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              }\n              s5 = peg$currPos;\n              if (input.length > peg$currPos) {\n                s6 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e3);\n                }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = peg$currPos;\n                s7 = peg$f18(s2, s3, s4, s6);\n                if (s7) {\n                  s7 = void 0;\n                } else {\n                  s7 = peg$FAILED;\n                }\n                if (s7 !== peg$FAILED) {\n                  s6 = [s6, s7];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f19(s2, s3, s4);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseverbatim_listings();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseverbatim_minted();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseverbatim_environment();\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsebegin_display_math();\n                if (s1 !== peg$FAILED) {\n                  s2 = [];\n                  s3 = peg$currPos;\n                  s4 = peg$currPos;\n                  peg$silentFails++;\n                  s5 = peg$parseend_display_math();\n                  peg$silentFails--;\n                  if (s5 === peg$FAILED) {\n                    s4 = void 0;\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parsemath_token();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s3;\n                      s3 = peg$f20(s5);\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                  while (s3 !== peg$FAILED) {\n                    s2.push(s3);\n                    s3 = peg$currPos;\n                    s4 = peg$currPos;\n                    peg$silentFails++;\n                    s5 = peg$parseend_display_math();\n                    peg$silentFails--;\n                    if (s5 === peg$FAILED) {\n                      s4 = void 0;\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                    if (s4 !== peg$FAILED) {\n                      s5 = peg$parsemath_token();\n                      if (s5 !== peg$FAILED) {\n                        peg$savedPos = s3;\n                        s3 = peg$f20(s5);\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  }\n                  s3 = peg$parseend_display_math();\n                  if (s3 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s0 = peg$f21(s2);\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parsebegin_inline_math();\n                  if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$currPos;\n                    s4 = peg$currPos;\n                    peg$silentFails++;\n                    s5 = peg$parseend_inline_math();\n                    peg$silentFails--;\n                    if (s5 === peg$FAILED) {\n                      s4 = void 0;\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                    if (s4 !== peg$FAILED) {\n                      s5 = peg$parsemath_token();\n                      if (s5 !== peg$FAILED) {\n                        peg$savedPos = s3;\n                        s3 = peg$f22(s5);\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                    while (s3 !== peg$FAILED) {\n                      s2.push(s3);\n                      s3 = peg$currPos;\n                      s4 = peg$currPos;\n                      peg$silentFails++;\n                      s5 = peg$parseend_inline_math();\n                      peg$silentFails--;\n                      if (s5 === peg$FAILED) {\n                        s4 = void 0;\n                      } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                      }\n                      if (s4 !== peg$FAILED) {\n                        s5 = peg$parsemath_token();\n                        if (s5 !== peg$FAILED) {\n                          peg$savedPos = s3;\n                          s3 = peg$f22(s5);\n                        } else {\n                          peg$currPos = s3;\n                          s3 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    }\n                    s3 = peg$parseend_inline_math();\n                    if (s3 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s0 = peg$f23(s2);\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parsemath_shift();\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$parsemath_shift();\n                      if (s2 !== peg$FAILED) {\n                        s3 = [];\n                        s4 = peg$currPos;\n                        s5 = peg$currPos;\n                        peg$silentFails++;\n                        s6 = peg$currPos;\n                        s7 = peg$parsemath_shift();\n                        if (s7 !== peg$FAILED) {\n                          s8 = peg$parsemath_shift();\n                          if (s8 !== peg$FAILED) {\n                            s7 = [s7, s8];\n                            s6 = s7;\n                          } else {\n                            peg$currPos = s6;\n                            s6 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s6;\n                          s6 = peg$FAILED;\n                        }\n                        peg$silentFails--;\n                        if (s6 === peg$FAILED) {\n                          s5 = void 0;\n                        } else {\n                          peg$currPos = s5;\n                          s5 = peg$FAILED;\n                        }\n                        if (s5 !== peg$FAILED) {\n                          s6 = peg$parsemath_token();\n                          if (s6 !== peg$FAILED) {\n                            peg$savedPos = s4;\n                            s4 = peg$f24(s6);\n                          } else {\n                            peg$currPos = s4;\n                            s4 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s4;\n                          s4 = peg$FAILED;\n                        }\n                        while (s4 !== peg$FAILED) {\n                          s3.push(s4);\n                          s4 = peg$currPos;\n                          s5 = peg$currPos;\n                          peg$silentFails++;\n                          s6 = peg$currPos;\n                          s7 = peg$parsemath_shift();\n                          if (s7 !== peg$FAILED) {\n                            s8 = peg$parsemath_shift();\n                            if (s8 !== peg$FAILED) {\n                              s7 = [s7, s8];\n                              s6 = s7;\n                            } else {\n                              peg$currPos = s6;\n                              s6 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s6;\n                            s6 = peg$FAILED;\n                          }\n                          peg$silentFails--;\n                          if (s6 === peg$FAILED) {\n                            s5 = void 0;\n                          } else {\n                            peg$currPos = s5;\n                            s5 = peg$FAILED;\n                          }\n                          if (s5 !== peg$FAILED) {\n                            s6 = peg$parsemath_token();\n                            if (s6 !== peg$FAILED) {\n                              peg$savedPos = s4;\n                              s4 = peg$f24(s6);\n                            } else {\n                              peg$currPos = s4;\n                              s4 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s4;\n                            s4 = peg$FAILED;\n                          }\n                        }\n                        s4 = peg$parsemath_shift();\n                        if (s4 !== peg$FAILED) {\n                          s5 = peg$parsemath_shift();\n                          if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s0 = peg$f25(s3);\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parsemath_environment();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parseenvironment();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e11);\n          }\n        }\n        return s0;\n      }\n      function peg$parsesquare_bracket_argument() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 91) {\n          s1 = peg$c4;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e14);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          peg$silentFails++;\n          s5 = peg$currPos;\n          s6 = peg$parsetoken();\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s7 = peg$f26(s6);\n            if (s7) {\n              s7 = void 0;\n            } else {\n              s7 = peg$FAILED;\n            }\n            if (s7 !== peg$FAILED) {\n              s6 = [s6, s7];\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          peg$silentFails--;\n          if (s5 === peg$FAILED) {\n            s4 = void 0;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetoken();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s3 = peg$f27(s5);\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = peg$currPos;\n            peg$silentFails++;\n            s5 = peg$currPos;\n            s6 = peg$parsetoken();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s7 = peg$f26(s6);\n              if (s7) {\n                s7 = void 0;\n              } else {\n                s7 = peg$FAILED;\n              }\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            peg$silentFails--;\n            if (s5 === peg$FAILED) {\n              s4 = void 0;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsetoken();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s3 = peg$f27(s5);\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          }\n          if (input.charCodeAt(peg$currPos) === 93) {\n            s3 = peg$c5;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e15);\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f28(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseverbatim_group() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        s1 = peg$parsebegin_group();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          peg$silentFails++;\n          s5 = peg$parseend_group();\n          peg$silentFails--;\n          if (s5 === peg$FAILED) {\n            s4 = void 0;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e3);\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s3 = peg$f29(s5);\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = peg$currPos;\n            peg$silentFails++;\n            s5 = peg$parseend_group();\n            peg$silentFails--;\n            if (s5 === peg$FAILED) {\n              s4 = void 0;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s5 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e3);\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s3 = peg$f29(s5);\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          }\n          s3 = peg$parseend_group();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f30(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseverbatim_delimited_by_char() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        s0 = peg$currPos;\n        if (peg$r0.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e16);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          peg$silentFails++;\n          s5 = peg$currPos;\n          if (input.length > peg$currPos) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e3);\n            }\n          }\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s7 = peg$f31(s1, s6);\n            if (s7) {\n              s7 = void 0;\n            } else {\n              s7 = peg$FAILED;\n            }\n            if (s7 !== peg$FAILED) {\n              s6 = [s6, s7];\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          peg$silentFails--;\n          if (s5 === peg$FAILED) {\n            s4 = void 0;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e3);\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s3 = peg$f32(s1, s5);\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = peg$currPos;\n            peg$silentFails++;\n            s5 = peg$currPos;\n            if (input.length > peg$currPos) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e3);\n              }\n            }\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s7 = peg$f31(s1, s6);\n              if (s7) {\n                s7 = void 0;\n              } else {\n                s7 = peg$FAILED;\n              }\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            peg$silentFails--;\n            if (s5 === peg$FAILED) {\n              s4 = void 0;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s5 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e3);\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s3 = peg$f32(s1, s5);\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          }\n          s3 = peg$currPos;\n          if (input.length > peg$currPos) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e3);\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s5 = peg$f33(s1, s2, s4);\n            if (s5) {\n              s5 = void 0;\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f34(s1, s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseverbatim_listings() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parseescape();\n        if (s1 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 9) === peg$c6) {\n            s2 = peg$c6;\n            peg$currPos += 9;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e18);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsesquare_bracket_argument();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            s4 = peg$parseverbatim_group();\n            if (s4 === peg$FAILED) {\n              s4 = peg$parseverbatim_delimited_by_char();\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f35(s2, s3, s4);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e17);\n          }\n        }\n        return s0;\n      }\n      function peg$parseverbatim_minted() {\n        var s0, s1, s2, s3, s4, s5;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parseescape();\n        if (s1 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 10) === peg$c7) {\n            s2 = peg$c7;\n            peg$currPos += 10;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e20);\n            }\n          }\n          if (s2 === peg$FAILED) {\n            if (input.substr(peg$currPos, 4) === peg$c8) {\n              s2 = peg$c8;\n              peg$currPos += 4;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e21);\n              }\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsesquare_bracket_argument();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            s4 = peg$parsegroup();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseverbatim_group();\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseverbatim_delimited_by_char();\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f36(s2, s3, s4, s5);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e19);\n          }\n        }\n        return s0;\n      }\n      function peg$parseverbatim_minted_environment() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parsebegin_env();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsebegin_group();\n          if (s2 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 6) === peg$c9) {\n              s3 = peg$c9;\n              peg$currPos += 6;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e23);\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parseend_group();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsegroup();\n                if (s5 !== peg$FAILED) {\n                  s6 = [];\n                  s7 = peg$currPos;\n                  s8 = peg$currPos;\n                  peg$silentFails++;\n                  s9 = peg$currPos;\n                  s10 = peg$parseend_env();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parsegroup();\n                    if (s11 !== peg$FAILED) {\n                      peg$savedPos = peg$currPos;\n                      s12 = peg$f37(s3, s5, s11);\n                      if (s12) {\n                        s12 = void 0;\n                      } else {\n                        s12 = peg$FAILED;\n                      }\n                      if (s12 !== peg$FAILED) {\n                        s10 = [s10, s11, s12];\n                        s9 = s10;\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s9;\n                    s9 = peg$FAILED;\n                  }\n                  peg$silentFails--;\n                  if (s9 === peg$FAILED) {\n                    s8 = void 0;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    if (input.length > peg$currPos) {\n                      s9 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$e3);\n                      }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s7;\n                      s7 = peg$f38(s3, s5, s9);\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                  while (s7 !== peg$FAILED) {\n                    s6.push(s7);\n                    s7 = peg$currPos;\n                    s8 = peg$currPos;\n                    peg$silentFails++;\n                    s9 = peg$currPos;\n                    s10 = peg$parseend_env();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parsegroup();\n                      if (s11 !== peg$FAILED) {\n                        peg$savedPos = peg$currPos;\n                        s12 = peg$f37(s3, s5, s11);\n                        if (s12) {\n                          s12 = void 0;\n                        } else {\n                          s12 = peg$FAILED;\n                        }\n                        if (s12 !== peg$FAILED) {\n                          s10 = [s10, s11, s12];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    peg$silentFails--;\n                    if (s9 === peg$FAILED) {\n                      s8 = void 0;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                    if (s8 !== peg$FAILED) {\n                      if (input.length > peg$currPos) {\n                        s9 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                      } else {\n                        s9 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                          peg$fail(peg$e3);\n                        }\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s7;\n                        s7 = peg$f38(s3, s5, s9);\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  }\n                  s7 = peg$parseend_env();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parsebegin_group();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseverbatim_env_name();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parseend_group();\n                        if (s10 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s0 = peg$f39(s3, s5, s6);\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e22);\n          }\n        }\n        return s0;\n      }\n      function peg$parseverbatim_environment() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parsebegin_env();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsebegin_group();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseverbatim_env_name();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parseend_group();\n              if (s4 !== peg$FAILED) {\n                s5 = [];\n                s6 = peg$currPos;\n                s7 = peg$currPos;\n                peg$silentFails++;\n                s8 = peg$currPos;\n                s9 = peg$parseend_env();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parsegroup();\n                  if (s10 !== peg$FAILED) {\n                    peg$savedPos = peg$currPos;\n                    s11 = peg$f40(s3, s10);\n                    if (s11) {\n                      s11 = void 0;\n                    } else {\n                      s11 = peg$FAILED;\n                    }\n                    if (s11 !== peg$FAILED) {\n                      s9 = [s9, s10, s11];\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n                peg$silentFails--;\n                if (s8 === peg$FAILED) {\n                  s7 = void 0;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.length > peg$currPos) {\n                    s8 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$e3);\n                    }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s6;\n                    s6 = peg$f41(s3, s8);\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$currPos;\n                  s7 = peg$currPos;\n                  peg$silentFails++;\n                  s8 = peg$currPos;\n                  s9 = peg$parseend_env();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parsegroup();\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = peg$currPos;\n                      s11 = peg$f40(s3, s10);\n                      if (s11) {\n                        s11 = void 0;\n                      } else {\n                        s11 = peg$FAILED;\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s9 = [s9, s10, s11];\n                        s8 = s9;\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                  peg$silentFails--;\n                  if (s8 === peg$FAILED) {\n                    s7 = void 0;\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    if (input.length > peg$currPos) {\n                      s8 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$e3);\n                      }\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s6;\n                      s6 = peg$f41(s3, s8);\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                }\n                s6 = peg$parseend_env();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsebegin_group();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parseverbatim_env_name();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseend_group();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f42(s3, s5);\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e24);\n          }\n        }\n        return s0;\n      }\n      function peg$parseverbatim_env_name() {\n        var s0;\n        if (input.substr(peg$currPos, 9) === peg$c10) {\n          s0 = peg$c10;\n          peg$currPos += 9;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e25);\n          }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 8) === peg$c11) {\n            s0 = peg$c11;\n            peg$currPos += 8;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e26);\n            }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 13) === peg$c12) {\n              s0 = peg$c12;\n              peg$currPos += 13;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e27);\n              }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 12) === peg$c13) {\n                s0 = peg$c13;\n                peg$currPos += 12;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e28);\n                }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 7) === peg$c14) {\n                  s0 = peg$c14;\n                  peg$currPos += 7;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$e29);\n                  }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 10) === peg$c15) {\n                    s0 = peg$c15;\n                    peg$currPos += 10;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$e30);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return s0;\n      }\n      function peg$parsemacro() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parseescape();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parsechar();\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parsechar();\n            }\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s1;\n            s1 = peg$f43(s3);\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          s2 = peg$parseescape();\n          if (s2 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e3);\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s1 = peg$f44(s3);\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f45(s1);\n        }\n        s0 = s1;\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e31);\n          }\n        }\n        return s0;\n      }\n      function peg$parsegroup() {\n        var s0, s1, s2, s3, s4, s5;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parsebegin_group();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          peg$silentFails++;\n          s5 = peg$parseend_group();\n          peg$silentFails--;\n          if (s5 === peg$FAILED) {\n            s4 = void 0;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetoken();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s3 = peg$f46(s5);\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = peg$currPos;\n            peg$silentFails++;\n            s5 = peg$parseend_group();\n            peg$silentFails--;\n            if (s5 === peg$FAILED) {\n              s4 = void 0;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsetoken();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s3 = peg$f46(s5);\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          }\n          s3 = peg$parseend_group();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f47(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e32);\n          }\n        }\n        return s0;\n      }\n      function peg$parsegroup_contents_as_string() {\n        var s0, s1;\n        s0 = peg$currPos;\n        s1 = peg$parsegroup();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f48(s1);\n        }\n        s0 = s1;\n        return s0;\n      }\n      function peg$parseenvironment() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parsebegin_env();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsegroup_contents_as_string();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsesameline_comment();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            s4 = [];\n            s5 = peg$currPos;\n            s6 = peg$currPos;\n            peg$silentFails++;\n            s7 = peg$currPos;\n            s8 = peg$parseend_env();\n            if (s8 !== peg$FAILED) {\n              s9 = peg$parsegroup_contents_as_string();\n              if (s9 !== peg$FAILED) {\n                peg$savedPos = peg$currPos;\n                s10 = peg$f49(s2, s3, s9);\n                if (s10) {\n                  s10 = void 0;\n                } else {\n                  s10 = peg$FAILED;\n                }\n                if (s10 !== peg$FAILED) {\n                  s8 = [s8, s9, s10];\n                  s7 = s8;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n            peg$silentFails--;\n            if (s7 === peg$FAILED) {\n              s6 = void 0;\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetoken();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s5;\n                s5 = peg$f50(s2, s3, s7);\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$currPos;\n              s6 = peg$currPos;\n              peg$silentFails++;\n              s7 = peg$currPos;\n              s8 = peg$parseend_env();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsegroup_contents_as_string();\n                if (s9 !== peg$FAILED) {\n                  peg$savedPos = peg$currPos;\n                  s10 = peg$f49(s2, s3, s9);\n                  if (s10) {\n                    s10 = void 0;\n                  } else {\n                    s10 = peg$FAILED;\n                  }\n                  if (s10 !== peg$FAILED) {\n                    s8 = [s8, s9, s10];\n                    s7 = s8;\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              peg$silentFails--;\n              if (s7 === peg$FAILED) {\n                s6 = void 0;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetoken();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s5;\n                  s5 = peg$f50(s2, s3, s7);\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            }\n            s5 = peg$parseend_env();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsegroup_contents_as_string();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f51(s2, s3, s4);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e33);\n          }\n        }\n        return s0;\n      }\n      function peg$parsemath_environment() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parsebegin_env();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsebegin_group();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsemath_env_name();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parseend_group();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsesameline_comment();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                s6 = [];\n                s7 = peg$currPos;\n                s8 = peg$currPos;\n                peg$silentFails++;\n                s9 = peg$currPos;\n                s10 = peg$parseend_env();\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parsegroup();\n                  if (s11 !== peg$FAILED) {\n                    peg$savedPos = peg$currPos;\n                    s12 = peg$f52(s3, s5, s11);\n                    if (s12) {\n                      s12 = void 0;\n                    } else {\n                      s12 = peg$FAILED;\n                    }\n                    if (s12 !== peg$FAILED) {\n                      s10 = [s10, s11, s12];\n                      s9 = s10;\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s9;\n                    s9 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s9;\n                  s9 = peg$FAILED;\n                }\n                peg$silentFails--;\n                if (s9 === peg$FAILED) {\n                  s8 = void 0;\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsemath_token();\n                  if (s9 !== peg$FAILED) {\n                    peg$savedPos = s7;\n                    s7 = peg$f53(s3, s5, s9);\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n                  s7 = peg$currPos;\n                  s8 = peg$currPos;\n                  peg$silentFails++;\n                  s9 = peg$currPos;\n                  s10 = peg$parseend_env();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parsegroup();\n                    if (s11 !== peg$FAILED) {\n                      peg$savedPos = peg$currPos;\n                      s12 = peg$f52(s3, s5, s11);\n                      if (s12) {\n                        s12 = void 0;\n                      } else {\n                        s12 = peg$FAILED;\n                      }\n                      if (s12 !== peg$FAILED) {\n                        s10 = [s10, s11, s12];\n                        s9 = s10;\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s9;\n                    s9 = peg$FAILED;\n                  }\n                  peg$silentFails--;\n                  if (s9 === peg$FAILED) {\n                    s8 = void 0;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsemath_token();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s7;\n                      s7 = peg$f53(s3, s5, s9);\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                }\n                s7 = peg$parseend_env();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsebegin_group();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsemath_env_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseend_group();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f54(s3, s5, s6);\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e34);\n          }\n        }\n        return s0;\n      }\n      function peg$parsemath_group() {\n        var s0, s1, s2, s3, s4, s5;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parsebegin_group();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          peg$silentFails++;\n          s5 = peg$parseend_group();\n          peg$silentFails--;\n          if (s5 === peg$FAILED) {\n            s4 = void 0;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsemath_token();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s3 = peg$f55(s5);\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = peg$currPos;\n            peg$silentFails++;\n            s5 = peg$parseend_group();\n            peg$silentFails--;\n            if (s5 === peg$FAILED) {\n              s4 = void 0;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsemath_token();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s3 = peg$f55(s5);\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          }\n          s3 = peg$parseend_group();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f56(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e35);\n          }\n        }\n        return s0;\n      }\n      function peg$parsebegin_display_math() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$parseescape();\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 91) {\n            s2 = peg$c4;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e14);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseend_display_math() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$parseescape();\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 93) {\n            s2 = peg$c5;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e15);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsebegin_inline_math() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$parseescape();\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s2 = peg$c16;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e36);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseend_inline_math() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$parseescape();\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s2 = peg$c17;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e37);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsebegin_env() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$parseescape();\n        if (s1 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 5) === peg$c18) {\n            s2 = peg$c18;\n            peg$currPos += 5;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e38);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseend_env() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$parseescape();\n        if (s1 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 3) === peg$c19) {\n            s2 = peg$c19;\n            peg$currPos += 3;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e39);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsemath_env_name() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 9) === peg$c20) {\n          s1 = peg$c20;\n          peg$currPos += 9;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e40);\n          }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 8) === peg$c21) {\n            s1 = peg$c21;\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e41);\n            }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 6) === peg$c22) {\n              s1 = peg$c22;\n              peg$currPos += 6;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e42);\n              }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 5) === peg$c23) {\n                s1 = peg$c23;\n                peg$currPos += 5;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e43);\n                }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 8) === peg$c24) {\n                  s1 = peg$c24;\n                  peg$currPos += 8;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$e44);\n                  }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 7) === peg$c25) {\n                    s1 = peg$c25;\n                    peg$currPos += 7;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$e45);\n                    }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 7) === peg$c26) {\n                      s1 = peg$c26;\n                      peg$currPos += 7;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$e46);\n                      }\n                    }\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 6) === peg$c27) {\n                        s1 = peg$c27;\n                        peg$currPos += 6;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                          peg$fail(peg$e47);\n                        }\n                      }\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 9) === peg$c28) {\n                          s1 = peg$c28;\n                          peg$currPos += 9;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) {\n                            peg$fail(peg$e48);\n                          }\n                        }\n                        if (s1 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 8) === peg$c29) {\n                            s1 = peg$c29;\n                            peg$currPos += 8;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                              peg$fail(peg$e49);\n                            }\n                          }\n                          if (s1 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 8) === peg$c30) {\n                              s1 = peg$c30;\n                              peg$currPos += 8;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) {\n                                peg$fail(peg$e50);\n                              }\n                            }\n                            if (s1 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 7) === peg$c31) {\n                                s1 = peg$c31;\n                                peg$currPos += 7;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                  peg$fail(peg$e51);\n                                }\n                              }\n                              if (s1 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 5) === peg$c32) {\n                                  s1 = peg$c32;\n                                  peg$currPos += 5;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) {\n                                    peg$fail(peg$e52);\n                                  }\n                                }\n                                if (s1 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 4) === peg$c33) {\n                                    s1 = peg$c33;\n                                    peg$currPos += 4;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                      peg$fail(peg$e53);\n                                    }\n                                  }\n                                  if (s1 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 11) === peg$c34) {\n                                      s1 = peg$c34;\n                                      peg$currPos += 11;\n                                    } else {\n                                      s1 = peg$FAILED;\n                                      if (peg$silentFails === 0) {\n                                        peg$fail(peg$e54);\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f57(s1);\n        }\n        s0 = s1;\n        return s0;\n      }\n      function peg$parseescape() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 92) {\n          s1 = peg$c35;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e56);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f58();\n        }\n        s0 = s1;\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e55);\n          }\n        }\n        return s0;\n      }\n      function peg$parsebegin_group() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n          s1 = peg$c36;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e57);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f59(s1);\n        }\n        s0 = s1;\n        return s0;\n      }\n      function peg$parseend_group() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 125) {\n          s1 = peg$c37;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e58);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f60(s1);\n        }\n        s0 = s1;\n        return s0;\n      }\n      function peg$parsemath_shift() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 36) {\n          s1 = peg$c38;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e59);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f61(s1);\n        }\n        s0 = s1;\n        return s0;\n      }\n      function peg$parsealignment_tab() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 38) {\n          s1 = peg$c39;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e60);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f62(s1);\n        }\n        s0 = s1;\n        return s0;\n      }\n      function peg$parsenl() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 13) {\n          s2 = peg$c40;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e62);\n          }\n        }\n        peg$silentFails--;\n        if (s2 === peg$FAILED) {\n          s1 = void 0;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 10) {\n            s2 = peg$c41;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e63);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 13) {\n            s0 = peg$c40;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e62);\n            }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c42) {\n              s0 = peg$c42;\n              peg$currPos += 2;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e64);\n              }\n            }\n          }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e61);\n          }\n        }\n        return s0;\n      }\n      function peg$parsemacro_parameter() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 35) {\n          s1 = peg$c43;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e65);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f63(s1);\n        }\n        s0 = s1;\n        return s0;\n      }\n      function peg$parsesuperscript() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 94) {\n          s1 = peg$c44;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e66);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f64(s1);\n        }\n        s0 = s1;\n        return s0;\n      }\n      function peg$parsesubscript() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 95) {\n          s1 = peg$c45;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e67);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f65(s1);\n        }\n        s0 = s1;\n        return s0;\n      }\n      function peg$parseignore() {\n        var s0;\n        if (input.charCodeAt(peg$currPos) === 0) {\n          s0 = peg$c46;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e68);\n          }\n        }\n        return s0;\n      }\n      function peg$parsesp() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$r1.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e69);\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (peg$r1.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e69);\n              }\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f66();\n        }\n        s0 = s1;\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e8);\n          }\n        }\n        return s0;\n      }\n      function peg$parsechar() {\n        var s0, s1;\n        peg$silentFails++;\n        if (peg$r2.test(input.charAt(peg$currPos))) {\n          s0 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e71);\n          }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e70);\n          }\n        }\n        return s0;\n      }\n      function peg$parsenum() {\n        var s0, s1;\n        peg$silentFails++;\n        if (peg$r3.test(input.charAt(peg$currPos))) {\n          s0 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e73);\n          }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e72);\n          }\n        }\n        return s0;\n      }\n      function peg$parsepunctuation() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (peg$r4.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e75);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f67(s1);\n        }\n        s0 = s1;\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e74);\n          }\n        }\n        return s0;\n      }\n      function peg$parsecomment_start() {\n        var s0;\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c0;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e7);\n          }\n        }\n        return s0;\n      }\n      function peg$parsefull_comment() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$parseownline_comment();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsesameline_comment();\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e76);\n          }\n        }\n        return s0;\n      }\n      function peg$parseownline_comment() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = [];\n        s3 = peg$parsesp();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsesp();\n        }\n        s3 = peg$parsenl();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        s2 = peg$parseleading_sp();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecomment();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f68(s2, s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsesameline_comment() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsesp();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsesp();\n        }\n        s2 = peg$parsecomment();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f69(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsecomment() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parsecomment_start();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          peg$silentFails++;\n          s5 = peg$parsenl();\n          peg$silentFails--;\n          if (s5 === peg$FAILED) {\n            s4 = void 0;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e3);\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s3 = peg$f70(s5);\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = peg$currPos;\n            peg$silentFails++;\n            s5 = peg$parsenl();\n            peg$silentFails--;\n            if (s5 === peg$FAILED) {\n              s4 = void 0;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s5 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e3);\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s3 = peg$f70(s5);\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          }\n          s3 = peg$currPos;\n          peg$silentFails++;\n          s4 = peg$parseparbreak();\n          peg$silentFails--;\n          if (s4 !== peg$FAILED) {\n            peg$currPos = s3;\n            s3 = void 0;\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f71(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsecomment_start();\n          if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$currPos;\n            s4 = peg$currPos;\n            peg$silentFails++;\n            s5 = peg$parsenl();\n            peg$silentFails--;\n            if (s5 === peg$FAILED) {\n              s4 = void 0;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s5 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e3);\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s3 = peg$f72(s5);\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            while (s3 !== peg$FAILED) {\n              s2.push(s3);\n              s3 = peg$currPos;\n              s4 = peg$currPos;\n              peg$silentFails++;\n              s5 = peg$parsenl();\n              peg$silentFails--;\n              if (s5 === peg$FAILED) {\n                s4 = void 0;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n              if (s4 !== peg$FAILED) {\n                if (input.length > peg$currPos) {\n                  s5 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$e3);\n                  }\n                }\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s3;\n                  s3 = peg$f72(s5);\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            }\n            s3 = peg$currPos;\n            s4 = peg$parsenl();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parsesp();\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$parsesp();\n              }\n              s6 = peg$currPos;\n              peg$silentFails++;\n              s7 = peg$parsecomment_start();\n              peg$silentFails--;\n              if (s7 === peg$FAILED) {\n                s6 = void 0;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 === peg$FAILED) {\n              s3 = peg$parsenl();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseEOF();\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f73(s2);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e77);\n          }\n        }\n        return s0;\n      }\n      function peg$parseleading_sp() {\n        var s0, s1, s2, s3, s4;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parsestart_of_line();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parsesp();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsesp();\n          }\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n        return s0;\n      }\n      function peg$parsestart_of_line() {\n        var s0;\n        peg$savedPos = peg$currPos;\n        s0 = peg$f74();\n        if (s0) {\n          s0 = void 0;\n        } else {\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseEOF() {\n        var s0, s1;\n        s0 = peg$currPos;\n        peg$silentFails++;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        peg$silentFails--;\n        if (s1 === peg$FAILED) {\n          s0 = void 0;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function toString(e) {\n        if (typeof e === \"string\") {\n          return e;\n        }\n        if (typeof e.content === \"string\") {\n          return e.content;\n        }\n        if (e && e.type === \"whitespace\") {\n          return \" \";\n        }\n        return e;\n      }\n      function compare_env(g1, g2) {\n        const g1Name = typeof g1 === \"string\" ? g1 : g1.content.map(toString).join(\"\");\n        const g2Name = typeof g2 === \"string\" ? g2 : g2.content.map(toString).join(\"\");\n        return g1Name === g2Name;\n      }\n      function createNode(type, extra = {}) {\n        return { type, ...extra, position: location() };\n      }\n      peg$result = peg$startRuleFunction();\n      if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n      } else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n          peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(\n          peg$maxFailExpected,\n          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n          peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n        );\n      }\n    }\n    return {\n      SyntaxError: peg$SyntaxError,\n      parse: peg$parse\n    };\n  }()\n);\n\n// grammars/align-environment.pegjs\nvar align_environment_default = (\n  // Generated by Peggy 2.0.1.\n  //\n  // https://peggyjs.org/\n  function() {\n    \"use strict\";\n    function peg$subclass(child, parent) {\n      function C() {\n        this.constructor = child;\n      }\n      C.prototype = parent.prototype;\n      child.prototype = new C();\n    }\n    function peg$SyntaxError(message, expected, found, location) {\n      var self = Error.call(this, message);\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n      }\n      self.expected = expected;\n      self.found = found;\n      self.location = location;\n      self.name = \"SyntaxError\";\n      return self;\n    }\n    peg$subclass(peg$SyntaxError, Error);\n    function peg$padEnd(str, targetLength, padString) {\n      padString = padString || \" \";\n      if (str.length > targetLength) {\n        return str;\n      }\n      targetLength -= str.length;\n      padString += padString.repeat(targetLength);\n      return str + padString.slice(0, targetLength);\n    }\n    peg$SyntaxError.prototype.format = function(sources) {\n      var str = \"Error: \" + this.message;\n      if (this.location) {\n        var src = null;\n        var k;\n        for (k = 0; k < sources.length; k++) {\n          if (sources[k].source === this.location.source) {\n            src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n            break;\n          }\n        }\n        var s = this.location.start;\n        var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n        if (src) {\n          var e = this.location.end;\n          var filler = peg$padEnd(\"\", s.line.toString().length, \" \");\n          var line = src[s.line - 1];\n          var last = s.line === e.line ? e.column : line.length + 1;\n          var hatLen = last - s.column || 1;\n          str += \"\\n --> \" + loc + \"\\n\" + filler + \" |\\n\" + s.line + \" | \" + line + \"\\n\" + filler + \" | \" + peg$padEnd(\"\", s.column - 1, \" \") + peg$padEnd(\"\", hatLen, \"^\");\n        } else {\n          str += \"\\n at \" + loc;\n        }\n      }\n      return str;\n    };\n    peg$SyntaxError.buildMessage = function(expected, found) {\n      var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return '\"' + literalEscape(expectation.text) + '\"';\n        },\n        class: function(expectation) {\n          var escapedParts = expectation.parts.map(function(part) {\n            return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n          });\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts.join(\"\") + \"]\";\n        },\n        any: function() {\n          return \"any character\";\n        },\n        end: function() {\n          return \"end of input\";\n        },\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n      function hex(ch) {\n        return ch.charCodeAt(0).toString(16).toUpperCase();\n      }\n      function literalEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"').replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function classEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function describeExpectation(expectation) {\n        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n      }\n      function describeExpected(expected2) {\n        var descriptions = expected2.map(describeExpectation);\n        var i, j;\n        descriptions.sort();\n        if (descriptions.length > 0) {\n          for (i = 1, j = 1; i < descriptions.length; i++) {\n            if (descriptions[i - 1] !== descriptions[i]) {\n              descriptions[j] = descriptions[i];\n              j++;\n            }\n          }\n          descriptions.length = j;\n        }\n        switch (descriptions.length) {\n          case 1:\n            return descriptions[0];\n          case 2:\n            return descriptions[0] + \" or \" + descriptions[1];\n          default:\n            return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n        }\n      }\n      function describeFound(found2) {\n        return found2 ? '\"' + literalEscape(found2) + '\"' : \"end of input\";\n      }\n      return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    function peg$parse(input, options) {\n      options = options !== void 0 ? options : {};\n      var peg$FAILED = {};\n      var peg$source = options.grammarSource;\n      var peg$startRuleFunctions = { body: peg$parsebody };\n      var peg$startRuleFunction = peg$parsebody;\n      var peg$e0 = peg$anyExpectation();\n      var peg$f0 = function() {\n        return [];\n      };\n      var peg$f1 = function(x) {\n        return { cells: [], colSeps: [], ...x };\n      };\n      var peg$f2 = function(rowItems, rowSep, trailingComment) {\n        return { ...rowItems, rowSep, trailingComment };\n      };\n      var peg$f3 = function(rowItems, trailingComment) {\n        return { ...rowItems, rowSep: null, trailingComment };\n      };\n      var peg$f4 = function(x) {\n        return x;\n      };\n      var peg$f5 = function(x) {\n        return {\n          cells: [],\n          colSeps: [],\n          rowSep: null,\n          trailingComment: x\n        };\n      };\n      var peg$f6 = function(x) {\n        return x;\n      };\n      var peg$f7 = function(colSep, cell) {\n        return { colSep, cell };\n      };\n      var peg$f8 = function(colSep) {\n        return { colSep };\n      };\n      var peg$f9 = function(a, b) {\n        return processRow(a, b);\n      };\n      var peg$f10 = function(b) {\n        return processRow(null, b);\n      };\n      var peg$f11 = function(tok) {\n        return options.isSameLineComment(tok);\n      };\n      var peg$f12 = function(tok) {\n        return tok;\n      };\n      var peg$f13 = function(tok) {\n        return options.isOwnLineComment(tok);\n      };\n      var peg$f14 = function(tok) {\n        return tok;\n      };\n      var peg$f15 = function(tok) {\n        return options.isWhitespace(tok);\n      };\n      var peg$f16 = function(tok) {\n        return tok;\n      };\n      var peg$f17 = function(tok) {\n        return options.isRowSep(tok);\n      };\n      var peg$f18 = function(tok) {\n        return tok;\n      };\n      var peg$f19 = function(tok) {\n        return options.isColSep(tok);\n      };\n      var peg$f20 = function(tok) {\n        return tok;\n      };\n      var peg$currPos = 0;\n      var peg$savedPos = 0;\n      var peg$posDetailsCache = [{ line: 1, column: 1 }];\n      var peg$maxFailPos = 0;\n      var peg$maxFailExpected = [];\n      var peg$silentFails = 0;\n      var peg$result;\n      if (\"startRule\" in options) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n          throw new Error(`Can't start parsing from rule \"` + options.startRule + '\".');\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n      }\n      function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n      }\n      function offset() {\n        return peg$savedPos;\n      }\n      function range() {\n        return {\n          source: peg$source,\n          start: peg$savedPos,\n          end: peg$currPos\n        };\n      }\n      function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n      }\n      function expected(description, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError(\n          [peg$otherExpectation(description)],\n          input.substring(peg$savedPos, peg$currPos),\n          location2\n        );\n      }\n      function error(message, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location2);\n      }\n      function peg$literalExpectation(text2, ignoreCase) {\n        return { type: \"literal\", text: text2, ignoreCase };\n      }\n      function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts, inverted, ignoreCase };\n      }\n      function peg$anyExpectation() {\n        return { type: \"any\" };\n      }\n      function peg$endExpectation() {\n        return { type: \"end\" };\n      }\n      function peg$otherExpectation(description) {\n        return { type: \"other\", description };\n      }\n      function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n          return details;\n        } else {\n          p = pos - 1;\n          while (!peg$posDetailsCache[p]) {\n            p--;\n          }\n          details = peg$posDetailsCache[p];\n          details = {\n            line: details.line,\n            column: details.column\n          };\n          while (p < pos) {\n            if (input.charCodeAt(p) === 10) {\n              details.line++;\n              details.column = 1;\n            } else {\n              details.column++;\n            }\n            p++;\n          }\n          peg$posDetailsCache[pos] = details;\n          return details;\n        }\n      }\n      function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n          source: peg$source,\n          start: {\n            offset: startPos,\n            line: startPosDetails.line,\n            column: startPosDetails.column\n          },\n          end: {\n            offset: endPos,\n            line: endPosDetails.line,\n            column: endPosDetails.column\n          }\n        };\n      }\n      function peg$fail(expected2) {\n        if (peg$currPos < peg$maxFailPos) {\n          return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n          peg$maxFailPos = peg$currPos;\n          peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected2);\n      }\n      function peg$buildSimpleError(message, location2) {\n        return new peg$SyntaxError(message, null, null, location2);\n      }\n      function peg$buildStructuredError(expected2, found, location2) {\n        return new peg$SyntaxError(\n          peg$SyntaxError.buildMessage(expected2, found),\n          expected2,\n          found,\n          location2\n        );\n      }\n      function peg$parsebody() {\n        var s0, s1;\n        s0 = [];\n        s1 = peg$parsecomment_only_line();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parserow_with_end();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parserow_without_end();\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          while (s1 !== peg$FAILED) {\n            s0.push(s1);\n            s1 = peg$parsecomment_only_line();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parserow_with_end();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parserow_without_end();\n              }\n            }\n          }\n        } else {\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseEOL();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f0();\n          }\n          s0 = s1;\n        }\n        return s0;\n      }\n      function peg$parserow_with_end() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parserow_items();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        peg$savedPos = s1;\n        s2 = peg$f1(s2);\n        s1 = s2;\n        s2 = peg$parserow_sep();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetrailing_comment();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          peg$savedPos = s0;\n          s0 = peg$f2(s1, s2, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parserow_without_end() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$parserow_items();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsetrailing_comment();\n          if (s2 === peg$FAILED) {\n            s2 = null;\n          }\n          peg$savedPos = s0;\n          s0 = peg$f3(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsetrailing_comment() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsewhitespace();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsewhitespace();\n        }\n        s2 = peg$parsesame_line_comment();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f4(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsecomment_only_line() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsewhitespace();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsewhitespace();\n        }\n        s2 = peg$parseown_line_comment();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f5(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsetoken() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        peg$silentFails++;\n        s2 = peg$parserow_sep();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsecol_sep();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parsetrailing_comment();\n            if (s2 === peg$FAILED) {\n              s2 = peg$parseown_line_comment();\n            }\n          }\n        }\n        peg$silentFails--;\n        if (s2 === peg$FAILED) {\n          s1 = void 0;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e0);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f6(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsecell() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsetoken();\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parsetoken();\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n        return s0;\n      }\n      function peg$parseseparated_cell() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$parsecol_sep();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsecell();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f7(s1, s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsecol_sep();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f8(s1);\n          }\n          s0 = s1;\n        }\n        return s0;\n      }\n      function peg$parserow_items() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$parsecell();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parseseparated_cell();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parseseparated_cell();\n          }\n          peg$savedPos = s0;\n          s0 = peg$f9(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = [];\n          s2 = peg$parseseparated_cell();\n          if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n              s1.push(s2);\n              s2 = peg$parseseparated_cell();\n            }\n          } else {\n            s1 = peg$FAILED;\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f10(s1);\n          }\n          s0 = s1;\n        }\n        return s0;\n      }\n      function peg$parsesame_line_comment() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f11(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f12(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseown_line_comment() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f13(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f14(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsewhitespace() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f15(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f16(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parserow_sep() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f17(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f18(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsecol_sep() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f19(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f20(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseEOL() {\n        var s0, s1;\n        s0 = peg$currPos;\n        peg$silentFails++;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        peg$silentFails--;\n        if (s1 === peg$FAILED) {\n          s0 = void 0;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function processRow(leadCell, otherCells) {\n        const cells = [leadCell || []];\n        const seps = [];\n        for (const x of otherCells) {\n          cells.push(x.cell || []);\n          seps.push(x.colSep);\n        }\n        return { cells, colSeps: seps };\n      }\n      if (!options.isWhitespace) {\n        try {\n          Object.assign(\n            options,\n            createMatchers([\"\\\\\", \"hline\", \"cr\"], [\"&\"])\n          );\n        } catch (e) {\n          console.warn(\"Error when initializing parser\", e);\n        }\n      }\n      peg$result = peg$startRuleFunction();\n      if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n      } else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n          peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(\n          peg$maxFailExpected,\n          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n          peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n        );\n      }\n    }\n    return {\n      SyntaxError: peg$SyntaxError,\n      parse: peg$parse\n    };\n  }()\n);\n\n// grammars/xparse-argspec.pegjs\nvar xparse_argspec_default = (\n  // Generated by Peggy 2.0.1.\n  //\n  // https://peggyjs.org/\n  function() {\n    \"use strict\";\n    function peg$subclass(child, parent) {\n      function C() {\n        this.constructor = child;\n      }\n      C.prototype = parent.prototype;\n      child.prototype = new C();\n    }\n    function peg$SyntaxError(message, expected, found, location) {\n      var self = Error.call(this, message);\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n      }\n      self.expected = expected;\n      self.found = found;\n      self.location = location;\n      self.name = \"SyntaxError\";\n      return self;\n    }\n    peg$subclass(peg$SyntaxError, Error);\n    function peg$padEnd(str, targetLength, padString) {\n      padString = padString || \" \";\n      if (str.length > targetLength) {\n        return str;\n      }\n      targetLength -= str.length;\n      padString += padString.repeat(targetLength);\n      return str + padString.slice(0, targetLength);\n    }\n    peg$SyntaxError.prototype.format = function(sources) {\n      var str = \"Error: \" + this.message;\n      if (this.location) {\n        var src = null;\n        var k;\n        for (k = 0; k < sources.length; k++) {\n          if (sources[k].source === this.location.source) {\n            src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n            break;\n          }\n        }\n        var s = this.location.start;\n        var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n        if (src) {\n          var e = this.location.end;\n          var filler = peg$padEnd(\"\", s.line.toString().length, \" \");\n          var line = src[s.line - 1];\n          var last = s.line === e.line ? e.column : line.length + 1;\n          var hatLen = last - s.column || 1;\n          str += \"\\n --> \" + loc + \"\\n\" + filler + \" |\\n\" + s.line + \" | \" + line + \"\\n\" + filler + \" | \" + peg$padEnd(\"\", s.column - 1, \" \") + peg$padEnd(\"\", hatLen, \"^\");\n        } else {\n          str += \"\\n at \" + loc;\n        }\n      }\n      return str;\n    };\n    peg$SyntaxError.buildMessage = function(expected, found) {\n      var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return '\"' + literalEscape(expectation.text) + '\"';\n        },\n        class: function(expectation) {\n          var escapedParts = expectation.parts.map(function(part) {\n            return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n          });\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts.join(\"\") + \"]\";\n        },\n        any: function() {\n          return \"any character\";\n        },\n        end: function() {\n          return \"end of input\";\n        },\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n      function hex(ch) {\n        return ch.charCodeAt(0).toString(16).toUpperCase();\n      }\n      function literalEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"').replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function classEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function describeExpectation(expectation) {\n        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n      }\n      function describeExpected(expected2) {\n        var descriptions = expected2.map(describeExpectation);\n        var i, j;\n        descriptions.sort();\n        if (descriptions.length > 0) {\n          for (i = 1, j = 1; i < descriptions.length; i++) {\n            if (descriptions[i - 1] !== descriptions[i]) {\n              descriptions[j] = descriptions[i];\n              j++;\n            }\n          }\n          descriptions.length = j;\n        }\n        switch (descriptions.length) {\n          case 1:\n            return descriptions[0];\n          case 2:\n            return descriptions[0] + \" or \" + descriptions[1];\n          default:\n            return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n        }\n      }\n      function describeFound(found2) {\n        return found2 ? '\"' + literalEscape(found2) + '\"' : \"end of input\";\n      }\n      return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    function peg$parse(input, options) {\n      options = options !== void 0 ? options : {};\n      var peg$FAILED = {};\n      var peg$source = options.grammarSource;\n      var peg$startRuleFunctions = { args_spec_list: peg$parseargs_spec_list };\n      var peg$startRuleFunction = peg$parseargs_spec_list;\n      var peg$c0 = \"+\";\n      var peg$c1 = \"v\";\n      var peg$c2 = \"b\";\n      var peg$c3 = \"!\";\n      var peg$c4 = \"D\";\n      var peg$c5 = \"d\";\n      var peg$c6 = \"s\";\n      var peg$c7 = \"O\";\n      var peg$c8 = \"o\";\n      var peg$c9 = \"e\";\n      var peg$c10 = \"E\";\n      var peg$c11 = \"t\";\n      var peg$c12 = \"R\";\n      var peg$c13 = \"r\";\n      var peg$c14 = \"u\";\n      var peg$c15 = \"m\";\n      var peg$c16 = \"{\";\n      var peg$c17 = \"}\";\n      var peg$c18 = \" \";\n      var peg$c19 = \"\\n\";\n      var peg$c20 = \"\\r\";\n      var peg$r0 = /^[{ ]/;\n      var peg$e0 = peg$literalExpectation(\"+\", false);\n      var peg$e1 = peg$literalExpectation(\"v\", false);\n      var peg$e2 = peg$anyExpectation();\n      var peg$e3 = peg$literalExpectation(\"b\", false);\n      var peg$e4 = peg$literalExpectation(\"!\", false);\n      var peg$e5 = peg$literalExpectation(\"D\", false);\n      var peg$e6 = peg$literalExpectation(\"d\", false);\n      var peg$e7 = peg$literalExpectation(\"s\", false);\n      var peg$e8 = peg$literalExpectation(\"O\", false);\n      var peg$e9 = peg$literalExpectation(\"o\", false);\n      var peg$e10 = peg$literalExpectation(\"e\", false);\n      var peg$e11 = peg$literalExpectation(\"E\", false);\n      var peg$e12 = peg$literalExpectation(\"t\", false);\n      var peg$e13 = peg$literalExpectation(\"R\", false);\n      var peg$e14 = peg$literalExpectation(\"r\", false);\n      var peg$e15 = peg$literalExpectation(\"u\", false);\n      var peg$e16 = peg$classExpectation([\"{\", \" \"], false, false);\n      var peg$e17 = peg$literalExpectation(\"m\", false);\n      var peg$e18 = peg$literalExpectation(\"{\", false);\n      var peg$e19 = peg$literalExpectation(\"}\", false);\n      var peg$e20 = peg$literalExpectation(\" \", false);\n      var peg$e21 = peg$literalExpectation(\"\\n\", false);\n      var peg$e22 = peg$literalExpectation(\"\\r\", false);\n      var peg$f0 = function(x) {\n        return x;\n      };\n      var peg$f1 = function(spec) {\n        return spec;\n      };\n      var peg$f2 = function(spec) {\n        return spec;\n      };\n      var peg$f3 = function(openBrace) {\n        return createNode(\"verbatim\", { openBrace, closeBrace: openBrace });\n      };\n      var peg$f4 = function() {\n        return createNode(\"body\");\n      };\n      var peg$f5 = function(leading_bang, spec) {\n        return leading_bang ? { ...spec, noLeadingWhitespace: true } : spec;\n      };\n      var peg$f6 = function(braceSpec, defaultArg) {\n        return createNode(\"optional\", { ...braceSpec, defaultArg });\n      };\n      var peg$f7 = function(braceSpec) {\n        return createNode(\"optional\", braceSpec);\n      };\n      var peg$f8 = function() {\n        return createNode(\"optionalStar\");\n      };\n      var peg$f9 = function(g) {\n        return createNode(\"optional\", { defaultArg: g });\n      };\n      var peg$f10 = function() {\n        return createNode(\"optional\");\n      };\n      var peg$f11 = function(args) {\n        return createNode(\"embellishment\", {\n          embellishmentTokens: args.content\n        });\n      };\n      var peg$f12 = function(args, g) {\n        return createNode(\"embellishment\", {\n          embellishmentTokens: args.content,\n          defaultArg: g\n        });\n      };\n      var peg$f13 = function(tok) {\n        return createNode(\"optionalToken\", { token: tok });\n      };\n      var peg$f14 = function(braceSpec, defaultArg) {\n        return createNode(\"mandatory\", { ...braceSpec, defaultArg });\n      };\n      var peg$f15 = function(braceSpec) {\n        return createNode(\"mandatory\", braceSpec);\n      };\n      var peg$f16 = function(stopTokens) {\n        return createNode(\"until\", { stopTokens });\n      };\n      var peg$f17 = function(x) {\n        return [x];\n      };\n      var peg$f18 = function(g) {\n        return g.content;\n      };\n      var peg$f19 = function() {\n        return createNode(\"mandatory\");\n      };\n      var peg$f20 = function(openBrace, closeBrace) {\n        return { openBrace, closeBrace };\n      };\n      var peg$f21 = function(content) {\n        return { type: \"group\", content };\n      };\n      var peg$f22 = function() {\n        return \"\";\n      };\n      var peg$currPos = 0;\n      var peg$savedPos = 0;\n      var peg$posDetailsCache = [{ line: 1, column: 1 }];\n      var peg$maxFailPos = 0;\n      var peg$maxFailExpected = [];\n      var peg$silentFails = 0;\n      var peg$result;\n      if (\"startRule\" in options) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n          throw new Error(`Can't start parsing from rule \"` + options.startRule + '\".');\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n      }\n      function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n      }\n      function offset() {\n        return peg$savedPos;\n      }\n      function range() {\n        return {\n          source: peg$source,\n          start: peg$savedPos,\n          end: peg$currPos\n        };\n      }\n      function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n      }\n      function expected(description, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError(\n          [peg$otherExpectation(description)],\n          input.substring(peg$savedPos, peg$currPos),\n          location2\n        );\n      }\n      function error(message, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location2);\n      }\n      function peg$literalExpectation(text2, ignoreCase) {\n        return { type: \"literal\", text: text2, ignoreCase };\n      }\n      function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts, inverted, ignoreCase };\n      }\n      function peg$anyExpectation() {\n        return { type: \"any\" };\n      }\n      function peg$endExpectation() {\n        return { type: \"end\" };\n      }\n      function peg$otherExpectation(description) {\n        return { type: \"other\", description };\n      }\n      function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n          return details;\n        } else {\n          p = pos - 1;\n          while (!peg$posDetailsCache[p]) {\n            p--;\n          }\n          details = peg$posDetailsCache[p];\n          details = {\n            line: details.line,\n            column: details.column\n          };\n          while (p < pos) {\n            if (input.charCodeAt(p) === 10) {\n              details.line++;\n              details.column = 1;\n            } else {\n              details.column++;\n            }\n            p++;\n          }\n          peg$posDetailsCache[pos] = details;\n          return details;\n        }\n      }\n      function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n          source: peg$source,\n          start: {\n            offset: startPos,\n            line: startPosDetails.line,\n            column: startPosDetails.column\n          },\n          end: {\n            offset: endPos,\n            line: endPosDetails.line,\n            column: endPosDetails.column\n          }\n        };\n      }\n      function peg$fail(expected2) {\n        if (peg$currPos < peg$maxFailPos) {\n          return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n          peg$maxFailPos = peg$currPos;\n          peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected2);\n      }\n      function peg$buildSimpleError(message, location2) {\n        return new peg$SyntaxError(message, null, null, location2);\n      }\n      function peg$buildStructuredError(expected2, found, location2) {\n        return new peg$SyntaxError(\n          peg$SyntaxError.buildMessage(expected2, found),\n          expected2,\n          found,\n          location2\n        );\n      }\n      function peg$parseargs_spec_list() {\n        var s0, s1, s2, s3, s4;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$currPos;\n        s3 = peg$parsewhitespace();\n        s4 = peg$parsearg_spec();\n        if (s4 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s2 = peg$f0(s4);\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$currPos;\n          s3 = peg$parsewhitespace();\n          s4 = peg$parsearg_spec();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s2;\n            s2 = peg$f0(s4);\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        }\n        s2 = peg$parsewhitespace();\n        peg$savedPos = s0;\n        s0 = peg$f1(s1);\n        return s0;\n      }\n      function peg$parsearg_spec() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s1 = peg$c0;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        s2 = peg$parseoptional();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsemandatory();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parseverbatim();\n            if (s2 === peg$FAILED) {\n              s2 = peg$parserequired();\n              if (s2 === peg$FAILED) {\n                s2 = peg$parsebody();\n                if (s2 === peg$FAILED) {\n                  s2 = peg$parseuntil();\n                }\n              }\n            }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f2(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseverbatim() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 118) {\n          s1 = peg$c1;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e1);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e2);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f3(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsebody() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 98) {\n          s1 = peg$c2;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f4();\n        }\n        s0 = s1;\n        return s0;\n      }\n      function peg$parseoptional() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 33) {\n          s1 = peg$c3;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e4);\n          }\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        s2 = peg$parseoptional_star();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseoptional_standard();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parseoptional_delimited();\n            if (s2 === peg$FAILED) {\n              s2 = peg$parseoptional_embellishment();\n              if (s2 === peg$FAILED) {\n                s2 = peg$parseoptional_token();\n              }\n            }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f5(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseoptional_delimited() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 68) {\n          s1 = peg$c4;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e5);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsebrace_spec();\n          s3 = peg$parsebraced_group();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f6(s2, s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 100) {\n            s1 = peg$c5;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e6);\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsebrace_spec();\n            peg$savedPos = s0;\n            s0 = peg$f7(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n        return s0;\n      }\n      function peg$parseoptional_star() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 115) {\n          s1 = peg$c6;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e7);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f8();\n        }\n        s0 = s1;\n        return s0;\n      }\n      function peg$parseoptional_standard() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 79) {\n          s1 = peg$c7;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e8);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsebraced_group();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f9(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 111) {\n            s1 = peg$c8;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e9);\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f10();\n          }\n          s0 = s1;\n        }\n        return s0;\n      }\n      function peg$parseoptional_embellishment() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 101) {\n          s1 = peg$c9;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e10);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsebraced_group();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f11(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 69) {\n            s1 = peg$c10;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e11);\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsebraced_group();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parsebraced_group();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f12(s2, s3);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n        return s0;\n      }\n      function peg$parseoptional_token() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 116) {\n          s1 = peg$c11;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e12);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e2);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f13(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parserequired() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 82) {\n          s1 = peg$c12;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e13);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsebrace_spec();\n          s3 = peg$parsebraced_group();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f14(s2, s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 114) {\n            s1 = peg$c13;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e14);\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsebrace_spec();\n            peg$savedPos = s0;\n            s0 = peg$f15(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n        return s0;\n      }\n      function peg$parseuntil() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 117) {\n          s1 = peg$c14;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e15);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseuntil_stop_token();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f16(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseuntil_stop_token() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        peg$silentFails++;\n        if (peg$r0.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e16);\n          }\n        }\n        peg$silentFails--;\n        if (s2 === peg$FAILED) {\n          s1 = void 0;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e2);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f17(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsebraced_group();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f18(s1);\n          }\n          s0 = s1;\n        }\n        return s0;\n      }\n      function peg$parsemandatory() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 109) {\n          s1 = peg$c15;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e17);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f19();\n        }\n        s0 = s1;\n        return s0;\n      }\n      function peg$parsebrace_spec() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsewhitespace_token();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = void 0;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e2);\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        s1 = input.substring(s1, peg$currPos);\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parsewhitespace_token();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e2);\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        s2 = input.substring(s2, peg$currPos);\n        peg$savedPos = s0;\n        s0 = peg$f20(s1, s2);\n        return s0;\n      }\n      function peg$parsebraced_group() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n          s1 = peg$c16;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e18);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          s5 = peg$currPos;\n          peg$silentFails++;\n          if (input.charCodeAt(peg$currPos) === 125) {\n            s6 = peg$c17;\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e19);\n            }\n          }\n          peg$silentFails--;\n          if (s6 === peg$FAILED) {\n            s5 = void 0;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            peg$silentFails++;\n            s7 = peg$parsebraced_group();\n            peg$silentFails--;\n            if (s7 === peg$FAILED) {\n              s6 = void 0;\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s7 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e2);\n                }\n              }\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            s3 = input.substring(s3, peg$currPos);\n          } else {\n            s3 = s4;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$parsebraced_group();\n          }\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = peg$currPos;\n            s5 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 125) {\n              s6 = peg$c17;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e19);\n              }\n            }\n            peg$silentFails--;\n            if (s6 === peg$FAILED) {\n              s5 = void 0;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$currPos;\n              peg$silentFails++;\n              s7 = peg$parsebraced_group();\n              peg$silentFails--;\n              if (s7 === peg$FAILED) {\n                s6 = void 0;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.length > peg$currPos) {\n                  s7 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$e2);\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  s5 = [s5, s6, s7];\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n              s3 = input.substring(s3, peg$currPos);\n            } else {\n              s3 = s4;\n            }\n            if (s3 === peg$FAILED) {\n              s3 = peg$parsebraced_group();\n            }\n          }\n          if (input.charCodeAt(peg$currPos) === 125) {\n            s3 = peg$c17;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e19);\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f21(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsewhitespace() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsewhitespace_token();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsewhitespace_token();\n        }\n        peg$savedPos = s0;\n        s1 = peg$f22();\n        s0 = s1;\n        return s0;\n      }\n      function peg$parsewhitespace_token() {\n        var s0;\n        if (input.charCodeAt(peg$currPos) === 32) {\n          s0 = peg$c18;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e20);\n          }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 10) {\n            s0 = peg$c19;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e21);\n            }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 13) {\n              s0 = peg$c20;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e22);\n              }\n            }\n          }\n        }\n        return s0;\n      }\n      const DEFAULT_OPTIONS = {\n        optional: { openBrace: \"[\", closeBrace: \"]\" },\n        mandatory: { openBrace: \"{\", closeBrace: \"}\" }\n      };\n      function createNode(type, options2) {\n        const computedOptions = DEFAULT_OPTIONS[type] || {};\n        return { type, ...computedOptions, ...options2 };\n      }\n      peg$result = peg$startRuleFunction();\n      if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n      } else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n          peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(\n          peg$maxFailExpected,\n          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n          peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n        );\n      }\n    }\n    return {\n      SyntaxError: peg$SyntaxError,\n      parse: peg$parse\n    };\n  }()\n);\n\n// grammars/pgfkeys.pegjs\nvar pgfkeys_default = (\n  // Generated by Peggy 2.0.1.\n  //\n  // https://peggyjs.org/\n  function() {\n    \"use strict\";\n    function peg$subclass(child, parent) {\n      function C() {\n        this.constructor = child;\n      }\n      C.prototype = parent.prototype;\n      child.prototype = new C();\n    }\n    function peg$SyntaxError(message, expected, found, location) {\n      var self = Error.call(this, message);\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n      }\n      self.expected = expected;\n      self.found = found;\n      self.location = location;\n      self.name = \"SyntaxError\";\n      return self;\n    }\n    peg$subclass(peg$SyntaxError, Error);\n    function peg$padEnd(str, targetLength, padString) {\n      padString = padString || \" \";\n      if (str.length > targetLength) {\n        return str;\n      }\n      targetLength -= str.length;\n      padString += padString.repeat(targetLength);\n      return str + padString.slice(0, targetLength);\n    }\n    peg$SyntaxError.prototype.format = function(sources) {\n      var str = \"Error: \" + this.message;\n      if (this.location) {\n        var src = null;\n        var k;\n        for (k = 0; k < sources.length; k++) {\n          if (sources[k].source === this.location.source) {\n            src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n            break;\n          }\n        }\n        var s = this.location.start;\n        var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n        if (src) {\n          var e = this.location.end;\n          var filler = peg$padEnd(\"\", s.line.toString().length, \" \");\n          var line = src[s.line - 1];\n          var last = s.line === e.line ? e.column : line.length + 1;\n          var hatLen = last - s.column || 1;\n          str += \"\\n --> \" + loc + \"\\n\" + filler + \" |\\n\" + s.line + \" | \" + line + \"\\n\" + filler + \" | \" + peg$padEnd(\"\", s.column - 1, \" \") + peg$padEnd(\"\", hatLen, \"^\");\n        } else {\n          str += \"\\n at \" + loc;\n        }\n      }\n      return str;\n    };\n    peg$SyntaxError.buildMessage = function(expected, found) {\n      var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return '\"' + literalEscape(expectation.text) + '\"';\n        },\n        class: function(expectation) {\n          var escapedParts = expectation.parts.map(function(part) {\n            return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n          });\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts.join(\"\") + \"]\";\n        },\n        any: function() {\n          return \"any character\";\n        },\n        end: function() {\n          return \"end of input\";\n        },\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n      function hex(ch) {\n        return ch.charCodeAt(0).toString(16).toUpperCase();\n      }\n      function literalEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"').replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function classEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function describeExpectation(expectation) {\n        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n      }\n      function describeExpected(expected2) {\n        var descriptions = expected2.map(describeExpectation);\n        var i, j;\n        descriptions.sort();\n        if (descriptions.length > 0) {\n          for (i = 1, j = 1; i < descriptions.length; i++) {\n            if (descriptions[i - 1] !== descriptions[i]) {\n              descriptions[j] = descriptions[i];\n              j++;\n            }\n          }\n          descriptions.length = j;\n        }\n        switch (descriptions.length) {\n          case 1:\n            return descriptions[0];\n          case 2:\n            return descriptions[0] + \" or \" + descriptions[1];\n          default:\n            return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n        }\n      }\n      function describeFound(found2) {\n        return found2 ? '\"' + literalEscape(found2) + '\"' : \"end of input\";\n      }\n      return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    function peg$parse(input, options) {\n      options = options !== void 0 ? options : {};\n      var peg$FAILED = {};\n      var peg$source = options.grammarSource;\n      var peg$startRuleFunctions = { body: peg$parsebody };\n      var peg$startRuleFunction = peg$parsebody;\n      var peg$e0 = peg$anyExpectation();\n      var peg$f0 = function() {\n        return [];\n      };\n      var peg$f1 = function(rowItems, trailingComment) {\n        return {\n          itemParts: [],\n          ...rowItems,\n          trailingComment,\n          trailingComma: true\n        };\n      };\n      var peg$f2 = function(rowItems, trailingComment) {\n        return { ...rowItems, trailingComment };\n      };\n      var peg$f3 = function(a, b) {\n        return processItem(a, b);\n      };\n      var peg$f4 = function(b) {\n        return processItem(null, b);\n      };\n      var peg$f5 = function(cell) {\n        return { cell };\n      };\n      var peg$f6 = function() {\n        return {};\n      };\n      var peg$f7 = function(part) {\n        return part;\n      };\n      var peg$f8 = function(x) {\n        return x;\n      };\n      var peg$f9 = function(space, x) {\n        return {\n          trailingComment: x,\n          leadingParbreak: space.parbreak > 0\n        };\n      };\n      var peg$f10 = function(list) {\n        return {\n          whitespace: list.filter((x) => options.isWhitespace(x)).length,\n          parbreak: list.filter((x) => options.isParbreak(x)).length\n        };\n      };\n      var peg$f11 = function() {\n        return !options.allowParenGroups;\n      };\n      var peg$f12 = function(tok) {\n        return options.isSameLineComment(tok);\n      };\n      var peg$f13 = function(tok) {\n        return tok;\n      };\n      var peg$f14 = function(tok) {\n        return options.isOwnLineComment(tok);\n      };\n      var peg$f15 = function(tok) {\n        return tok;\n      };\n      var peg$f16 = function(tok) {\n        return options.isWhitespace(tok);\n      };\n      var peg$f17 = function(tok) {\n        return tok;\n      };\n      var peg$f18 = function(tok) {\n        return options.isParbreak(tok);\n      };\n      var peg$f19 = function(tok) {\n        return tok;\n      };\n      var peg$f20 = function(tok) {\n        return options.isComma(tok);\n      };\n      var peg$f21 = function(tok) {\n        return tok;\n      };\n      var peg$f22 = function(tok) {\n        return options.isEquals(tok);\n      };\n      var peg$f23 = function(tok) {\n        return tok;\n      };\n      var peg$f24 = function(tok) {\n        return options.isChar(tok, \"(\");\n      };\n      var peg$f25 = function(tok) {\n        return tok;\n      };\n      var peg$f26 = function(tok) {\n        return options.isChar(tok, \")\");\n      };\n      var peg$f27 = function(tok) {\n        return tok;\n      };\n      var peg$currPos = 0;\n      var peg$savedPos = 0;\n      var peg$posDetailsCache = [{ line: 1, column: 1 }];\n      var peg$maxFailPos = 0;\n      var peg$maxFailExpected = [];\n      var peg$silentFails = 0;\n      var peg$result;\n      if (\"startRule\" in options) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n          throw new Error(`Can't start parsing from rule \"` + options.startRule + '\".');\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n      }\n      function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n      }\n      function offset() {\n        return peg$savedPos;\n      }\n      function range() {\n        return {\n          source: peg$source,\n          start: peg$savedPos,\n          end: peg$currPos\n        };\n      }\n      function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n      }\n      function expected(description, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError(\n          [peg$otherExpectation(description)],\n          input.substring(peg$savedPos, peg$currPos),\n          location2\n        );\n      }\n      function error(message, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location2);\n      }\n      function peg$literalExpectation(text2, ignoreCase) {\n        return { type: \"literal\", text: text2, ignoreCase };\n      }\n      function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts, inverted, ignoreCase };\n      }\n      function peg$anyExpectation() {\n        return { type: \"any\" };\n      }\n      function peg$endExpectation() {\n        return { type: \"end\" };\n      }\n      function peg$otherExpectation(description) {\n        return { type: \"other\", description };\n      }\n      function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n          return details;\n        } else {\n          p = pos - 1;\n          while (!peg$posDetailsCache[p]) {\n            p--;\n          }\n          details = peg$posDetailsCache[p];\n          details = {\n            line: details.line,\n            column: details.column\n          };\n          while (p < pos) {\n            if (input.charCodeAt(p) === 10) {\n              details.line++;\n              details.column = 1;\n            } else {\n              details.column++;\n            }\n            p++;\n          }\n          peg$posDetailsCache[pos] = details;\n          return details;\n        }\n      }\n      function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n          source: peg$source,\n          start: {\n            offset: startPos,\n            line: startPosDetails.line,\n            column: startPosDetails.column\n          },\n          end: {\n            offset: endPos,\n            line: endPosDetails.line,\n            column: endPosDetails.column\n          }\n        };\n      }\n      function peg$fail(expected2) {\n        if (peg$currPos < peg$maxFailPos) {\n          return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n          peg$maxFailPos = peg$currPos;\n          peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected2);\n      }\n      function peg$buildSimpleError(message, location2) {\n        return new peg$SyntaxError(message, null, null, location2);\n      }\n      function peg$buildStructuredError(expected2, found, location2) {\n        return new peg$SyntaxError(\n          peg$SyntaxError.buildMessage(expected2, found),\n          expected2,\n          found,\n          location2\n        );\n      }\n      function peg$parsebody() {\n        var s0, s1, s2;\n        s0 = [];\n        s1 = peg$parsecomment_only_line();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseitem_with_end();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseitem_without_end();\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          while (s1 !== peg$FAILED) {\n            s0.push(s1);\n            s1 = peg$parsecomment_only_line();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseitem_with_end();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseitem_without_end();\n              }\n            }\n          }\n        } else {\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = [];\n          s2 = peg$parsewhitespace();\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parsewhitespace();\n          }\n          s2 = peg$parseEOL();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f0();\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n        return s0;\n      }\n      function peg$parseitem_with_end() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n        s0 = peg$currPos;\n        s1 = peg$parsewhitespace_or_parbreaks();\n        s2 = peg$parserow_items();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        s3 = peg$parsewhitespace_or_parbreaks();\n        s4 = peg$parseitem_sep();\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsewhitespace();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsewhitespace();\n          }\n          s6 = peg$parsetrailing_comment();\n          if (s6 === peg$FAILED) {\n            s6 = null;\n          }\n          s7 = [];\n          s8 = peg$parsewhitespace();\n          while (s8 !== peg$FAILED) {\n            s7.push(s8);\n            s8 = peg$parsewhitespace();\n          }\n          peg$savedPos = s0;\n          s0 = peg$f1(s2, s6);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseitem_without_end() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$parsewhitespace_or_parbreaks();\n        s2 = peg$parserow_items();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetrailing_comment();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          peg$savedPos = s0;\n          s0 = peg$f2(s2, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parserow_items() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$parseitem_part();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parseseparated_part();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parseseparated_part();\n          }\n          peg$savedPos = s0;\n          s0 = peg$f3(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = [];\n          s2 = peg$parseseparated_part();\n          if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n              s1.push(s2);\n              s2 = peg$parseseparated_part();\n            }\n          } else {\n            s1 = peg$FAILED;\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f4(s1);\n          }\n          s0 = s1;\n        }\n        return s0;\n      }\n      function peg$parseseparated_part() {\n        var s0, s1, s2, s3, s4;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseparbreak();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parseparbreak();\n        }\n        s2 = peg$parseequals();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseparbreak();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parseparbreak();\n          }\n          s4 = peg$parseitem_part();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f5(s4);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = [];\n          s2 = peg$parseparbreak();\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parseparbreak();\n          }\n          s2 = peg$parseequals();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f6();\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n        return s0;\n      }\n      function peg$parseitem_part() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsewhitespace();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsewhitespace();\n        }\n        s2 = peg$currPos;\n        s3 = [];\n        s4 = peg$parsenon_whitespace_non_parbreak_token();\n        if (s4 === peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parsewhitespace();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseparbreak();\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            peg$silentFails++;\n            s7 = peg$currPos;\n            s8 = [];\n            s9 = peg$parsewhitespace();\n            if (s9 === peg$FAILED) {\n              s9 = peg$parseparbreak();\n            }\n            while (s9 !== peg$FAILED) {\n              s8.push(s9);\n              s9 = peg$parsewhitespace();\n              if (s9 === peg$FAILED) {\n                s9 = peg$parseparbreak();\n              }\n            }\n            s9 = peg$parsenon_whitespace_non_parbreak_token();\n            if (s9 !== peg$FAILED) {\n              s8 = [s8, s9];\n              s7 = s8;\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n            peg$silentFails--;\n            if (s7 !== peg$FAILED) {\n              peg$currPos = s6;\n              s6 = void 0;\n            } else {\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsenon_whitespace_non_parbreak_token();\n            if (s4 === peg$FAILED) {\n              s4 = peg$currPos;\n              s5 = peg$parsewhitespace();\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseparbreak();\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$currPos;\n                peg$silentFails++;\n                s7 = peg$currPos;\n                s8 = [];\n                s9 = peg$parsewhitespace();\n                if (s9 === peg$FAILED) {\n                  s9 = peg$parseparbreak();\n                }\n                while (s9 !== peg$FAILED) {\n                  s8.push(s9);\n                  s9 = peg$parsewhitespace();\n                  if (s9 === peg$FAILED) {\n                    s9 = peg$parseparbreak();\n                  }\n                }\n                s9 = peg$parsenon_whitespace_non_parbreak_token();\n                if (s9 !== peg$FAILED) {\n                  s8 = [s8, s9];\n                  s7 = s8;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                peg$silentFails--;\n                if (s7 !== peg$FAILED) {\n                  peg$currPos = s6;\n                  s6 = void 0;\n                } else {\n                  s6 = peg$FAILED;\n                }\n                if (s6 !== peg$FAILED) {\n                  s5 = [s5, s6];\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            }\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = input.substring(s2, peg$currPos);\n        } else {\n          s2 = s3;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parsewhitespace();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsewhitespace();\n          }\n          peg$savedPos = s0;\n          s0 = peg$f7(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsetrailing_comment() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsewhitespace();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsewhitespace();\n        }\n        s2 = peg$parsesame_line_comment();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f8(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsecomment_only_line() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$parsewhitespace_or_parbreaks();\n        s2 = peg$parseown_line_comment();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f9(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsetoken() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$currPos;\n        peg$silentFails++;\n        s3 = peg$parsenon_token();\n        peg$silentFails--;\n        if (s3 === peg$FAILED) {\n          s2 = void 0;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e0);\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n        return s0;\n      }\n      function peg$parsenon_whitespace_non_parbreak_token() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$currPos;\n        peg$silentFails++;\n        s3 = peg$parsewhitespace();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseparbreak();\n        }\n        peg$silentFails--;\n        if (s3 === peg$FAILED) {\n          s2 = void 0;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseparen_block();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parsetoken();\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n        return s0;\n      }\n      function peg$parsenon_token() {\n        var s0;\n        s0 = peg$parseitem_sep();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseequals();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsetrailing_comment();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseown_line_comment();\n            }\n          }\n        }\n        return s0;\n      }\n      function peg$parsewhitespace_or_parbreaks() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsewhitespace();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseparbreak();\n        }\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsewhitespace();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parseparbreak();\n          }\n        }\n        peg$savedPos = s0;\n        s1 = peg$f10(s1);\n        s0 = s1;\n        return s0;\n      }\n      function peg$parseparen_block() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n        s0 = peg$currPos;\n        peg$savedPos = peg$currPos;\n        s1 = peg$f11();\n        if (s1) {\n          s1 = peg$FAILED;\n        } else {\n          s1 = void 0;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$currPos;\n          s4 = peg$parseopen_paren();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$currPos;\n            s7 = peg$currPos;\n            peg$silentFails++;\n            s8 = peg$parseclose_paren();\n            peg$silentFails--;\n            if (s8 === peg$FAILED) {\n              s7 = void 0;\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n            if (s7 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s8 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e0);\n                }\n              }\n              if (s8 !== peg$FAILED) {\n                s7 = [s7, s8];\n                s6 = s7;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$currPos;\n              s7 = peg$currPos;\n              peg$silentFails++;\n              s8 = peg$parseclose_paren();\n              peg$silentFails--;\n              if (s8 === peg$FAILED) {\n                s7 = void 0;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              if (s7 !== peg$FAILED) {\n                if (input.length > peg$currPos) {\n                  s8 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$e0);\n                  }\n                }\n                if (s8 !== peg$FAILED) {\n                  s7 = [s7, s8];\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            }\n            s6 = peg$parseclose_paren();\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = input.substring(s2, peg$currPos);\n          } else {\n            s2 = s3;\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsesame_line_comment() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f12(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f13(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseown_line_comment() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f14(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f15(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsewhitespace() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f16(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f17(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseparbreak() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f18(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f19(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseitem_sep() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f20(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f21(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseequals() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f22(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f23(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseopen_paren() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f24(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f25(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseclose_paren() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f26(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f27(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseEOL() {\n        var s0, s1;\n        s0 = peg$currPos;\n        peg$silentFails++;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        peg$silentFails--;\n        if (s1 === peg$FAILED) {\n          s0 = void 0;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function processItem(leadCell, otherCells) {\n        const cells = [leadCell || []];\n        for (const x of otherCells) {\n          cells.push(x.cell || []);\n        }\n        return { itemParts: cells };\n      }\n      if (!options.isWhitespace) {\n        try {\n          Object.assign(options, {\n            isChar: (node, char) => node.type === \"string\" && node.content === char,\n            isComma(node) {\n              return node.type === \"string\" && node.content === \",\";\n            },\n            isEquals(node) {\n              return node.type === \"string\" && node.content === \"=\";\n            },\n            isParbreak(node) {\n              return node.type === \"parbreak\";\n            },\n            isWhitespace(node) {\n              return node.type === \"whitespace\";\n            },\n            isSameLineComment: (node) => node.type === \"comment\" && node.sameline,\n            isOwnLineComment: (node) => node.type === \"comment\" && !node.sameline,\n            isComment: (node) => node.type === \"comment\",\n            allowParenGroups: true\n          });\n        } catch (e) {\n          console.warn(\"Error when initializing parser\", e);\n        }\n      }\n      peg$result = peg$startRuleFunction();\n      if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n      } else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n          peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(\n          peg$maxFailExpected,\n          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n          peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n        );\n      }\n    }\n    return {\n      SyntaxError: peg$SyntaxError,\n      parse: peg$parse\n    };\n  }()\n);\n\n// grammars/macro-substitutions.pegjs\nvar macro_substitutions_default = (\n  // Generated by Peggy 2.0.1.\n  //\n  // https://peggyjs.org/\n  function() {\n    \"use strict\";\n    function peg$subclass(child, parent) {\n      function C() {\n        this.constructor = child;\n      }\n      C.prototype = parent.prototype;\n      child.prototype = new C();\n    }\n    function peg$SyntaxError(message, expected, found, location) {\n      var self = Error.call(this, message);\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n      }\n      self.expected = expected;\n      self.found = found;\n      self.location = location;\n      self.name = \"SyntaxError\";\n      return self;\n    }\n    peg$subclass(peg$SyntaxError, Error);\n    function peg$padEnd(str, targetLength, padString) {\n      padString = padString || \" \";\n      if (str.length > targetLength) {\n        return str;\n      }\n      targetLength -= str.length;\n      padString += padString.repeat(targetLength);\n      return str + padString.slice(0, targetLength);\n    }\n    peg$SyntaxError.prototype.format = function(sources) {\n      var str = \"Error: \" + this.message;\n      if (this.location) {\n        var src = null;\n        var k;\n        for (k = 0; k < sources.length; k++) {\n          if (sources[k].source === this.location.source) {\n            src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n            break;\n          }\n        }\n        var s = this.location.start;\n        var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n        if (src) {\n          var e = this.location.end;\n          var filler = peg$padEnd(\"\", s.line.toString().length, \" \");\n          var line = src[s.line - 1];\n          var last = s.line === e.line ? e.column : line.length + 1;\n          var hatLen = last - s.column || 1;\n          str += \"\\n --> \" + loc + \"\\n\" + filler + \" |\\n\" + s.line + \" | \" + line + \"\\n\" + filler + \" | \" + peg$padEnd(\"\", s.column - 1, \" \") + peg$padEnd(\"\", hatLen, \"^\");\n        } else {\n          str += \"\\n at \" + loc;\n        }\n      }\n      return str;\n    };\n    peg$SyntaxError.buildMessage = function(expected, found) {\n      var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return '\"' + literalEscape(expectation.text) + '\"';\n        },\n        class: function(expectation) {\n          var escapedParts = expectation.parts.map(function(part) {\n            return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n          });\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts.join(\"\") + \"]\";\n        },\n        any: function() {\n          return \"any character\";\n        },\n        end: function() {\n          return \"end of input\";\n        },\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n      function hex(ch) {\n        return ch.charCodeAt(0).toString(16).toUpperCase();\n      }\n      function literalEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"').replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function classEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function describeExpectation(expectation) {\n        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n      }\n      function describeExpected(expected2) {\n        var descriptions = expected2.map(describeExpectation);\n        var i, j;\n        descriptions.sort();\n        if (descriptions.length > 0) {\n          for (i = 1, j = 1; i < descriptions.length; i++) {\n            if (descriptions[i - 1] !== descriptions[i]) {\n              descriptions[j] = descriptions[i];\n              j++;\n            }\n          }\n          descriptions.length = j;\n        }\n        switch (descriptions.length) {\n          case 1:\n            return descriptions[0];\n          case 2:\n            return descriptions[0] + \" or \" + descriptions[1];\n          default:\n            return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n        }\n      }\n      function describeFound(found2) {\n        return found2 ? '\"' + literalEscape(found2) + '\"' : \"end of input\";\n      }\n      return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    function peg$parse(input, options) {\n      options = options !== void 0 ? options : {};\n      var peg$FAILED = {};\n      var peg$source = options.grammarSource;\n      var peg$startRuleFunctions = { body: peg$parsebody };\n      var peg$startRuleFunction = peg$parsebody;\n      var peg$e0 = peg$anyExpectation();\n      var peg$f0 = function(e) {\n        return [].concat(...e).filter((n) => !!n);\n      };\n      var peg$f1 = function() {\n        return [];\n      };\n      var peg$f2 = function(tok) {\n        return options.isHash(tok);\n      };\n      var peg$f3 = function(tok) {\n        return tok;\n      };\n      var peg$f4 = function(tok) {\n        return options.isNumber(tok);\n      };\n      var peg$f5 = function(tok) {\n        return tok;\n      };\n      var peg$f6 = function() {\n        return { type: \"string\", content: \"#\" };\n      };\n      var peg$f7 = function(num) {\n        const split = options.splitNumber(num);\n        return [{ type: \"hash_number\", number: split.number }, split.rest];\n      };\n      var peg$currPos = 0;\n      var peg$savedPos = 0;\n      var peg$posDetailsCache = [{ line: 1, column: 1 }];\n      var peg$maxFailPos = 0;\n      var peg$maxFailExpected = [];\n      var peg$silentFails = 0;\n      var peg$result;\n      if (\"startRule\" in options) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n          throw new Error(`Can't start parsing from rule \"` + options.startRule + '\".');\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n      }\n      function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n      }\n      function offset() {\n        return peg$savedPos;\n      }\n      function range() {\n        return {\n          source: peg$source,\n          start: peg$savedPos,\n          end: peg$currPos\n        };\n      }\n      function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n      }\n      function expected(description, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError(\n          [peg$otherExpectation(description)],\n          input.substring(peg$savedPos, peg$currPos),\n          location2\n        );\n      }\n      function error(message, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location2);\n      }\n      function peg$literalExpectation(text2, ignoreCase) {\n        return { type: \"literal\", text: text2, ignoreCase };\n      }\n      function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts, inverted, ignoreCase };\n      }\n      function peg$anyExpectation() {\n        return { type: \"any\" };\n      }\n      function peg$endExpectation() {\n        return { type: \"end\" };\n      }\n      function peg$otherExpectation(description) {\n        return { type: \"other\", description };\n      }\n      function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n          return details;\n        } else {\n          p = pos - 1;\n          while (!peg$posDetailsCache[p]) {\n            p--;\n          }\n          details = peg$posDetailsCache[p];\n          details = {\n            line: details.line,\n            column: details.column\n          };\n          while (p < pos) {\n            if (input.charCodeAt(p) === 10) {\n              details.line++;\n              details.column = 1;\n            } else {\n              details.column++;\n            }\n            p++;\n          }\n          peg$posDetailsCache[pos] = details;\n          return details;\n        }\n      }\n      function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n          source: peg$source,\n          start: {\n            offset: startPos,\n            line: startPosDetails.line,\n            column: startPosDetails.column\n          },\n          end: {\n            offset: endPos,\n            line: endPosDetails.line,\n            column: endPosDetails.column\n          }\n        };\n      }\n      function peg$fail(expected2) {\n        if (peg$currPos < peg$maxFailPos) {\n          return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n          peg$maxFailPos = peg$currPos;\n          peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected2);\n      }\n      function peg$buildSimpleError(message, location2) {\n        return new peg$SyntaxError(message, null, null, location2);\n      }\n      function peg$buildStructuredError(expected2, found, location2) {\n        return new peg$SyntaxError(\n          peg$SyntaxError.buildMessage(expected2, found),\n          expected2,\n          found,\n          location2\n        );\n      }\n      function peg$parsebody() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsedouble_hash();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsehash_number();\n          if (s2 === peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e0);\n              }\n            }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parsedouble_hash();\n            if (s2 === peg$FAILED) {\n              s2 = peg$parsehash_number();\n              if (s2 === peg$FAILED) {\n                if (input.length > peg$currPos) {\n                  s2 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s2 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$e0);\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f0(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseEOL();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f1();\n          }\n          s0 = s1;\n        }\n        return s0;\n      }\n      function peg$parsehash() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f2(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f3(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsenumber() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f4(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f5(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsedouble_hash() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$parsehash();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsehash();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f6();\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsehash_number() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$parsehash();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsenumber();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f7(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseEOL() {\n        var s0, s1;\n        s0 = peg$currPos;\n        peg$silentFails++;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        peg$silentFails--;\n        if (s1 === peg$FAILED) {\n          s0 = void 0;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      if (!options.isHash) {\n        try {\n          Object.assign(options, {\n            isHash: (node) => node.type === \"string\" && node.content === \"#\",\n            isNumber: (node) => node.type === \"string\" && 0 < +node.content.charAt(0),\n            splitNumber: (node) => {\n              const number = +node.content.charAt(0);\n              if (node.content.length > 1) {\n                return {\n                  number,\n                  rest: {\n                    type: \"string\",\n                    content: node.content.slice(1)\n                  }\n                };\n              }\n              return { number };\n            }\n          });\n        } catch (e) {\n          console.warn(\"Error when initializing parser\", e);\n        }\n      }\n      peg$result = peg$startRuleFunction();\n      if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n      } else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n          peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(\n          peg$maxFailExpected,\n          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n          peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n        );\n      }\n    }\n    return {\n      SyntaxError: peg$SyntaxError,\n      parse: peg$parse\n    };\n  }()\n);\n\n// grammars/ligatures.pegjs\nvar ligatures_default = (\n  // Generated by Peggy 2.0.1.\n  //\n  // https://peggyjs.org/\n  function() {\n    \"use strict\";\n    function peg$subclass(child, parent) {\n      function C() {\n        this.constructor = child;\n      }\n      C.prototype = parent.prototype;\n      child.prototype = new C();\n    }\n    function peg$SyntaxError(message, expected, found, location) {\n      var self = Error.call(this, message);\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n      }\n      self.expected = expected;\n      self.found = found;\n      self.location = location;\n      self.name = \"SyntaxError\";\n      return self;\n    }\n    peg$subclass(peg$SyntaxError, Error);\n    function peg$padEnd(str, targetLength, padString) {\n      padString = padString || \" \";\n      if (str.length > targetLength) {\n        return str;\n      }\n      targetLength -= str.length;\n      padString += padString.repeat(targetLength);\n      return str + padString.slice(0, targetLength);\n    }\n    peg$SyntaxError.prototype.format = function(sources) {\n      var str = \"Error: \" + this.message;\n      if (this.location) {\n        var src = null;\n        var k;\n        for (k = 0; k < sources.length; k++) {\n          if (sources[k].source === this.location.source) {\n            src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n            break;\n          }\n        }\n        var s = this.location.start;\n        var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n        if (src) {\n          var e = this.location.end;\n          var filler = peg$padEnd(\"\", s.line.toString().length, \" \");\n          var line = src[s.line - 1];\n          var last = s.line === e.line ? e.column : line.length + 1;\n          var hatLen = last - s.column || 1;\n          str += \"\\n --> \" + loc + \"\\n\" + filler + \" |\\n\" + s.line + \" | \" + line + \"\\n\" + filler + \" | \" + peg$padEnd(\"\", s.column - 1, \" \") + peg$padEnd(\"\", hatLen, \"^\");\n        } else {\n          str += \"\\n at \" + loc;\n        }\n      }\n      return str;\n    };\n    peg$SyntaxError.buildMessage = function(expected, found) {\n      var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return '\"' + literalEscape(expectation.text) + '\"';\n        },\n        class: function(expectation) {\n          var escapedParts = expectation.parts.map(function(part) {\n            return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n          });\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts.join(\"\") + \"]\";\n        },\n        any: function() {\n          return \"any character\";\n        },\n        end: function() {\n          return \"end of input\";\n        },\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n      function hex(ch) {\n        return ch.charCodeAt(0).toString(16).toUpperCase();\n      }\n      function literalEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"').replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function classEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function describeExpectation(expectation) {\n        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n      }\n      function describeExpected(expected2) {\n        var descriptions = expected2.map(describeExpectation);\n        var i, j;\n        descriptions.sort();\n        if (descriptions.length > 0) {\n          for (i = 1, j = 1; i < descriptions.length; i++) {\n            if (descriptions[i - 1] !== descriptions[i]) {\n              descriptions[j] = descriptions[i];\n              j++;\n            }\n          }\n          descriptions.length = j;\n        }\n        switch (descriptions.length) {\n          case 1:\n            return descriptions[0];\n          case 2:\n            return descriptions[0] + \" or \" + descriptions[1];\n          default:\n            return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n        }\n      }\n      function describeFound(found2) {\n        return found2 ? '\"' + literalEscape(found2) + '\"' : \"end of input\";\n      }\n      return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    function peg$parse(input, options) {\n      options = options !== void 0 ? options : {};\n      var peg$FAILED = {};\n      var peg$source = options.grammarSource;\n      var peg$startRuleFunctions = { body: peg$parsebody };\n      var peg$startRuleFunction = peg$parsebody;\n      var peg$e0 = peg$anyExpectation();\n      var peg$f0 = function(e) {\n        return [].concat(...e).filter((n) => !!n);\n      };\n      var peg$f1 = function() {\n        return [];\n      };\n      var peg$f2 = function(toks) {\n        return options.isRecognized(toks);\n      };\n      var peg$f3 = function(toks) {\n        return options.isRecognized(toks);\n      };\n      var peg$f4 = function(tok1, tok2) {\n        const split = options.split(tok2);\n        return options.isRecognized([tok1, split[0]]);\n      };\n      var peg$f5 = function(tok1, tok2) {\n        const split = options.split(tok2);\n        return [options.isRecognized([tok1, split[0]]), split[1]];\n      };\n      var peg$f6 = function(tok1, tok2) {\n        return options.isRecognized([tok1, tok2]);\n      };\n      var peg$f7 = function(tok1, tok2) {\n        return options.isRecognized([tok1, tok2]);\n      };\n      var peg$f8 = function(toks) {\n        return options.isRecognized(toks);\n      };\n      var peg$f9 = function(toks) {\n        return options.isRecognized(toks);\n      };\n      var peg$f10 = function(tok) {\n        return options.isRecognized([tok]);\n      };\n      var peg$f11 = function(tok) {\n        return options.isRecognized([tok]);\n      };\n      var peg$f12 = function(tok) {\n        return options.isMacro(tok);\n      };\n      var peg$f13 = function(tok) {\n        return tok;\n      };\n      var peg$f14 = function(tok) {\n        return options.isWhitespace(tok);\n      };\n      var peg$f15 = function(tok) {\n        return tok;\n      };\n      var peg$f16 = function(tok) {\n        return options.isSplitable(tok);\n      };\n      var peg$f17 = function(tok) {\n        return tok;\n      };\n      var peg$currPos = 0;\n      var peg$savedPos = 0;\n      var peg$posDetailsCache = [{ line: 1, column: 1 }];\n      var peg$maxFailPos = 0;\n      var peg$maxFailExpected = [];\n      var peg$silentFails = 0;\n      var peg$result;\n      if (\"startRule\" in options) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n          throw new Error(`Can't start parsing from rule \"` + options.startRule + '\".');\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n      }\n      function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n      }\n      function offset() {\n        return peg$savedPos;\n      }\n      function range() {\n        return {\n          source: peg$source,\n          start: peg$savedPos,\n          end: peg$currPos\n        };\n      }\n      function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n      }\n      function expected(description, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError(\n          [peg$otherExpectation(description)],\n          input.substring(peg$savedPos, peg$currPos),\n          location2\n        );\n      }\n      function error(message, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location2);\n      }\n      function peg$literalExpectation(text2, ignoreCase) {\n        return { type: \"literal\", text: text2, ignoreCase };\n      }\n      function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts, inverted, ignoreCase };\n      }\n      function peg$anyExpectation() {\n        return { type: \"any\" };\n      }\n      function peg$endExpectation() {\n        return { type: \"end\" };\n      }\n      function peg$otherExpectation(description) {\n        return { type: \"other\", description };\n      }\n      function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n          return details;\n        } else {\n          p = pos - 1;\n          while (!peg$posDetailsCache[p]) {\n            p--;\n          }\n          details = peg$posDetailsCache[p];\n          details = {\n            line: details.line,\n            column: details.column\n          };\n          while (p < pos) {\n            if (input.charCodeAt(p) === 10) {\n              details.line++;\n              details.column = 1;\n            } else {\n              details.column++;\n            }\n            p++;\n          }\n          peg$posDetailsCache[pos] = details;\n          return details;\n        }\n      }\n      function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n          source: peg$source,\n          start: {\n            offset: startPos,\n            line: startPosDetails.line,\n            column: startPosDetails.column\n          },\n          end: {\n            offset: endPos,\n            line: endPosDetails.line,\n            column: endPosDetails.column\n          }\n        };\n      }\n      function peg$fail(expected2) {\n        if (peg$currPos < peg$maxFailPos) {\n          return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n          peg$maxFailPos = peg$currPos;\n          peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected2);\n      }\n      function peg$buildSimpleError(message, location2) {\n        return new peg$SyntaxError(message, null, null, location2);\n      }\n      function peg$buildStructuredError(expected2, found, location2) {\n        return new peg$SyntaxError(\n          peg$SyntaxError.buildMessage(expected2, found),\n          expected2,\n          found,\n          location2\n        );\n      }\n      function peg$parsebody() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsetriple_ligature();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsedouble_ligature();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parsemono_ligature();\n            if (s2 === peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s2 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e0);\n                }\n              }\n            }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parsetriple_ligature();\n            if (s2 === peg$FAILED) {\n              s2 = peg$parsedouble_ligature();\n              if (s2 === peg$FAILED) {\n                s2 = peg$parsemono_ligature();\n                if (s2 === peg$FAILED) {\n                  if (input.length > peg$currPos) {\n                    s2 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$e0);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f0(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseEOL();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f1();\n          }\n          s0 = s1;\n        }\n        return s0;\n      }\n      function peg$parsetriple_ligature() {\n        var s0, s1, s2, s3, s4;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e0);\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e0);\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s2 = [s2, s3, s4];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f2(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f3(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsedouble_ligature() {\n        var s0;\n        s0 = peg$parsedouble_macro_ligature();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsedouble_macro_ligature_extracted();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedouble_char_ligature();\n          }\n        }\n        return s0;\n      }\n      function peg$parsedouble_macro_ligature_extracted() {\n        var s0, s1, s2, s3, s4;\n        s0 = peg$currPos;\n        s1 = peg$parsemacro();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parsewhitespace();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parsewhitespace();\n          }\n          s3 = peg$parsesplitable();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s4 = peg$f4(s1, s3);\n            if (s4) {\n              s4 = void 0;\n            } else {\n              s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f5(s1, s3);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsedouble_macro_ligature() {\n        var s0, s1, s2, s3, s4;\n        s0 = peg$currPos;\n        s1 = peg$parsemacro();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parsewhitespace();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parsewhitespace();\n          }\n          if (input.length > peg$currPos) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e0);\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s4 = peg$f6(s1, s3);\n            if (s4) {\n              s4 = void 0;\n            } else {\n              s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f7(s1, s3);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsedouble_char_ligature() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e0);\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f8(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f9(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsemono_ligature() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f10(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f11(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsemacro() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f12(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f13(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsewhitespace() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f14(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f15(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsesplitable() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f16(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f17(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseEOL() {\n        var s0, s1;\n        s0 = peg$currPos;\n        peg$silentFails++;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        peg$silentFails--;\n        if (s1 === peg$FAILED) {\n          s0 = void 0;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      if (!options.isWhitespace) {\n        try {\n          Object.assign(options, {\n            isMacro: (node) => node.type === \"macro\",\n            isWhitespace: (node) => node.type === \"whitespace\",\n            isRecognized: (nodes) => {\n              if (nodes.length == 2 && nodes[0].content === \"^\" && nodes[1].content === \"o\") {\n                return { type: \"string\", content: \"\\xF4\" };\n              }\n              return null;\n            },\n            isSplitable: (node) => node.type === \"string\" && node.content.length > 1,\n            split: (node) => [\n              { type: \"string\", content: node.content.charAt(0) },\n              { type: \"string\", content: node.content.slice(1) }\n            ]\n          });\n        } catch (e) {\n          console.warn(\"Error when initializing parser\", e);\n        }\n      }\n      peg$result = peg$startRuleFunction();\n      if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n      } else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n          peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(\n          peg$maxFailExpected,\n          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n          peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n        );\n      }\n    }\n    return {\n      SyntaxError: peg$SyntaxError,\n      parse: peg$parse\n    };\n  }()\n);\n\n// grammars/xcolor-expressions.pegjs\nvar xcolor_expressions_default = (\n  // Generated by Peggy 2.0.1.\n  //\n  // https://peggyjs.org/\n  function() {\n    \"use strict\";\n    function peg$subclass(child, parent) {\n      function C() {\n        this.constructor = child;\n      }\n      C.prototype = parent.prototype;\n      child.prototype = new C();\n    }\n    function peg$SyntaxError(message, expected, found, location) {\n      var self = Error.call(this, message);\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n      }\n      self.expected = expected;\n      self.found = found;\n      self.location = location;\n      self.name = \"SyntaxError\";\n      return self;\n    }\n    peg$subclass(peg$SyntaxError, Error);\n    function peg$padEnd(str, targetLength, padString) {\n      padString = padString || \" \";\n      if (str.length > targetLength) {\n        return str;\n      }\n      targetLength -= str.length;\n      padString += padString.repeat(targetLength);\n      return str + padString.slice(0, targetLength);\n    }\n    peg$SyntaxError.prototype.format = function(sources) {\n      var str = \"Error: \" + this.message;\n      if (this.location) {\n        var src = null;\n        var k;\n        for (k = 0; k < sources.length; k++) {\n          if (sources[k].source === this.location.source) {\n            src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n            break;\n          }\n        }\n        var s = this.location.start;\n        var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n        if (src) {\n          var e = this.location.end;\n          var filler = peg$padEnd(\"\", s.line.toString().length, \" \");\n          var line = src[s.line - 1];\n          var last = s.line === e.line ? e.column : line.length + 1;\n          var hatLen = last - s.column || 1;\n          str += \"\\n --> \" + loc + \"\\n\" + filler + \" |\\n\" + s.line + \" | \" + line + \"\\n\" + filler + \" | \" + peg$padEnd(\"\", s.column - 1, \" \") + peg$padEnd(\"\", hatLen, \"^\");\n        } else {\n          str += \"\\n at \" + loc;\n        }\n      }\n      return str;\n    };\n    peg$SyntaxError.buildMessage = function(expected, found) {\n      var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return '\"' + literalEscape(expectation.text) + '\"';\n        },\n        class: function(expectation) {\n          var escapedParts = expectation.parts.map(function(part) {\n            return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n          });\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts.join(\"\") + \"]\";\n        },\n        any: function() {\n          return \"any character\";\n        },\n        end: function() {\n          return \"end of input\";\n        },\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n      function hex(ch) {\n        return ch.charCodeAt(0).toString(16).toUpperCase();\n      }\n      function literalEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"').replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function classEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function describeExpectation(expectation) {\n        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n      }\n      function describeExpected(expected2) {\n        var descriptions = expected2.map(describeExpectation);\n        var i, j;\n        descriptions.sort();\n        if (descriptions.length > 0) {\n          for (i = 1, j = 1; i < descriptions.length; i++) {\n            if (descriptions[i - 1] !== descriptions[i]) {\n              descriptions[j] = descriptions[i];\n              j++;\n            }\n          }\n          descriptions.length = j;\n        }\n        switch (descriptions.length) {\n          case 1:\n            return descriptions[0];\n          case 2:\n            return descriptions[0] + \" or \" + descriptions[1];\n          default:\n            return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n        }\n      }\n      function describeFound(found2) {\n        return found2 ? '\"' + literalEscape(found2) + '\"' : \"end of input\";\n      }\n      return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    function peg$parse(input, options) {\n      options = options !== void 0 ? options : {};\n      var peg$FAILED = {};\n      var peg$source = options.grammarSource;\n      var peg$startRuleFunctions = { start: peg$parsestart };\n      var peg$startRuleFunction = peg$parsestart;\n      var peg$c0 = \";\";\n      var peg$c1 = \",\";\n      var peg$c2 = \":\";\n      var peg$c3 = \"/\";\n      var peg$c4 = \">\";\n      var peg$c5 = \"!\";\n      var peg$c6 = \".\";\n      var peg$c7 = \"!![\";\n      var peg$c8 = \"]\";\n      var peg$c9 = \"!!\";\n      var peg$c10 = \"+\";\n      var peg$c11 = \"-\";\n      var peg$r0 = /^[a-zA-Z0-9]/;\n      var peg$r1 = /^[0-9]/;\n      var peg$r2 = /^[ \\t\\n\\r]/;\n      var peg$r3 = /^[0-9a-fA-F]/;\n      var peg$e0 = peg$anyExpectation();\n      var peg$e1 = peg$literalExpectation(\";\", false);\n      var peg$e2 = peg$literalExpectation(\",\", false);\n      var peg$e3 = peg$otherExpectation(\"model list\");\n      var peg$e4 = peg$literalExpectation(\":\", false);\n      var peg$e5 = peg$literalExpectation(\"/\", false);\n      var peg$e6 = peg$otherExpectation(\"model\");\n      var peg$e7 = peg$otherExpectation(\"color spec list\");\n      var peg$e8 = peg$otherExpectation(\"color spec\");\n      var peg$e9 = peg$otherExpectation(\"color\");\n      var peg$e10 = peg$otherExpectation(\"function expression\");\n      var peg$e11 = peg$literalExpectation(\">\", false);\n      var peg$e12 = peg$otherExpectation(\"function\");\n      var peg$e13 = peg$otherExpectation(\"extended expression\");\n      var peg$e14 = peg$otherExpectation(\"core model\");\n      var peg$e15 = peg$otherExpectation(\"expr\");\n      var peg$e16 = peg$literalExpectation(\"!\", false);\n      var peg$e17 = peg$otherExpectation(\"mix expr\");\n      var peg$e18 = peg$otherExpectation(\"name\");\n      var peg$e19 = peg$literalExpectation(\".\", false);\n      var peg$e20 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"]], false, false);\n      var peg$e21 = peg$otherExpectation(\"postfix\");\n      var peg$e22 = peg$literalExpectation(\"!![\", false);\n      var peg$e23 = peg$literalExpectation(\"]\", false);\n      var peg$e24 = peg$literalExpectation(\"!!\", false);\n      var peg$e25 = peg$otherExpectation(\"prefix\");\n      var peg$e26 = peg$otherExpectation(\"plus\");\n      var peg$e27 = peg$literalExpectation(\"+\", false);\n      var peg$e28 = peg$otherExpectation(\"minus\");\n      var peg$e29 = peg$literalExpectation(\"-\", false);\n      var peg$e30 = peg$otherExpectation(\"num\");\n      var peg$e31 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n      var peg$e32 = peg$otherExpectation(\"positive float\");\n      var peg$e33 = peg$otherExpectation(\"divisor\");\n      var peg$e34 = peg$otherExpectation(\"int\");\n      var peg$e35 = peg$otherExpectation(\"whitespace\");\n      var peg$e36 = peg$classExpectation([\" \", \"\t\", \"\\n\", \"\\r\"], false, false);\n      var peg$e37 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false);\n      var peg$f0 = function(m) {\n        return m;\n      };\n      var peg$f1 = function(m) {\n        return m;\n      };\n      var peg$f2 = function(m) {\n        return m;\n      };\n      var peg$f3 = function(m) {\n        return m;\n      };\n      var peg$f4 = function(m) {\n        return m;\n      };\n      var peg$f5 = function(a) {\n        return { type: \"invalid_spec\", content: a };\n      };\n      var peg$f6 = function(f, c) {\n        return c;\n      };\n      var peg$f7 = function(f, r) {\n        return { type: \"color_set\", content: [f].concat(r) };\n      };\n      var peg$f8 = function(n, s) {\n        return { type: \"color_set_item\", name: n, spec_list: s };\n      };\n      var peg$f9 = function(c, m) {\n        return { type: \"model_list\", contents: m, core_model: c };\n      };\n      var peg$f10 = function(m) {\n        return { type: \"model_list\", contents: m, core_model: null };\n      };\n      var peg$f11 = function(m, a) {\n        return a;\n      };\n      var peg$f12 = function(m, r) {\n        return [m].concat(r);\n      };\n      var peg$f13 = function(s, a) {\n        return a;\n      };\n      var peg$f14 = function(s, r) {\n        return { type: \"spec_list\", content: [s].concat(r) };\n      };\n      var peg$f15 = function(c) {\n        return { type: \"hex_spec\", content: [c] };\n      };\n      var peg$f16 = function(c, d) {\n        return d;\n      };\n      var peg$f17 = function(c, d) {\n        return d;\n      };\n      var peg$f18 = function(c, r) {\n        return { type: \"num_spec\", content: r ? [c].concat(r) : [c] };\n      };\n      var peg$f19 = function(c, fs) {\n        return { type: \"color\", color: c, functions: fs };\n      };\n      var peg$f20 = function(f, n) {\n        return n;\n      };\n      var peg$f21 = function(f, args) {\n        return { type: \"function\", name: f, args };\n      };\n      var peg$f22 = function(core, d, e, es) {\n        return {\n          type: \"extended_expr\",\n          core_model: core,\n          div: d,\n          expressions: [e].concat(es)\n        };\n      };\n      var peg$f23 = function(core, e, es) {\n        return {\n          type: \"extended_expr\",\n          core_model: core,\n          div: null,\n          expressions: [e].concat(es)\n        };\n      };\n      var peg$f24 = function(e, d) {\n        return { type: \"weighted_expr\", color: e, weight: d };\n      };\n      var peg$f25 = function(e) {\n        return e;\n      };\n      var peg$f26 = function(p, n, e, po) {\n        return {\n          type: \"expr\",\n          prefix: p,\n          name: n,\n          mix_expr: e,\n          postfix: po\n        };\n      };\n      var peg$f27 = function(p, n) {\n        return { type: \"complete_mix\", mix_percent: p, name: n };\n      };\n      var peg$f28 = function(p) {\n        return { type: \"partial_mix\", mix_percent: p };\n      };\n      var peg$f29 = function(c, p) {\n        return c.concat(p || []);\n      };\n      var peg$f30 = function(n) {\n        return { type: \"postfix\", num: n };\n      };\n      var peg$f31 = function(p) {\n        return { type: \"postfix\", plusses: p };\n      };\n      var peg$f32 = function(n) {\n        return parseInt(n, 10);\n      };\n      var peg$f33 = function(n) {\n        return parseFloat(n);\n      };\n      var peg$f34 = function(n) {\n        return n;\n      };\n      var peg$f35 = function(n) {\n        return -n;\n      };\n      var peg$f36 = function(m, n) {\n        return m ? -n : n;\n      };\n      var peg$f37 = function(h) {\n        return h.toUpperCase();\n      };\n      var peg$currPos = 0;\n      var peg$savedPos = 0;\n      var peg$posDetailsCache = [{ line: 1, column: 1 }];\n      var peg$maxFailPos = 0;\n      var peg$maxFailExpected = [];\n      var peg$silentFails = 0;\n      var peg$result;\n      if (\"startRule\" in options) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n          throw new Error(`Can't start parsing from rule \"` + options.startRule + '\".');\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n      }\n      function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n      }\n      function offset() {\n        return peg$savedPos;\n      }\n      function range() {\n        return {\n          source: peg$source,\n          start: peg$savedPos,\n          end: peg$currPos\n        };\n      }\n      function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n      }\n      function expected(description, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError(\n          [peg$otherExpectation(description)],\n          input.substring(peg$savedPos, peg$currPos),\n          location2\n        );\n      }\n      function error(message, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location2);\n      }\n      function peg$literalExpectation(text2, ignoreCase) {\n        return { type: \"literal\", text: text2, ignoreCase };\n      }\n      function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts, inverted, ignoreCase };\n      }\n      function peg$anyExpectation() {\n        return { type: \"any\" };\n      }\n      function peg$endExpectation() {\n        return { type: \"end\" };\n      }\n      function peg$otherExpectation(description) {\n        return { type: \"other\", description };\n      }\n      function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n          return details;\n        } else {\n          p = pos - 1;\n          while (!peg$posDetailsCache[p]) {\n            p--;\n          }\n          details = peg$posDetailsCache[p];\n          details = {\n            line: details.line,\n            column: details.column\n          };\n          while (p < pos) {\n            if (input.charCodeAt(p) === 10) {\n              details.line++;\n              details.column = 1;\n            } else {\n              details.column++;\n            }\n            p++;\n          }\n          peg$posDetailsCache[pos] = details;\n          return details;\n        }\n      }\n      function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n          source: peg$source,\n          start: {\n            offset: startPos,\n            line: startPosDetails.line,\n            column: startPosDetails.column\n          },\n          end: {\n            offset: endPos,\n            line: endPosDetails.line,\n            column: endPosDetails.column\n          }\n        };\n      }\n      function peg$fail(expected2) {\n        if (peg$currPos < peg$maxFailPos) {\n          return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n          peg$maxFailPos = peg$currPos;\n          peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected2);\n      }\n      function peg$buildSimpleError(message, location2) {\n        return new peg$SyntaxError(message, null, null, location2);\n      }\n      function peg$buildStructuredError(expected2, found, location2) {\n        return new peg$SyntaxError(\n          peg$SyntaxError.buildMessage(expected2, found),\n          expected2,\n          found,\n          location2\n        );\n      }\n      function peg$parsestart() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$parsespec();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseEOL();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f0(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsespec_list();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseEOL();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f1(s1);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsecolor();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parseEOL();\n              if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f2(s1);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parsemodel_list();\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parseEOL();\n                if (s2 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s0 = peg$f3(s1);\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsecolor_set_spec();\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$parseEOL();\n                  if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s0 = peg$f4(s1);\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$currPos;\n                  s2 = [];\n                  if (input.length > peg$currPos) {\n                    s3 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$e0);\n                    }\n                  }\n                  while (s3 !== peg$FAILED) {\n                    s2.push(s3);\n                    if (input.length > peg$currPos) {\n                      s3 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s3 = peg$FAILED;\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$e0);\n                      }\n                    }\n                  }\n                  s1 = input.substring(s1, peg$currPos);\n                  peg$savedPos = s0;\n                  s1 = peg$f5(s1);\n                  s0 = s1;\n                }\n              }\n            }\n          }\n        }\n        return s0;\n      }\n      function peg$parsecolor_set_spec() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        s1 = peg$parsecolor_set_item();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 59) {\n            s4 = peg$c0;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e1);\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolor_set_item();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s3 = peg$f6(s1, s5);\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 59) {\n              s4 = peg$c0;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e1);\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolor_set_item();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s3 = peg$f6(s1, s5);\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          }\n          peg$savedPos = s0;\n          s0 = peg$f7(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsecolor_set_item() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$parsename();\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s2 = peg$c1;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e2);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsespec_list();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f8(s1, s3);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsemodel_list() {\n        var s0, s1, s2, s3;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parsecore_model();\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s2 = peg$c2;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e4);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsemodel_list_tail();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f9(s1, s3);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsemodel_list_tail();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f10(s1);\n          }\n          s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        return s0;\n      }\n      function peg$parsemodel_list_tail() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        s1 = peg$parsemodel();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 47) {\n            s4 = peg$c3;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e5);\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsemodel();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s3 = peg$f11(s1, s5);\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 47) {\n              s4 = peg$c3;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e5);\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsemodel();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s3 = peg$f11(s1, s5);\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          }\n          peg$savedPos = s0;\n          s0 = peg$f12(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsemodel() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$parsecore_model();\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e6);\n          }\n        }\n        return s0;\n      }\n      function peg$parsespec_list() {\n        var s0, s1, s2, s3, s4, s5;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parsespec();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 47) {\n            s4 = peg$c3;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e5);\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsespec();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s3 = peg$f13(s1, s5);\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 47) {\n              s4 = peg$c3;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e5);\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsespec();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s3 = peg$f13(s1, s5);\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          }\n          peg$savedPos = s0;\n          s0 = peg$f14(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e7);\n          }\n        }\n        return s0;\n      }\n      function peg$parsespec() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$currPos;\n        s3 = peg$parsehex();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsehex();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsehex();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsehex();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsehex();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsehex();\n                  if (s8 !== peg$FAILED) {\n                    s3 = [s3, s4, s5, s6, s7, s8];\n                    s2 = s3;\n                  } else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = input.substring(s1, peg$currPos);\n        } else {\n          s1 = s2;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f15(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsedec();\n          if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s4 = peg$c1;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e2);\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsedec();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s3 = peg$f16(s1, s5);\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s4 = peg$c1;\n                  peg$currPos++;\n                } else {\n                  s4 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$e2);\n                  }\n                }\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parsedec();\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s3;\n                    s3 = peg$f16(s1, s5);\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              }\n            } else {\n              s2 = peg$FAILED;\n            }\n            if (s2 === peg$FAILED) {\n              s2 = [];\n              s3 = peg$currPos;\n              s4 = peg$parsesp();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsedec();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s3;\n                  s3 = peg$f17(s1, s5);\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n              if (s3 !== peg$FAILED) {\n                while (s3 !== peg$FAILED) {\n                  s2.push(s3);\n                  s3 = peg$currPos;\n                  s4 = peg$parsesp();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parsedec();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s3;\n                      s3 = peg$f17(s1, s5);\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                }\n              } else {\n                s2 = peg$FAILED;\n              }\n            }\n            if (s2 === peg$FAILED) {\n              s2 = null;\n            }\n            peg$savedPos = s0;\n            s0 = peg$f18(s1, s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e8);\n          }\n        }\n        return s0;\n      }\n      function peg$parsecolor() {\n        var s0, s1, s2, s3;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parsecolor_expr();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parsefunc_expr();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parsefunc_expr();\n          }\n          peg$savedPos = s0;\n          s0 = peg$f19(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e9);\n          }\n        }\n        return s0;\n      }\n      function peg$parsecolor_expr() {\n        var s0;\n        s0 = peg$parseext_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseexpr();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsename();\n          }\n        }\n        return s0;\n      }\n      function peg$parsefunc_expr() {\n        var s0, s1, s2, s3, s4, s5, s6;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 62) {\n          s1 = peg$c4;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e11);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsefunction();\n          if (s2 !== peg$FAILED) {\n            s3 = [];\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c1;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e2);\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseint();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s4;\n                s4 = peg$f20(s2, s6);\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s5 = peg$c1;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e2);\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseint();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s4;\n                  s4 = peg$f20(s2, s6);\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            }\n            peg$savedPos = s0;\n            s0 = peg$f21(s2, s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e10);\n          }\n        }\n        return s0;\n      }\n      function peg$parsefunction() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$parsename();\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e12);\n          }\n        }\n        return s0;\n      }\n      function peg$parseext_expr() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parsecore_model();\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s2 = peg$c1;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e2);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsediv();\n            if (s3 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 58) {\n                s4 = peg$c2;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e4);\n                }\n              }\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseweighted_expr();\n                if (s5 !== peg$FAILED) {\n                  s6 = [];\n                  s7 = peg$parseadditional_weighted_expr();\n                  while (s7 !== peg$FAILED) {\n                    s6.push(s7);\n                    s7 = peg$parseadditional_weighted_expr();\n                  }\n                  peg$savedPos = s0;\n                  s0 = peg$f22(s1, s3, s5, s6);\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsecore_model();\n          if (s1 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 58) {\n              s2 = peg$c2;\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e4);\n              }\n            }\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseweighted_expr();\n              if (s3 !== peg$FAILED) {\n                s4 = [];\n                s5 = peg$parseadditional_weighted_expr();\n                while (s5 !== peg$FAILED) {\n                  s4.push(s5);\n                  s5 = peg$parseadditional_weighted_expr();\n                }\n                peg$savedPos = s0;\n                s0 = peg$f23(s1, s3, s4);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e13);\n          }\n        }\n        return s0;\n      }\n      function peg$parseweighted_expr() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$parseexpr();\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s2 = peg$c1;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e2);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsedec();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f24(s1, s3);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseadditional_weighted_expr() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 59) {\n          s1 = peg$c0;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e1);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseweighted_expr();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f25(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsecore_model() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$parsename();\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e14);\n          }\n        }\n        return s0;\n      }\n      function peg$parseexpr() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parseprefix();\n        s2 = peg$parsename();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsemix_expr();\n          s4 = peg$parsepostfix();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          peg$savedPos = s0;\n          s0 = peg$f26(s1, s2, s3, s4);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e15);\n          }\n        }\n        return s0;\n      }\n      function peg$parsecomplete_mix() {\n        var s0, s1, s2, s3, s4;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 33) {\n          s1 = peg$c5;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e16);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsepct();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 33) {\n              s3 = peg$c5;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e16);\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parsename();\n              if (s4 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f27(s2, s4);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsepartial_mix() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 33) {\n          s1 = peg$c5;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e16);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsepct();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f28(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsemix_expr() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsecomplete_mix();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsecomplete_mix();\n        }\n        s2 = peg$parsepartial_mix();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        peg$savedPos = s0;\n        s0 = peg$f29(s1, s2);\n        peg$silentFails--;\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e17);\n        }\n        return s0;\n      }\n      function peg$parsename() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s0 = peg$c6;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e19);\n          }\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = [];\n          if (peg$r0.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e20);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n              s1.push(s2);\n              if (peg$r0.test(input.charAt(peg$currPos))) {\n                s2 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e20);\n                }\n              }\n            }\n          } else {\n            s1 = peg$FAILED;\n          }\n          if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n          } else {\n            s0 = s1;\n          }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e18);\n          }\n        }\n        return s0;\n      }\n      function peg$parsepostfix() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 3) === peg$c7) {\n          s1 = peg$c7;\n          peg$currPos += 3;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e22);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsenum();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s3 = peg$c8;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e23);\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f30(s2);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c9) {\n            s1 = peg$c9;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e24);\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$currPos;\n            s3 = [];\n            s4 = peg$parseplus();\n            if (s4 !== peg$FAILED) {\n              while (s4 !== peg$FAILED) {\n                s3.push(s4);\n                s4 = peg$parseplus();\n              }\n            } else {\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = input.substring(s2, peg$currPos);\n            } else {\n              s2 = s3;\n            }\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f31(s2);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e21);\n          }\n        }\n        return s0;\n      }\n      function peg$parseprefix() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$parseminus();\n        if (s0 === peg$FAILED) {\n          s0 = null;\n        }\n        peg$silentFails--;\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e25);\n        }\n        return s0;\n      }\n      function peg$parseplus() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s2 = peg$c10;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e27);\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s2 = peg$c10;\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e27);\n              }\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e26);\n          }\n        }\n        return s0;\n      }\n      function peg$parseminus() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s2 = peg$c11;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e29);\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (input.charCodeAt(peg$currPos) === 45) {\n              s2 = peg$c11;\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e29);\n              }\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e28);\n          }\n        }\n        return s0;\n      }\n      function peg$parsenum() {\n        var s0, s1, s2, s3;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = [];\n        if (peg$r1.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e31);\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$r1.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e31);\n              }\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = input.substring(s1, peg$currPos);\n        } else {\n          s1 = s2;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f32(s1);\n        }\n        s0 = s1;\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e30);\n          }\n        }\n        return s0;\n      }\n      function peg$parsepct() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        s4 = [];\n        if (peg$r1.test(input.charAt(peg$currPos))) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e31);\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            if (peg$r1.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e31);\n              }\n            }\n          }\n        } else {\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s3 = input.substring(s3, peg$currPos);\n        } else {\n          s3 = s4;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s6 = peg$c6;\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e19);\n            }\n          }\n          if (s6 !== peg$FAILED) {\n            s7 = peg$currPos;\n            s8 = [];\n            if (peg$r1.test(input.charAt(peg$currPos))) {\n              s9 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s9 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e31);\n              }\n            }\n            while (s9 !== peg$FAILED) {\n              s8.push(s9);\n              if (peg$r1.test(input.charAt(peg$currPos))) {\n                s9 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e31);\n                }\n              }\n            }\n            s7 = input.substring(s7, peg$currPos);\n            s6 = [s6, s7];\n            s5 = s6;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          s4 = input.substring(s4, peg$currPos);\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = input.substring(s1, peg$currPos);\n        } else {\n          s1 = s2;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          s2 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s3 = peg$c6;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e19);\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$currPos;\n            s5 = [];\n            if (peg$r1.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e31);\n              }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$r1.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$e31);\n                  }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = input.substring(s4, peg$currPos);\n            } else {\n              s4 = s5;\n            }\n            if (s4 !== peg$FAILED) {\n              s3 = [s3, s4];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = input.substring(s1, peg$currPos);\n          } else {\n            s1 = s2;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f33(s1);\n        }\n        s0 = s1;\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e32);\n          }\n        }\n        return s0;\n      }\n      function peg$parsediv() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$parsepct();\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e33);\n          }\n        }\n        return s0;\n      }\n      function peg$parsedec() {\n        var s0, s1, s2;\n        s0 = peg$parsepct();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c10;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e27);\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsepct();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f34(s2);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 45) {\n              s1 = peg$c11;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e29);\n              }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parsepct();\n              if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f35(s2);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n        return s0;\n      }\n      function peg$parseint() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parseminus();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        s2 = peg$parsenum();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f36(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e34);\n          }\n        }\n        return s0;\n      }\n      function peg$parse_() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = [];\n        if (peg$r2.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e36);\n          }\n        }\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$r2.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e36);\n            }\n          }\n        }\n        peg$silentFails--;\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e35);\n        }\n        return s0;\n      }\n      function peg$parsesp() {\n        var s0, s1;\n        s0 = [];\n        if (peg$r2.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e36);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          while (s1 !== peg$FAILED) {\n            s0.push(s1);\n            if (peg$r2.test(input.charAt(peg$currPos))) {\n              s1 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e36);\n              }\n            }\n          }\n        } else {\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsehex() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (peg$r3.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e37);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f37(s1);\n        }\n        s0 = s1;\n        return s0;\n      }\n      function peg$parseEOL() {\n        var s0, s1;\n        s0 = peg$currPos;\n        peg$silentFails++;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        peg$silentFails--;\n        if (s1 === peg$FAILED) {\n          s0 = void 0;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      peg$result = peg$startRuleFunction();\n      if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n      } else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n          peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(\n          peg$maxFailExpected,\n          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n          peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n        );\n      }\n    }\n    return {\n      SyntaxError: peg$SyntaxError,\n      parse: peg$parse\n    };\n  }()\n);\n\n// grammars/tabular-spec.pegjs\nvar tabular_spec_default = (\n  // Generated by Peggy 2.0.1.\n  //\n  // https://peggyjs.org/\n  function() {\n    \"use strict\";\n    function peg$subclass(child, parent) {\n      function C() {\n        this.constructor = child;\n      }\n      C.prototype = parent.prototype;\n      child.prototype = new C();\n    }\n    function peg$SyntaxError(message, expected, found, location) {\n      var self = Error.call(this, message);\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n      }\n      self.expected = expected;\n      self.found = found;\n      self.location = location;\n      self.name = \"SyntaxError\";\n      return self;\n    }\n    peg$subclass(peg$SyntaxError, Error);\n    function peg$padEnd(str, targetLength, padString) {\n      padString = padString || \" \";\n      if (str.length > targetLength) {\n        return str;\n      }\n      targetLength -= str.length;\n      padString += padString.repeat(targetLength);\n      return str + padString.slice(0, targetLength);\n    }\n    peg$SyntaxError.prototype.format = function(sources) {\n      var str = \"Error: \" + this.message;\n      if (this.location) {\n        var src = null;\n        var k;\n        for (k = 0; k < sources.length; k++) {\n          if (sources[k].source === this.location.source) {\n            src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n            break;\n          }\n        }\n        var s = this.location.start;\n        var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n        if (src) {\n          var e = this.location.end;\n          var filler = peg$padEnd(\"\", s.line.toString().length, \" \");\n          var line = src[s.line - 1];\n          var last = s.line === e.line ? e.column : line.length + 1;\n          var hatLen = last - s.column || 1;\n          str += \"\\n --> \" + loc + \"\\n\" + filler + \" |\\n\" + s.line + \" | \" + line + \"\\n\" + filler + \" | \" + peg$padEnd(\"\", s.column - 1, \" \") + peg$padEnd(\"\", hatLen, \"^\");\n        } else {\n          str += \"\\n at \" + loc;\n        }\n      }\n      return str;\n    };\n    peg$SyntaxError.buildMessage = function(expected, found) {\n      var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return '\"' + literalEscape(expectation.text) + '\"';\n        },\n        class: function(expectation) {\n          var escapedParts = expectation.parts.map(function(part) {\n            return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n          });\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts.join(\"\") + \"]\";\n        },\n        any: function() {\n          return \"any character\";\n        },\n        end: function() {\n          return \"end of input\";\n        },\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n      function hex(ch) {\n        return ch.charCodeAt(0).toString(16).toUpperCase();\n      }\n      function literalEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"').replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function classEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function describeExpectation(expectation) {\n        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n      }\n      function describeExpected(expected2) {\n        var descriptions = expected2.map(describeExpectation);\n        var i, j;\n        descriptions.sort();\n        if (descriptions.length > 0) {\n          for (i = 1, j = 1; i < descriptions.length; i++) {\n            if (descriptions[i - 1] !== descriptions[i]) {\n              descriptions[j] = descriptions[i];\n              j++;\n            }\n          }\n          descriptions.length = j;\n        }\n        switch (descriptions.length) {\n          case 1:\n            return descriptions[0];\n          case 2:\n            return descriptions[0] + \" or \" + descriptions[1];\n          default:\n            return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n        }\n      }\n      function describeFound(found2) {\n        return found2 ? '\"' + literalEscape(found2) + '\"' : \"end of input\";\n      }\n      return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    function peg$parse(input, options) {\n      options = options !== void 0 ? options : {};\n      var peg$FAILED = {};\n      var peg$source = options.grammarSource;\n      var peg$startRuleFunctions = { body: peg$parsebody };\n      var peg$startRuleFunction = peg$parsebody;\n      var peg$e0 = peg$otherExpectation(\"decl_start\");\n      var peg$e1 = peg$otherExpectation(\"decl_end\");\n      var peg$e2 = peg$otherExpectation(\"vert\");\n      var peg$e3 = peg$anyExpectation();\n      var peg$e4 = peg$otherExpectation(\"l\");\n      var peg$e5 = peg$otherExpectation(\"r\");\n      var peg$e6 = peg$otherExpectation(\"c\");\n      var peg$e7 = peg$otherExpectation(\"p\");\n      var peg$e8 = peg$otherExpectation(\"m\");\n      var peg$e9 = peg$otherExpectation(\"b\");\n      var peg$e10 = peg$otherExpectation(\"w\");\n      var peg$e11 = peg$otherExpectation(\"W\");\n      var peg$e12 = peg$otherExpectation(\"X\");\n      var peg$e13 = peg$otherExpectation(\"!\");\n      var peg$e14 = peg$otherExpectation(\"@\");\n      var peg$e15 = peg$otherExpectation(\"<\");\n      var peg$e16 = peg$otherExpectation(\">\");\n      var peg$e17 = peg$otherExpectation(\"group\");\n      var peg$e18 = peg$otherExpectation(\"whitespace\");\n      var peg$f0 = function(c) {\n        return c;\n      };\n      var peg$f1 = function(cols) {\n        return cols;\n      };\n      var peg$f2 = function() {\n        return [];\n      };\n      var peg$f3 = function(divs1, start, a, end, divs2) {\n        return {\n          type: \"column\",\n          pre_dividers: divs1,\n          post_dividers: divs2,\n          before_start_code: start,\n          before_end_code: end,\n          alignment: a\n        };\n      };\n      var peg$f4 = function() {\n        return {\n          type: \"vert_divider\"\n        };\n      };\n      var peg$f5 = function(b, g) {\n        return {\n          type: \"bang_divider\",\n          content: g[0].content\n        };\n      };\n      var peg$f6 = function(g) {\n        return {\n          type: \"at_divider\",\n          content: g[0].content\n        };\n      };\n      var peg$f7 = function(div) {\n        return div;\n      };\n      var peg$f8 = function(g) {\n        return { type: \"decl_code\", code: g[0].content };\n      };\n      var peg$f9 = function(g) {\n        return { type: \"decl_code\", code: g[0].content };\n      };\n      var peg$f10 = function() {\n        return { type: \"alignment\", alignment: \"left\" };\n      };\n      var peg$f11 = function() {\n        return { type: \"alignment\", alignment: \"center\" };\n      };\n      var peg$f12 = function() {\n        return { type: \"alignment\", alignment: \"right\" };\n      };\n      var peg$f13 = function() {\n        return { type: \"alignment\", alignment: \"X\" };\n      };\n      var peg$f14 = function() {\n        return \"top\";\n      };\n      var peg$f15 = function() {\n        return \"default\";\n      };\n      var peg$f16 = function() {\n        return \"bottom\";\n      };\n      var peg$f17 = function(a, g) {\n        return {\n          type: \"alignment\",\n          alignment: \"parbox\",\n          baseline: a,\n          size: g[0].content\n        };\n      };\n      var peg$f18 = function(g1, g2) {\n        return {\n          type: \"alignment\",\n          alignment: \"parbox\",\n          baseline: g1[0].content,\n          size: g2[0].content\n        };\n      };\n      var peg$f19 = function(tok) {\n        return options.matchChar(tok, \"|\");\n      };\n      var peg$f20 = function(tok) {\n        return options.matchChar(tok, \"l\");\n      };\n      var peg$f21 = function(tok) {\n        return options.matchChar(tok, \"r\");\n      };\n      var peg$f22 = function(tok) {\n        return options.matchChar(tok, \"c\");\n      };\n      var peg$f23 = function(tok) {\n        return options.matchChar(tok, \"p\");\n      };\n      var peg$f24 = function(tok) {\n        return options.matchChar(tok, \"m\");\n      };\n      var peg$f25 = function(tok) {\n        return options.matchChar(tok, \"b\");\n      };\n      var peg$f26 = function(tok) {\n        return options.matchChar(tok, \"w\");\n      };\n      var peg$f27 = function(tok) {\n        return options.matchChar(tok, \"W\");\n      };\n      var peg$f28 = function(tok) {\n        return options.matchChar(tok, \"X\");\n      };\n      var peg$f29 = function(tok) {\n        return options.matchChar(tok, \"!\");\n      };\n      var peg$f30 = function(tok) {\n        return options.matchChar(tok, \"@\");\n      };\n      var peg$f31 = function(tok) {\n        return options.matchChar(tok, \"<\");\n      };\n      var peg$f32 = function(tok) {\n        return options.matchChar(tok, \">\");\n      };\n      var peg$f33 = function(tok) {\n        return options.isGroup(tok);\n      };\n      var peg$f34 = function(tok) {\n        return options.isWhitespace(tok);\n      };\n      var peg$currPos = 0;\n      var peg$savedPos = 0;\n      var peg$posDetailsCache = [{ line: 1, column: 1 }];\n      var peg$maxFailPos = 0;\n      var peg$maxFailExpected = [];\n      var peg$silentFails = 0;\n      var peg$result;\n      if (\"startRule\" in options) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n          throw new Error(`Can't start parsing from rule \"` + options.startRule + '\".');\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n      }\n      function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n      }\n      function offset() {\n        return peg$savedPos;\n      }\n      function range() {\n        return {\n          source: peg$source,\n          start: peg$savedPos,\n          end: peg$currPos\n        };\n      }\n      function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n      }\n      function expected(description, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError(\n          [peg$otherExpectation(description)],\n          input.substring(peg$savedPos, peg$currPos),\n          location2\n        );\n      }\n      function error(message, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location2);\n      }\n      function peg$literalExpectation(text2, ignoreCase) {\n        return { type: \"literal\", text: text2, ignoreCase };\n      }\n      function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts, inverted, ignoreCase };\n      }\n      function peg$anyExpectation() {\n        return { type: \"any\" };\n      }\n      function peg$endExpectation() {\n        return { type: \"end\" };\n      }\n      function peg$otherExpectation(description) {\n        return { type: \"other\", description };\n      }\n      function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n          return details;\n        } else {\n          p = pos - 1;\n          while (!peg$posDetailsCache[p]) {\n            p--;\n          }\n          details = peg$posDetailsCache[p];\n          details = {\n            line: details.line,\n            column: details.column\n          };\n          while (p < pos) {\n            if (input.charCodeAt(p) === 10) {\n              details.line++;\n              details.column = 1;\n            } else {\n              details.column++;\n            }\n            p++;\n          }\n          peg$posDetailsCache[pos] = details;\n          return details;\n        }\n      }\n      function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n          source: peg$source,\n          start: {\n            offset: startPos,\n            line: startPosDetails.line,\n            column: startPosDetails.column\n          },\n          end: {\n            offset: endPos,\n            line: endPosDetails.line,\n            column: endPosDetails.column\n          }\n        };\n      }\n      function peg$fail(expected2) {\n        if (peg$currPos < peg$maxFailPos) {\n          return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n          peg$maxFailPos = peg$currPos;\n          peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected2);\n      }\n      function peg$buildSimpleError(message, location2) {\n        return new peg$SyntaxError(message, null, null, location2);\n      }\n      function peg$buildStructuredError(expected2, found, location2) {\n        return new peg$SyntaxError(\n          peg$SyntaxError.buildMessage(expected2, found),\n          expected2,\n          found,\n          location2\n        );\n      }\n      function peg$parsebody() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$currPos;\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          peg$savedPos = s2;\n          s2 = peg$f0(s3);\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$currPos;\n            s3 = peg$parsecolumn();\n            if (s3 !== peg$FAILED) {\n              s4 = [];\n              s5 = peg$parse_();\n              while (s5 !== peg$FAILED) {\n                s4.push(s5);\n                s5 = peg$parse_();\n              }\n              peg$savedPos = s2;\n              s2 = peg$f0(s3);\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f1(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseEOL();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f2();\n          }\n          s0 = s1;\n        }\n        return s0;\n      }\n      function peg$parsecolumn() {\n        var s0, s1, s2, s3, s4, s5, s6;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsecolumn_divider();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsecolumn_divider();\n        }\n        s2 = peg$parsedecl_start();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        s3 = peg$parsealignment();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsedecl_end();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          s5 = [];\n          s6 = peg$parsecolumn_divider();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsecolumn_divider();\n          }\n          peg$savedPos = s0;\n          s0 = peg$f3(s1, s2, s3, s4, s5);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsecolumn_divider() {\n        var s0, s1, s2, s3, s4;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parse_();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parse_();\n        }\n        s2 = peg$currPos;\n        s3 = peg$parsevert();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s3 = peg$f4();\n        }\n        s2 = s3;\n        if (s2 === peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$parsebang();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsegroup();\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s2;\n              s2 = peg$f5(s3, s4);\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n          if (s2 === peg$FAILED) {\n            s2 = peg$currPos;\n            s3 = peg$parseat();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parsegroup();\n              if (s4 !== peg$FAILED) {\n                peg$savedPos = s2;\n                s2 = peg$f6(s4);\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parse_();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parse_();\n          }\n          peg$savedPos = s0;\n          s0 = peg$f7(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsedecl_start() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parsegreater();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsegroup();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f8(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        return s0;\n      }\n      function peg$parsedecl_end() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parseless();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsegroup();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f9(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e1);\n          }\n        }\n        return s0;\n      }\n      function peg$parsealignment() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        s1 = peg$parsel();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f10();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsec();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f11();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parser();\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$f12();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parseX();\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$f13();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$currPos;\n                s2 = peg$parsep();\n                if (s2 !== peg$FAILED) {\n                  peg$savedPos = s1;\n                  s2 = peg$f14();\n                }\n                s1 = s2;\n                if (s1 === peg$FAILED) {\n                  s1 = peg$currPos;\n                  s2 = peg$parsem();\n                  if (s2 !== peg$FAILED) {\n                    peg$savedPos = s1;\n                    s2 = peg$f15();\n                  }\n                  s1 = s2;\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$currPos;\n                    s2 = peg$parseb();\n                    if (s2 !== peg$FAILED) {\n                      peg$savedPos = s1;\n                      s2 = peg$f16();\n                    }\n                    s1 = s2;\n                  }\n                }\n                if (s1 !== peg$FAILED) {\n                  s2 = [];\n                  s3 = peg$parse_();\n                  while (s3 !== peg$FAILED) {\n                    s2.push(s3);\n                    s3 = peg$parse_();\n                  }\n                  s3 = peg$parsegroup();\n                  if (s3 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s0 = peg$f17(s1, s3);\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parsew();\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$parseW();\n                  }\n                  if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$parse_();\n                    while (s3 !== peg$FAILED) {\n                      s2.push(s3);\n                      s3 = peg$parse_();\n                    }\n                    s3 = peg$parsegroup();\n                    if (s3 !== peg$FAILED) {\n                      s4 = [];\n                      s5 = peg$parse_();\n                      while (s5 !== peg$FAILED) {\n                        s4.push(s5);\n                        s5 = peg$parse_();\n                      }\n                      s5 = peg$parsegroup();\n                      if (s5 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f18(s3, s5);\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                }\n              }\n            }\n          }\n        }\n        return s0;\n      }\n      function peg$parsevert() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f19(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e2);\n          }\n        }\n        return s0;\n      }\n      function peg$parsel() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f20(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e4);\n          }\n        }\n        return s0;\n      }\n      function peg$parser() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f21(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e5);\n          }\n        }\n        return s0;\n      }\n      function peg$parsec() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f22(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e6);\n          }\n        }\n        return s0;\n      }\n      function peg$parsep() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f23(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e7);\n          }\n        }\n        return s0;\n      }\n      function peg$parsem() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f24(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e8);\n          }\n        }\n        return s0;\n      }\n      function peg$parseb() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f25(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e9);\n          }\n        }\n        return s0;\n      }\n      function peg$parsew() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f26(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e10);\n          }\n        }\n        return s0;\n      }\n      function peg$parseW() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f27(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e11);\n          }\n        }\n        return s0;\n      }\n      function peg$parseX() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f28(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e12);\n          }\n        }\n        return s0;\n      }\n      function peg$parsebang() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f29(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e13);\n          }\n        }\n        return s0;\n      }\n      function peg$parseat() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f30(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e14);\n          }\n        }\n        return s0;\n      }\n      function peg$parseless() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f31(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e15);\n          }\n        }\n        return s0;\n      }\n      function peg$parsegreater() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f32(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e16);\n          }\n        }\n        return s0;\n      }\n      function peg$parsegroup() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f33(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e17);\n          }\n        }\n        return s0;\n      }\n      function peg$parse_() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f34(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e18);\n          }\n        }\n        return s0;\n      }\n      function peg$parseEOL() {\n        var s0, s1;\n        s0 = peg$currPos;\n        peg$silentFails++;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        peg$silentFails--;\n        if (s1 === peg$FAILED) {\n          s0 = void 0;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      if (!options.isHash) {\n        try {\n          Object.assign(options, {\n            matchChar: (node, char) => node.type === \"string\" && node.content === char,\n            isGroup: (node) => node.type === \"group\",\n            isWhitespace: (node) => node.type === \"whitespace\"\n          });\n        } catch (e) {\n          console.warn(\"Error when initializing parser\", e);\n        }\n      }\n      peg$result = peg$startRuleFunction();\n      if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n      } else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n          peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(\n          peg$maxFailExpected,\n          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n          peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n        );\n      }\n    }\n    return {\n      SyntaxError: peg$SyntaxError,\n      parse: peg$parse\n    };\n  }()\n);\n\n// grammars/systeme-environment.pegjs\nvar systeme_environment_default = (\n  // Generated by Peggy 2.0.1.\n  //\n  // https://peggyjs.org/\n  function() {\n    \"use strict\";\n    function peg$subclass(child, parent) {\n      function C() {\n        this.constructor = child;\n      }\n      C.prototype = parent.prototype;\n      child.prototype = new C();\n    }\n    function peg$SyntaxError(message, expected, found, location) {\n      var self = Error.call(this, message);\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n      }\n      self.expected = expected;\n      self.found = found;\n      self.location = location;\n      self.name = \"SyntaxError\";\n      return self;\n    }\n    peg$subclass(peg$SyntaxError, Error);\n    function peg$padEnd(str, targetLength, padString) {\n      padString = padString || \" \";\n      if (str.length > targetLength) {\n        return str;\n      }\n      targetLength -= str.length;\n      padString += padString.repeat(targetLength);\n      return str + padString.slice(0, targetLength);\n    }\n    peg$SyntaxError.prototype.format = function(sources) {\n      var str = \"Error: \" + this.message;\n      if (this.location) {\n        var src = null;\n        var k;\n        for (k = 0; k < sources.length; k++) {\n          if (sources[k].source === this.location.source) {\n            src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n            break;\n          }\n        }\n        var s = this.location.start;\n        var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n        if (src) {\n          var e = this.location.end;\n          var filler = peg$padEnd(\"\", s.line.toString().length, \" \");\n          var line = src[s.line - 1];\n          var last = s.line === e.line ? e.column : line.length + 1;\n          var hatLen = last - s.column || 1;\n          str += \"\\n --> \" + loc + \"\\n\" + filler + \" |\\n\" + s.line + \" | \" + line + \"\\n\" + filler + \" | \" + peg$padEnd(\"\", s.column - 1, \" \") + peg$padEnd(\"\", hatLen, \"^\");\n        } else {\n          str += \"\\n at \" + loc;\n        }\n      }\n      return str;\n    };\n    peg$SyntaxError.buildMessage = function(expected, found) {\n      var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return '\"' + literalEscape(expectation.text) + '\"';\n        },\n        class: function(expectation) {\n          var escapedParts = expectation.parts.map(function(part) {\n            return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n          });\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts.join(\"\") + \"]\";\n        },\n        any: function() {\n          return \"any character\";\n        },\n        end: function() {\n          return \"end of input\";\n        },\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n      function hex(ch) {\n        return ch.charCodeAt(0).toString(16).toUpperCase();\n      }\n      function literalEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"').replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function classEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function describeExpectation(expectation) {\n        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n      }\n      function describeExpected(expected2) {\n        var descriptions = expected2.map(describeExpectation);\n        var i, j;\n        descriptions.sort();\n        if (descriptions.length > 0) {\n          for (i = 1, j = 1; i < descriptions.length; i++) {\n            if (descriptions[i - 1] !== descriptions[i]) {\n              descriptions[j] = descriptions[i];\n              j++;\n            }\n          }\n          descriptions.length = j;\n        }\n        switch (descriptions.length) {\n          case 1:\n            return descriptions[0];\n          case 2:\n            return descriptions[0] + \" or \" + descriptions[1];\n          default:\n            return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n        }\n      }\n      function describeFound(found2) {\n        return found2 ? '\"' + literalEscape(found2) + '\"' : \"end of input\";\n      }\n      return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    function peg$parse(input, options) {\n      options = options !== void 0 ? options : {};\n      var peg$FAILED = {};\n      var peg$source = options.grammarSource;\n      var peg$startRuleFunctions = { body: peg$parsebody };\n      var peg$startRuleFunction = peg$parsebody;\n      var peg$e0 = peg$otherExpectation(\"partial item\");\n      var peg$e1 = peg$otherExpectation(\"item\");\n      var peg$e2 = peg$anyExpectation();\n      var peg$e3 = peg$otherExpectation(\"equation\");\n      var peg$e4 = peg$otherExpectation(\"trailing comment\");\n      var peg$e5 = peg$otherExpectation(\"comment only line\");\n      var peg$e6 = peg$otherExpectation(\"non-var token\");\n      var peg$e7 = peg$otherExpectation(\"token\");\n      var peg$e8 = peg$otherExpectation(\"same line comment\");\n      var peg$e9 = peg$otherExpectation(\"own line comment\");\n      var peg$e10 = peg$otherExpectation(\",\");\n      var peg$e11 = peg$otherExpectation(\"@\");\n      var peg$e12 = peg$otherExpectation(\"variable token\");\n      var peg$e13 = peg$otherExpectation(\"+/-\");\n      var peg$e14 = peg$otherExpectation(\"=\");\n      var peg$f0 = function(a, b) {\n        return a.concat(b ? b : []);\n      };\n      var peg$f1 = function() {\n        return [];\n      };\n      var peg$f2 = function(a, b, c) {\n        return a.concat(b, c);\n      };\n      var peg$f3 = function(op, a, b, c) {\n        return { type: \"item\", op, variable: b, content: a.concat(b, c) };\n      };\n      var peg$f4 = function(op, a) {\n        return { type: \"item\", op, variable: null, content: a };\n      };\n      var peg$f5 = function(line, sep, comment) {\n        return { ...line, sep: [].concat(sep), trailingComment: comment };\n      };\n      var peg$f6 = function(line, comment) {\n        return { ...line, trailingComment: comment };\n      };\n      var peg$f7 = function(eq, ann) {\n        return {\n          type: \"line\",\n          equation: eq,\n          annotation: ann,\n          sep: null\n        };\n      };\n      var peg$f8 = function(at, ann) {\n        return at ? { type: \"annotation\", marker: at, content: ann } : null;\n      };\n      var peg$f9 = function(left, eq, right) {\n        return { type: \"equation\", left, right, equals: eq };\n      };\n      var peg$f10 = function(x) {\n        return x;\n      };\n      var peg$f11 = function(x) {\n        return {\n          type: \"line\",\n          trailingComment: x\n        };\n      };\n      var peg$f12 = function(v, s) {\n        return [v].concat(s ? s : []);\n      };\n      var peg$f13 = function(t) {\n        return t;\n      };\n      var peg$f14 = function(x) {\n        return x;\n      };\n      var peg$f15 = function(x) {\n        return x;\n      };\n      var peg$f16 = function(tok) {\n        return options.isSameLineComment(tok);\n      };\n      var peg$f17 = function(tok) {\n        return tok;\n      };\n      var peg$f18 = function(tok) {\n        return options.isOwnLineComment(tok);\n      };\n      var peg$f19 = function(tok) {\n        return tok;\n      };\n      var peg$f20 = function(tok) {\n        return options.isWhitespace(tok);\n      };\n      var peg$f21 = function(tok) {\n        return tok;\n      };\n      var peg$f22 = function(tok) {\n        return options.isSep(tok);\n      };\n      var peg$f23 = function(tok) {\n        return tok;\n      };\n      var peg$f24 = function(tok) {\n        return options.isAt(tok);\n      };\n      var peg$f25 = function(tok) {\n        return tok;\n      };\n      var peg$f26 = function(tok) {\n        return options.isVar(tok);\n      };\n      var peg$f27 = function(tok) {\n        return tok;\n      };\n      var peg$f28 = function(tok) {\n        return options.isOperation(tok);\n      };\n      var peg$f29 = function(tok) {\n        return tok;\n      };\n      var peg$f30 = function(tok) {\n        return options.isEquals(tok);\n      };\n      var peg$f31 = function(tok) {\n        return tok;\n      };\n      var peg$f32 = function(tok) {\n        return options.isSubscript(tok);\n      };\n      var peg$f33 = function(tok) {\n        return tok;\n      };\n      var peg$currPos = 0;\n      var peg$savedPos = 0;\n      var peg$posDetailsCache = [{ line: 1, column: 1 }];\n      var peg$maxFailPos = 0;\n      var peg$maxFailExpected = [];\n      var peg$silentFails = 0;\n      var peg$result;\n      if (\"startRule\" in options) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n          throw new Error(`Can't start parsing from rule \"` + options.startRule + '\".');\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n      }\n      function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n      }\n      function offset() {\n        return peg$savedPos;\n      }\n      function range() {\n        return {\n          source: peg$source,\n          start: peg$savedPos,\n          end: peg$currPos\n        };\n      }\n      function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n      }\n      function expected(description, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError(\n          [peg$otherExpectation(description)],\n          input.substring(peg$savedPos, peg$currPos),\n          location2\n        );\n      }\n      function error(message, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location2);\n      }\n      function peg$literalExpectation(text2, ignoreCase) {\n        return { type: \"literal\", text: text2, ignoreCase };\n      }\n      function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts, inverted, ignoreCase };\n      }\n      function peg$anyExpectation() {\n        return { type: \"any\" };\n      }\n      function peg$endExpectation() {\n        return { type: \"end\" };\n      }\n      function peg$otherExpectation(description) {\n        return { type: \"other\", description };\n      }\n      function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n          return details;\n        } else {\n          p = pos - 1;\n          while (!peg$posDetailsCache[p]) {\n            p--;\n          }\n          details = peg$posDetailsCache[p];\n          details = {\n            line: details.line,\n            column: details.column\n          };\n          while (p < pos) {\n            if (input.charCodeAt(p) === 10) {\n              details.line++;\n              details.column = 1;\n            } else {\n              details.column++;\n            }\n            p++;\n          }\n          peg$posDetailsCache[pos] = details;\n          return details;\n        }\n      }\n      function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n          source: peg$source,\n          start: {\n            offset: startPos,\n            line: startPosDetails.line,\n            column: startPosDetails.column\n          },\n          end: {\n            offset: endPos,\n            line: endPosDetails.line,\n            column: endPosDetails.column\n          }\n        };\n      }\n      function peg$fail(expected2) {\n        if (peg$currPos < peg$maxFailPos) {\n          return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n          peg$maxFailPos = peg$currPos;\n          peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected2);\n      }\n      function peg$buildSimpleError(message, location2) {\n        return new peg$SyntaxError(message, null, null, location2);\n      }\n      function peg$buildStructuredError(expected2, found, location2) {\n        return new peg$SyntaxError(\n          peg$SyntaxError.buildMessage(expected2, found),\n          expected2,\n          found,\n          location2\n        );\n      }\n      function peg$parsebody() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsecomment_only_line();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseline_with_sep();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parsepartial_line_with_comment();\n          }\n        }\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsecomment_only_line();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parseline_with_sep();\n            if (s2 === peg$FAILED) {\n              s2 = peg$parsepartial_line_with_comment();\n            }\n          }\n        }\n        s2 = peg$parseline_without_sep();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseEOL();\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f0(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseEOL();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f1();\n          }\n          s0 = s1;\n        }\n        return s0;\n      }\n      function peg$parsepartial_item() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parse_();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parse_();\n        }\n        s2 = [];\n        s3 = peg$parsenon_var_token();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsenon_var_token();\n        }\n        s3 = [];\n        s4 = peg$parse_();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parse_();\n        }\n        s4 = peg$parsevar();\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parse_();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parse_();\n          }\n          s6 = [];\n          s7 = peg$parsetoken();\n          while (s7 !== peg$FAILED) {\n            s6.push(s7);\n            s7 = peg$parsetoken();\n          }\n          s7 = [];\n          s8 = peg$parse_();\n          while (s8 !== peg$FAILED) {\n            s7.push(s8);\n            s8 = peg$parse_();\n          }\n          peg$savedPos = s0;\n          s0 = peg$f2(s2, s4, s6);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        return s0;\n      }\n      function peg$parseitem() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parseoperation();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        s2 = [];\n        s3 = peg$parse_();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parse_();\n        }\n        s3 = [];\n        s4 = peg$parsenon_var_token();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsenon_var_token();\n        }\n        s4 = [];\n        s5 = peg$parse_();\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parse_();\n        }\n        s5 = peg$parsevar();\n        if (s5 !== peg$FAILED) {\n          s6 = [];\n          s7 = peg$parse_();\n          while (s7 !== peg$FAILED) {\n            s6.push(s7);\n            s7 = peg$parse_();\n          }\n          s7 = [];\n          s8 = peg$parsetoken();\n          while (s8 !== peg$FAILED) {\n            s7.push(s8);\n            s8 = peg$parsetoken();\n          }\n          s8 = [];\n          s9 = peg$parse_();\n          while (s9 !== peg$FAILED) {\n            s8.push(s9);\n            s9 = peg$parse_();\n          }\n          peg$savedPos = s0;\n          s0 = peg$f3(s1, s3, s5, s7);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseoperation();\n          if (s1 === peg$FAILED) {\n            s1 = null;\n          }\n          s2 = [];\n          s3 = peg$parse_();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parse_();\n          }\n          s3 = [];\n          s4 = peg$parsenon_var_token();\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parsenon_var_token();\n            }\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$parse_();\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$parse_();\n            }\n            peg$savedPos = s0;\n            s0 = peg$f4(s1, s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e1);\n          }\n        }\n        return s0;\n      }\n      function peg$parseline_with_sep() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$parseline_without_sep();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsesep();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsetrailing_comment();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            peg$savedPos = s0;\n            s0 = peg$f5(s1, s2, s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsepartial_line_with_comment() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$parseline_without_sep();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsetrailing_comment();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f6(s1, s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseline_without_sep() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        peg$silentFails++;\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e2);\n          }\n        }\n        peg$silentFails--;\n        if (s2 !== peg$FAILED) {\n          peg$currPos = s1;\n          s1 = void 0;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseequation();\n          s3 = peg$parseannotation();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          peg$savedPos = s0;\n          s0 = peg$f7(s2, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseannotation() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$parseat();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parsenon_sep_token();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parsenon_sep_token();\n          }\n          peg$savedPos = s0;\n          s0 = peg$f8(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseequation() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseitem();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parseitem();\n        }\n        s2 = peg$parseequals();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        s3 = [];\n        s4 = peg$parsetoken();\n        if (s4 === peg$FAILED) {\n          s4 = peg$parseoperation();\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsetoken();\n          if (s4 === peg$FAILED) {\n            s4 = peg$parseoperation();\n          }\n        }\n        peg$savedPos = s0;\n        s0 = peg$f9(s1, s2, s3);\n        peg$silentFails--;\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e3);\n        }\n        return s0;\n      }\n      function peg$parsetrailing_comment() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parse_();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parse_();\n        }\n        s2 = peg$parsesame_line_comment();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f10(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e4);\n          }\n        }\n        return s0;\n      }\n      function peg$parsecomment_only_line() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parse_();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parse_();\n        }\n        s2 = peg$parseown_line_comment();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f11(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e5);\n          }\n        }\n        return s0;\n      }\n      function peg$parsevar() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$parsevar_token();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parse_();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parse_();\n          }\n          s3 = peg$parsesubscript();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          peg$savedPos = s0;\n          s0 = peg$f12(s1, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsenon_var_token() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        peg$silentFails++;\n        s2 = peg$parsevar();\n        peg$silentFails--;\n        if (s2 === peg$FAILED) {\n          s1 = void 0;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsetoken();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f13(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e6);\n          }\n        }\n        return s0;\n      }\n      function peg$parsenon_sep_token() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        peg$silentFails++;\n        s2 = peg$parsesep();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsetrailing_comment();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parseown_line_comment();\n          }\n        }\n        peg$silentFails--;\n        if (s2 === peg$FAILED) {\n          s1 = void 0;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e2);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f14(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsetoken() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        peg$silentFails++;\n        s2 = peg$parsesep();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseat();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parseoperation();\n            if (s2 === peg$FAILED) {\n              s2 = peg$parseequals();\n              if (s2 === peg$FAILED) {\n                s2 = peg$parsetrailing_comment();\n                if (s2 === peg$FAILED) {\n                  s2 = peg$parseown_line_comment();\n                }\n              }\n            }\n          }\n        }\n        peg$silentFails--;\n        if (s2 === peg$FAILED) {\n          s1 = void 0;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e2);\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f15(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e7);\n          }\n        }\n        return s0;\n      }\n      function peg$parsesame_line_comment() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e2);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f16(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f17(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e8);\n          }\n        }\n        return s0;\n      }\n      function peg$parseown_line_comment() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e2);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f18(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f19(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e9);\n          }\n        }\n        return s0;\n      }\n      function peg$parse_() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e2);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f20(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f21(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsesep() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e2);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f22(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f23(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e10);\n          }\n        }\n        return s0;\n      }\n      function peg$parseat() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e2);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f24(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f25(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e11);\n          }\n        }\n        return s0;\n      }\n      function peg$parsevar_token() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e2);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f26(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f27(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e12);\n          }\n        }\n        return s0;\n      }\n      function peg$parseoperation() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parse_();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parse_();\n        }\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e2);\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parse_();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parse_();\n          }\n          peg$savedPos = peg$currPos;\n          s4 = peg$f28(s2);\n          if (s4) {\n            s4 = void 0;\n          } else {\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f29(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e13);\n          }\n        }\n        return s0;\n      }\n      function peg$parseequals() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e2);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f30(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f31(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e14);\n          }\n        }\n        return s0;\n      }\n      function peg$parsesubscript() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e2);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f32(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f33(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseEOL() {\n        var s0, s1;\n        s0 = peg$currPos;\n        peg$silentFails++;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e2);\n          }\n        }\n        peg$silentFails--;\n        if (s1 === peg$FAILED) {\n          s0 = void 0;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      if (!options.isWhitespace) {\n        try {\n          Object.assign(options, {\n            isSep: (node) => node.type === \"string\" && node.content === \",\",\n            isVar: (node) => node.type === \"string\" && node.content.match(/[a-zA-Z]/),\n            isOperation: (node) => node.type === \"string\" && node.content.match(/[+-]/),\n            isEquals: (node) => node.type === \"string\" && node.content === \"=\",\n            isAt: (node) => node.type === \"string\" && node.content === \"@\",\n            isSubscript: (node) => node.content === \"_\",\n            isWhitespace: (node) => node.type === \"whitespace\",\n            isSameLineComment: (node) => node.type === \"comment\" && node.sameline,\n            isOwnLineComment: (node) => node.type === \"comment\" && !node.sameline\n          });\n        } catch (e) {\n          console.warn(\"Error when initializing parser\", e);\n        }\n      }\n      peg$result = peg$startRuleFunction();\n      if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n      } else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n          peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(\n          peg$maxFailExpected,\n          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n          peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n        );\n      }\n    }\n    return {\n      SyntaxError: peg$SyntaxError,\n      parse: peg$parse\n    };\n  }()\n);\n\n// grammars/tex-glue.pegjs\nvar tex_glue_default = (\n  // Generated by Peggy 2.0.1.\n  //\n  // https://peggyjs.org/\n  function() {\n    \"use strict\";\n    function peg$subclass(child, parent) {\n      function C() {\n        this.constructor = child;\n      }\n      C.prototype = parent.prototype;\n      child.prototype = new C();\n    }\n    function peg$SyntaxError(message, expected, found, location) {\n      var self = Error.call(this, message);\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n      }\n      self.expected = expected;\n      self.found = found;\n      self.location = location;\n      self.name = \"SyntaxError\";\n      return self;\n    }\n    peg$subclass(peg$SyntaxError, Error);\n    function peg$padEnd(str, targetLength, padString) {\n      padString = padString || \" \";\n      if (str.length > targetLength) {\n        return str;\n      }\n      targetLength -= str.length;\n      padString += padString.repeat(targetLength);\n      return str + padString.slice(0, targetLength);\n    }\n    peg$SyntaxError.prototype.format = function(sources) {\n      var str = \"Error: \" + this.message;\n      if (this.location) {\n        var src = null;\n        var k;\n        for (k = 0; k < sources.length; k++) {\n          if (sources[k].source === this.location.source) {\n            src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n            break;\n          }\n        }\n        var s = this.location.start;\n        var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n        if (src) {\n          var e = this.location.end;\n          var filler = peg$padEnd(\"\", s.line.toString().length, \" \");\n          var line = src[s.line - 1];\n          var last = s.line === e.line ? e.column : line.length + 1;\n          var hatLen = last - s.column || 1;\n          str += \"\\n --> \" + loc + \"\\n\" + filler + \" |\\n\" + s.line + \" | \" + line + \"\\n\" + filler + \" | \" + peg$padEnd(\"\", s.column - 1, \" \") + peg$padEnd(\"\", hatLen, \"^\");\n        } else {\n          str += \"\\n at \" + loc;\n        }\n      }\n      return str;\n    };\n    peg$SyntaxError.buildMessage = function(expected, found) {\n      var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return '\"' + literalEscape(expectation.text) + '\"';\n        },\n        class: function(expectation) {\n          var escapedParts = expectation.parts.map(function(part) {\n            return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n          });\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts.join(\"\") + \"]\";\n        },\n        any: function() {\n          return \"any character\";\n        },\n        end: function() {\n          return \"end of input\";\n        },\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n      function hex(ch) {\n        return ch.charCodeAt(0).toString(16).toUpperCase();\n      }\n      function literalEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"').replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function classEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function describeExpectation(expectation) {\n        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n      }\n      function describeExpected(expected2) {\n        var descriptions = expected2.map(describeExpectation);\n        var i, j;\n        descriptions.sort();\n        if (descriptions.length > 0) {\n          for (i = 1, j = 1; i < descriptions.length; i++) {\n            if (descriptions[i - 1] !== descriptions[i]) {\n              descriptions[j] = descriptions[i];\n              j++;\n            }\n          }\n          descriptions.length = j;\n        }\n        switch (descriptions.length) {\n          case 1:\n            return descriptions[0];\n          case 2:\n            return descriptions[0] + \" or \" + descriptions[1];\n          default:\n            return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n        }\n      }\n      function describeFound(found2) {\n        return found2 ? '\"' + literalEscape(found2) + '\"' : \"end of input\";\n      }\n      return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    function peg$parse(input, options) {\n      options = options !== void 0 ? options : {};\n      var peg$FAILED = {};\n      var peg$source = options.grammarSource;\n      var peg$startRuleFunctions = { root: peg$parseroot };\n      var peg$startRuleFunction = peg$parseroot;\n      var peg$c0 = \"plus\";\n      var peg$c1 = \"minus\";\n      var peg$c2 = \"pt\";\n      var peg$c3 = \"mm\";\n      var peg$c4 = \"cm\";\n      var peg$c5 = \"in\";\n      var peg$c6 = \"ex\";\n      var peg$c7 = \"em\";\n      var peg$c8 = \"bp\";\n      var peg$c9 = \"pc\";\n      var peg$c10 = \"dd\";\n      var peg$c11 = \"cc\";\n      var peg$c12 = \"nd\";\n      var peg$c13 = \"nc\";\n      var peg$c14 = \"sp\";\n      var peg$c15 = \"filll\";\n      var peg$c16 = \"fill\";\n      var peg$c17 = \"fil\";\n      var peg$c18 = \".\";\n      var peg$c19 = \"+\";\n      var peg$c20 = \"-\";\n      var peg$r0 = /^[0-9]/;\n      var peg$e0 = peg$anyExpectation();\n      var peg$e1 = peg$literalExpectation(\"plus\", false);\n      var peg$e2 = peg$literalExpectation(\"minus\", false);\n      var peg$e3 = peg$literalExpectation(\"pt\", false);\n      var peg$e4 = peg$literalExpectation(\"mm\", false);\n      var peg$e5 = peg$literalExpectation(\"cm\", false);\n      var peg$e6 = peg$literalExpectation(\"in\", false);\n      var peg$e7 = peg$literalExpectation(\"ex\", false);\n      var peg$e8 = peg$literalExpectation(\"em\", false);\n      var peg$e9 = peg$literalExpectation(\"bp\", false);\n      var peg$e10 = peg$literalExpectation(\"pc\", false);\n      var peg$e11 = peg$literalExpectation(\"dd\", false);\n      var peg$e12 = peg$literalExpectation(\"cc\", false);\n      var peg$e13 = peg$literalExpectation(\"nd\", false);\n      var peg$e14 = peg$literalExpectation(\"nc\", false);\n      var peg$e15 = peg$literalExpectation(\"sp\", false);\n      var peg$e16 = peg$literalExpectation(\"filll\", false);\n      var peg$e17 = peg$literalExpectation(\"fill\", false);\n      var peg$e18 = peg$literalExpectation(\"fil\", false);\n      var peg$e19 = peg$otherExpectation(\"number\");\n      var peg$e20 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n      var peg$e21 = peg$literalExpectation(\".\", false);\n      var peg$e22 = peg$literalExpectation(\"+\", false);\n      var peg$e23 = peg$literalExpectation(\"-\", false);\n      var peg$f0 = function(b, st, sh) {\n        return {\n          type: \"glue\",\n          fixed: b,\n          stretchable: st,\n          shrinkable: sh,\n          position: location()\n        };\n      };\n      var peg$f1 = function(glue) {\n        return glue;\n      };\n      var peg$f2 = function(n, u) {\n        return { type: \"dim\", value: n, unit: u };\n      };\n      var peg$f3 = function(n, u) {\n        return { type: \"dim\", value: n, unit: u };\n      };\n      var peg$f4 = function(n, u) {\n        return { type: \"dim\", value: n, unit: u };\n      };\n      var peg$f5 = function(n) {\n        return parseFloat(n);\n      };\n      var peg$currPos = 0;\n      var peg$savedPos = 0;\n      var peg$posDetailsCache = [{ line: 1, column: 1 }];\n      var peg$maxFailPos = 0;\n      var peg$maxFailExpected = [];\n      var peg$silentFails = 0;\n      var peg$result;\n      if (\"startRule\" in options) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n          throw new Error(`Can't start parsing from rule \"` + options.startRule + '\".');\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n      }\n      function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n      }\n      function offset() {\n        return peg$savedPos;\n      }\n      function range() {\n        return {\n          source: peg$source,\n          start: peg$savedPos,\n          end: peg$currPos\n        };\n      }\n      function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n      }\n      function expected(description, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError(\n          [peg$otherExpectation(description)],\n          input.substring(peg$savedPos, peg$currPos),\n          location2\n        );\n      }\n      function error(message, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location2);\n      }\n      function peg$literalExpectation(text2, ignoreCase) {\n        return { type: \"literal\", text: text2, ignoreCase };\n      }\n      function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts, inverted, ignoreCase };\n      }\n      function peg$anyExpectation() {\n        return { type: \"any\" };\n      }\n      function peg$endExpectation() {\n        return { type: \"end\" };\n      }\n      function peg$otherExpectation(description) {\n        return { type: \"other\", description };\n      }\n      function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n          return details;\n        } else {\n          p = pos - 1;\n          while (!peg$posDetailsCache[p]) {\n            p--;\n          }\n          details = peg$posDetailsCache[p];\n          details = {\n            line: details.line,\n            column: details.column\n          };\n          while (p < pos) {\n            if (input.charCodeAt(p) === 10) {\n              details.line++;\n              details.column = 1;\n            } else {\n              details.column++;\n            }\n            p++;\n          }\n          peg$posDetailsCache[pos] = details;\n          return details;\n        }\n      }\n      function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n          source: peg$source,\n          start: {\n            offset: startPos,\n            line: startPosDetails.line,\n            column: startPosDetails.column\n          },\n          end: {\n            offset: endPos,\n            line: endPosDetails.line,\n            column: endPosDetails.column\n          }\n        };\n      }\n      function peg$fail(expected2) {\n        if (peg$currPos < peg$maxFailPos) {\n          return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n          peg$maxFailPos = peg$currPos;\n          peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected2);\n      }\n      function peg$buildSimpleError(message, location2) {\n        return new peg$SyntaxError(message, null, null, location2);\n      }\n      function peg$buildStructuredError(expected2, found, location2) {\n        return new peg$SyntaxError(\n          peg$SyntaxError.buildMessage(expected2, found),\n          expected2,\n          found,\n          location2\n        );\n      }\n      function peg$parseroot() {\n        var s0, s1, s2, s3, s4;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parsebase();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsestretchable();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          s4 = peg$parseshrinkable();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          peg$savedPos = s1;\n          s1 = peg$f0(s2, s3, s4);\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          if (input.length > peg$currPos) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e0);\n            }\n          }\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (input.length > peg$currPos) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e0);\n              }\n            }\n          }\n          peg$savedPos = s0;\n          s0 = peg$f1(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsebase() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$parsenumber();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseunit();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f2(s1, s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsestretchable() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 4) === peg$c0) {\n          s1 = peg$c0;\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e1);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsenumber();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parserubber_unit();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f3(s2, s3);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseshrinkable() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 5) === peg$c1) {\n          s1 = peg$c1;\n          peg$currPos += 5;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e2);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsenumber();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parserubber_unit();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f4(s2, s3);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseunit() {\n        var s0;\n        if (input.substr(peg$currPos, 2) === peg$c2) {\n          s0 = peg$c2;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c3) {\n            s0 = peg$c3;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e4);\n            }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c4) {\n              s0 = peg$c4;\n              peg$currPos += 2;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e5);\n              }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 2) === peg$c5) {\n                s0 = peg$c5;\n                peg$currPos += 2;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e6);\n                }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c6) {\n                  s0 = peg$c6;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$e7);\n                  }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 2) === peg$c7) {\n                    s0 = peg$c7;\n                    peg$currPos += 2;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$e8);\n                    }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 2) === peg$c8) {\n                      s0 = peg$c8;\n                      peg$currPos += 2;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$e9);\n                      }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 2) === peg$c9) {\n                        s0 = peg$c9;\n                        peg$currPos += 2;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                          peg$fail(peg$e10);\n                        }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 2) === peg$c10) {\n                          s0 = peg$c10;\n                          peg$currPos += 2;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) {\n                            peg$fail(peg$e11);\n                          }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 2) === peg$c11) {\n                            s0 = peg$c11;\n                            peg$currPos += 2;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                              peg$fail(peg$e12);\n                            }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 2) === peg$c12) {\n                              s0 = peg$c12;\n                              peg$currPos += 2;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) {\n                                peg$fail(peg$e13);\n                              }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 2) === peg$c13) {\n                                s0 = peg$c13;\n                                peg$currPos += 2;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                  peg$fail(peg$e14);\n                                }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 2) === peg$c14) {\n                                  s0 = peg$c14;\n                                  peg$currPos += 2;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) {\n                                    peg$fail(peg$e15);\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return s0;\n      }\n      function peg$parserubber_unit() {\n        var s0;\n        s0 = peg$parseunit();\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 5) === peg$c15) {\n            s0 = peg$c15;\n            peg$currPos += 5;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e16);\n            }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 4) === peg$c16) {\n              s0 = peg$c16;\n              peg$currPos += 4;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e17);\n              }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3) === peg$c17) {\n                s0 = peg$c17;\n                peg$currPos += 3;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e18);\n                }\n              }\n            }\n          }\n        }\n        return s0;\n      }\n      function peg$parsenumber() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$currPos;\n        s3 = peg$parsesign();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        s4 = peg$currPos;\n        s5 = [];\n        if (peg$r0.test(input.charAt(peg$currPos))) {\n          s6 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e20);\n          }\n        }\n        while (s6 !== peg$FAILED) {\n          s5.push(s6);\n          if (peg$r0.test(input.charAt(peg$currPos))) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e20);\n            }\n          }\n        }\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s6 = peg$c18;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e21);\n          }\n        }\n        if (s6 !== peg$FAILED) {\n          s7 = [];\n          if (peg$r0.test(input.charAt(peg$currPos))) {\n            s8 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s8 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e20);\n            }\n          }\n          if (s8 !== peg$FAILED) {\n            while (s8 !== peg$FAILED) {\n              s7.push(s8);\n              if (peg$r0.test(input.charAt(peg$currPos))) {\n                s8 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e20);\n                }\n              }\n            }\n          } else {\n            s7 = peg$FAILED;\n          }\n          if (s7 !== peg$FAILED) {\n            s5 = [s5, s6, s7];\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 === peg$FAILED) {\n          s4 = [];\n          if (peg$r0.test(input.charAt(peg$currPos))) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e20);\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              if (peg$r0.test(input.charAt(peg$currPos))) {\n                s5 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e20);\n                }\n              }\n            }\n          } else {\n            s4 = peg$FAILED;\n          }\n        }\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = input.substring(s1, peg$currPos);\n        } else {\n          s1 = s2;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f5(s1);\n        }\n        s0 = s1;\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e19);\n          }\n        }\n        return s0;\n      }\n      function peg$parsesign() {\n        var s0;\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s0 = peg$c19;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e22);\n          }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s0 = peg$c20;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e23);\n            }\n          }\n        }\n        return s0;\n      }\n      function peg$parseEOL() {\n        var s0, s1;\n        s0 = peg$currPos;\n        peg$silentFails++;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        peg$silentFails--;\n        if (s1 === peg$FAILED) {\n          s0 = void 0;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      peg$result = peg$startRuleFunction();\n      if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n      } else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n          peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(\n          peg$maxFailExpected,\n          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n          peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n        );\n      }\n    }\n    return {\n      SyntaxError: peg$SyntaxError,\n      parse: peg$parse\n    };\n  }()\n);\n\n// grammars/tikz.pegjs\nvar tikz_default = (\n  // Generated by Peggy 2.0.1.\n  //\n  // https://peggyjs.org/\n  function() {\n    \"use strict\";\n    function peg$subclass(child, parent) {\n      function C() {\n        this.constructor = child;\n      }\n      C.prototype = parent.prototype;\n      child.prototype = new C();\n    }\n    function peg$SyntaxError(message, expected, found, location) {\n      var self = Error.call(this, message);\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(self, peg$SyntaxError.prototype);\n      }\n      self.expected = expected;\n      self.found = found;\n      self.location = location;\n      self.name = \"SyntaxError\";\n      return self;\n    }\n    peg$subclass(peg$SyntaxError, Error);\n    function peg$padEnd(str, targetLength, padString) {\n      padString = padString || \" \";\n      if (str.length > targetLength) {\n        return str;\n      }\n      targetLength -= str.length;\n      padString += padString.repeat(targetLength);\n      return str + padString.slice(0, targetLength);\n    }\n    peg$SyntaxError.prototype.format = function(sources) {\n      var str = \"Error: \" + this.message;\n      if (this.location) {\n        var src = null;\n        var k;\n        for (k = 0; k < sources.length; k++) {\n          if (sources[k].source === this.location.source) {\n            src = sources[k].text.split(/\\r\\n|\\n|\\r/g);\n            break;\n          }\n        }\n        var s = this.location.start;\n        var loc = this.location.source + \":\" + s.line + \":\" + s.column;\n        if (src) {\n          var e = this.location.end;\n          var filler = peg$padEnd(\"\", s.line.toString().length, \" \");\n          var line = src[s.line - 1];\n          var last = s.line === e.line ? e.column : line.length + 1;\n          var hatLen = last - s.column || 1;\n          str += \"\\n --> \" + loc + \"\\n\" + filler + \" |\\n\" + s.line + \" | \" + line + \"\\n\" + filler + \" | \" + peg$padEnd(\"\", s.column - 1, \" \") + peg$padEnd(\"\", hatLen, \"^\");\n        } else {\n          str += \"\\n at \" + loc;\n        }\n      }\n      return str;\n    };\n    peg$SyntaxError.buildMessage = function(expected, found) {\n      var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return '\"' + literalEscape(expectation.text) + '\"';\n        },\n        class: function(expectation) {\n          var escapedParts = expectation.parts.map(function(part) {\n            return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n          });\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts.join(\"\") + \"]\";\n        },\n        any: function() {\n          return \"any character\";\n        },\n        end: function() {\n          return \"end of input\";\n        },\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n      function hex(ch) {\n        return ch.charCodeAt(0).toString(16).toUpperCase();\n      }\n      function literalEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"').replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function classEscape(s) {\n        return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function describeExpectation(expectation) {\n        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n      }\n      function describeExpected(expected2) {\n        var descriptions = expected2.map(describeExpectation);\n        var i, j;\n        descriptions.sort();\n        if (descriptions.length > 0) {\n          for (i = 1, j = 1; i < descriptions.length; i++) {\n            if (descriptions[i - 1] !== descriptions[i]) {\n              descriptions[j] = descriptions[i];\n              j++;\n            }\n          }\n          descriptions.length = j;\n        }\n        switch (descriptions.length) {\n          case 1:\n            return descriptions[0];\n          case 2:\n            return descriptions[0] + \" or \" + descriptions[1];\n          default:\n            return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n        }\n      }\n      function describeFound(found2) {\n        return found2 ? '\"' + literalEscape(found2) + '\"' : \"end of input\";\n      }\n      return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    function peg$parse(input, options) {\n      options = options !== void 0 ? options : {};\n      var peg$FAILED = {};\n      var peg$source = options.grammarSource;\n      var peg$startRuleFunctions = { path_spec: peg$parsepath_spec, foreach_body: peg$parseforeach_body };\n      var peg$startRuleFunction = peg$parsepath_spec;\n      var peg$e0 = peg$anyExpectation();\n      var peg$e1 = peg$otherExpectation(\"same line comment\");\n      var peg$e2 = peg$otherExpectation(\"own line comment\");\n      var peg$e3 = peg$otherExpectation(\"comment\");\n      var peg$e4 = peg$otherExpectation(\"floating comment\");\n      var peg$e5 = peg$otherExpectation(\"operation\");\n      var peg$e6 = peg$otherExpectation(\"=\");\n      var peg$f0 = function(v) {\n        return v;\n      };\n      var peg$f1 = function(ops) {\n        return { type: \"path_spec\", content: ops };\n      };\n      var peg$f2 = function(c1, op, comment) {\n        return { op, comment };\n      };\n      var peg$f3 = function(c1, ops, c2, body) {\n        const comments = [c1, ...ops.map((x) => x.comment), c2].filter(\n          (x) => x\n        );\n        const attribute = ops.map((x) => x.op.content.content).join(\" \");\n        return {\n          type: \"animation\",\n          comments,\n          attribute,\n          content: body.content\n        };\n      };\n      var peg$f4 = function(start, b) {\n        return { ...b, start, type: \"foreach\" };\n      };\n      var peg$f5 = function(c1, variables, options2, c2, c3, list, c4, command) {\n        const comments = [c1, c2, c3, c4].filter((x) => x);\n        return {\n          type: \"foreach_body\",\n          variables,\n          options: options2 && options2.content,\n          list,\n          command,\n          comments\n        };\n      };\n      var peg$f6 = function(c1, options2, c2, body) {\n        const comments = [c1, c2].filter((x) => x);\n        return {\n          type: \"svg_operation\",\n          options: options2 && options2.content,\n          content: body,\n          comments\n        };\n      };\n      var peg$f7 = function(c1, c2, coord, c3, c4, x) {\n        return { coord: x, comment: c4 };\n      };\n      var peg$f8 = function(c1, c2, coord, c3, a, c5) {\n        const comments = [c1, c2, c3, a && a.comment, c5].filter((x) => x);\n        return {\n          type: \"curve_to\",\n          controls: a ? [coord, a.coord] : [coord],\n          comments\n        };\n      };\n      var peg$f9 = function() {\n        return { type: \"line_to\", command: \"|-\" };\n      };\n      var peg$f10 = function() {\n        return { type: \"line_to\", command: \"-|\" };\n      };\n      var peg$f11 = function() {\n        return { type: \"line_to\", command: \"--\" };\n      };\n      var peg$f12 = function(prefix, content) {\n        return { type: \"coordinate\", content, prefix };\n      };\n      var peg$f13 = function(content) {\n        return { type: \"square_brace_group\", content };\n      };\n      var peg$f14 = function(v) {\n        return { type: \"unknown\", content: v };\n      };\n      var peg$f15 = function(tok) {\n        return options.isSameLineComment(tok);\n      };\n      var peg$f16 = function(tok) {\n        return tok;\n      };\n      var peg$f17 = function(tok) {\n        return options.isOwnLineComment(tok);\n      };\n      var peg$f18 = function(tok) {\n        return tok;\n      };\n      var peg$f19 = function(tok) {\n        return options.isComment(tok);\n      };\n      var peg$f20 = function(tok) {\n        return tok;\n      };\n      var peg$f21 = function(tok) {\n        return options.isWhitespace(tok);\n      };\n      var peg$f22 = function(tok) {\n        return tok;\n      };\n      var peg$f23 = function(c) {\n        return c;\n      };\n      var peg$f24 = function(tok) {\n        return options.isOperation(tok);\n      };\n      var peg$f25 = function(tok) {\n        return { type: \"operation\", content: tok };\n      };\n      var peg$f26 = function(tok) {\n        return options.isChar(tok, \"=\");\n      };\n      var peg$f27 = function(tok) {\n        return tok;\n      };\n      var peg$f28 = function(tok) {\n        return options.isChar(tok, \"[\");\n      };\n      var peg$f29 = function(tok) {\n        return tok;\n      };\n      var peg$f30 = function(tok) {\n        return options.isChar(tok, \"]\");\n      };\n      var peg$f31 = function(tok) {\n        return tok;\n      };\n      var peg$f32 = function(tok) {\n        return options.isChar(tok, \"(\");\n      };\n      var peg$f33 = function(tok) {\n        return tok;\n      };\n      var peg$f34 = function(tok) {\n        return options.isChar(tok, \")\");\n      };\n      var peg$f35 = function(tok) {\n        return tok;\n      };\n      var peg$f36 = function(tok) {\n        return options.isChar(tok, \"+\");\n      };\n      var peg$f37 = function(tok) {\n        return tok;\n      };\n      var peg$f38 = function(tok) {\n        return options.isChar(tok, \"-\");\n      };\n      var peg$f39 = function(tok) {\n        return tok;\n      };\n      var peg$f40 = function(tok) {\n        return options.isChar(tok, \"|\");\n      };\n      var peg$f41 = function(tok) {\n        return tok;\n      };\n      var peg$f42 = function(tok) {\n        return options.isChar(tok, \".\");\n      };\n      var peg$f43 = function(tok) {\n        return tok;\n      };\n      var peg$f44 = function(tok) {\n        return options.isChar(tok, \"controls\");\n      };\n      var peg$f45 = function(tok) {\n        return tok;\n      };\n      var peg$f46 = function(tok) {\n        return options.isChar(tok, \"and\");\n      };\n      var peg$f47 = function(tok) {\n        return tok;\n      };\n      var peg$f48 = function(tok) {\n        return options.isChar(tok, \"svg\");\n      };\n      var peg$f49 = function(tok) {\n        return tok;\n      };\n      var peg$f50 = function(tok) {\n        return options.isGroup(tok);\n      };\n      var peg$f51 = function(tok) {\n        return tok;\n      };\n      var peg$f52 = function(tok) {\n        return options.isAnyMacro(tok);\n      };\n      var peg$f53 = function(tok) {\n        return tok;\n      };\n      var peg$f54 = function(tok) {\n        return options.isChar(tok, \"foreach\");\n      };\n      var peg$f55 = function(tok) {\n        return tok;\n      };\n      var peg$f56 = function(tok) {\n        return options.isMacro(tok, \"foreach\");\n      };\n      var peg$f57 = function(tok) {\n        return tok;\n      };\n      var peg$f58 = function(tok) {\n        return options.isChar(tok, \"in\");\n      };\n      var peg$f59 = function(tok) {\n        return tok;\n      };\n      var peg$f60 = function(tok) {\n        return options.isChar(tok, \":\");\n      };\n      var peg$f61 = function(tok) {\n        return tok;\n      };\n      var peg$currPos = 0;\n      var peg$savedPos = 0;\n      var peg$posDetailsCache = [{ line: 1, column: 1 }];\n      var peg$maxFailPos = 0;\n      var peg$maxFailExpected = [];\n      var peg$silentFails = 0;\n      var peg$result;\n      if (\"startRule\" in options) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n          throw new Error(`Can't start parsing from rule \"` + options.startRule + '\".');\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n      }\n      function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n      }\n      function offset() {\n        return peg$savedPos;\n      }\n      function range() {\n        return {\n          source: peg$source,\n          start: peg$savedPos,\n          end: peg$currPos\n        };\n      }\n      function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n      }\n      function expected(description, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError(\n          [peg$otherExpectation(description)],\n          input.substring(peg$savedPos, peg$currPos),\n          location2\n        );\n      }\n      function error(message, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location2);\n      }\n      function peg$literalExpectation(text2, ignoreCase) {\n        return { type: \"literal\", text: text2, ignoreCase };\n      }\n      function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts, inverted, ignoreCase };\n      }\n      function peg$anyExpectation() {\n        return { type: \"any\" };\n      }\n      function peg$endExpectation() {\n        return { type: \"end\" };\n      }\n      function peg$otherExpectation(description) {\n        return { type: \"other\", description };\n      }\n      function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n          return details;\n        } else {\n          p = pos - 1;\n          while (!peg$posDetailsCache[p]) {\n            p--;\n          }\n          details = peg$posDetailsCache[p];\n          details = {\n            line: details.line,\n            column: details.column\n          };\n          while (p < pos) {\n            if (input.charCodeAt(p) === 10) {\n              details.line++;\n              details.column = 1;\n            } else {\n              details.column++;\n            }\n            p++;\n          }\n          peg$posDetailsCache[pos] = details;\n          return details;\n        }\n      }\n      function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n          source: peg$source,\n          start: {\n            offset: startPos,\n            line: startPosDetails.line,\n            column: startPosDetails.column\n          },\n          end: {\n            offset: endPos,\n            line: endPosDetails.line,\n            column: endPosDetails.column\n          }\n        };\n      }\n      function peg$fail(expected2) {\n        if (peg$currPos < peg$maxFailPos) {\n          return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n          peg$maxFailPos = peg$currPos;\n          peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected2);\n      }\n      function peg$buildSimpleError(message, location2) {\n        return new peg$SyntaxError(message, null, null, location2);\n      }\n      function peg$buildStructuredError(expected2, found, location2) {\n        return new peg$SyntaxError(\n          peg$SyntaxError.buildMessage(expected2, found),\n          expected2,\n          found,\n          location2\n        );\n      }\n      function peg$parsepath_spec() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$currPos;\n        s3 = peg$parsesquare_brace_group();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecoordinate();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parsecurve_to();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseline_to();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parsesvg();\n                if (s3 === peg$FAILED) {\n                  s3 = peg$parseforeach();\n                  if (s3 === peg$FAILED) {\n                    s3 = peg$parseoperation();\n                    if (s3 === peg$FAILED) {\n                      s3 = peg$parsecomment();\n                      if (s3 === peg$FAILED) {\n                        s3 = peg$parseanimation();\n                        if (s3 === peg$FAILED) {\n                          s3 = peg$parseunknown();\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          peg$savedPos = s2;\n          s2 = peg$f0(s3);\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$currPos;\n            s3 = peg$parsesquare_brace_group();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parsecoordinate();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parsecurve_to();\n                if (s3 === peg$FAILED) {\n                  s3 = peg$parseline_to();\n                  if (s3 === peg$FAILED) {\n                    s3 = peg$parsesvg();\n                    if (s3 === peg$FAILED) {\n                      s3 = peg$parseforeach();\n                      if (s3 === peg$FAILED) {\n                        s3 = peg$parseoperation();\n                        if (s3 === peg$FAILED) {\n                          s3 = peg$parsecomment();\n                          if (s3 === peg$FAILED) {\n                            s3 = peg$parseanimation();\n                            if (s3 === peg$FAILED) {\n                              s3 = peg$parseunknown();\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = [];\n              s5 = peg$parse_();\n              while (s5 !== peg$FAILED) {\n                s4.push(s5);\n                s5 = peg$parse_();\n              }\n              peg$savedPos = s2;\n              s2 = peg$f0(s3);\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f1(s1);\n        }\n        s0 = s1;\n        return s0;\n      }\n      function peg$parseanimation() {\n        var s0, s1, s2, s3, s4, s5, s6;\n        s0 = peg$currPos;\n        s1 = peg$parsecolon();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_comment_();\n          s3 = [];\n          s4 = peg$currPos;\n          s5 = peg$parseoperation();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_comment_();\n            peg$savedPos = s4;\n            s4 = peg$f2(s2, s5, s6);\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$currPos;\n              s5 = peg$parseoperation();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_comment_();\n                peg$savedPos = s4;\n                s4 = peg$f2(s2, s5, s6);\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            }\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseequals();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_comment_();\n              s6 = peg$parsegroup();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f3(s2, s3, s5, s6);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseforeach() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$parseforeach_keyword();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseforeach_macro();\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseforeach_body();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f4(s1, s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseforeach_body() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n        s0 = peg$currPos;\n        s1 = peg$parse_comment_();\n        s2 = peg$currPos;\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$currPos;\n        peg$silentFails++;\n        s6 = peg$parsein_keyword();\n        if (s6 === peg$FAILED) {\n          s6 = peg$parsesquare_brace_group();\n        }\n        peg$silentFails--;\n        if (s6 === peg$FAILED) {\n          s5 = void 0;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$e0);\n            }\n          }\n          if (s6 !== peg$FAILED) {\n            s5 = [s5, s6];\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          s5 = peg$currPos;\n          peg$silentFails++;\n          s6 = peg$parsein_keyword();\n          if (s6 === peg$FAILED) {\n            s6 = peg$parsesquare_brace_group();\n          }\n          peg$silentFails--;\n          if (s6 === peg$FAILED) {\n            s5 = void 0;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e0);\n              }\n            }\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        s2 = input.substring(s2, peg$currPos);\n        s3 = peg$parsesquare_brace_group();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        s4 = peg$parse_comment_();\n        s5 = peg$parsein_keyword();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_comment_();\n          s7 = peg$parsegroup();\n          if (s7 === peg$FAILED) {\n            s7 = peg$parsemacro();\n          }\n          if (s7 !== peg$FAILED) {\n            s8 = peg$parse_comment_();\n            s9 = peg$parseforeach();\n            if (s9 === peg$FAILED) {\n              s9 = peg$parsegroup();\n              if (s9 === peg$FAILED) {\n                s9 = peg$parsemacro();\n              }\n            }\n            if (s9 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f5(s1, s2, s3, s4, s6, s7, s8, s9);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsesvg() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        s1 = peg$parsesvg_keyword();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_comment_();\n          s3 = peg$parsesquare_brace_group();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          s4 = peg$parse_comment_();\n          s5 = peg$parsegroup();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f6(s2, s3, s4, s5);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsecurve_to() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n        s0 = peg$currPos;\n        s1 = peg$parsedotdot();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_comment_();\n          s3 = peg$parsecontrols_keyword();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_comment_();\n            s5 = peg$parsecoordinate();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_comment_();\n              s7 = peg$currPos;\n              s8 = peg$parseand_keyword();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parse_comment_();\n                s10 = peg$parsecoordinate();\n                if (s10 !== peg$FAILED) {\n                  peg$savedPos = s7;\n                  s7 = peg$f7(s2, s4, s5, s6, s9, s10);\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              if (s7 === peg$FAILED) {\n                s7 = null;\n              }\n              s8 = peg$parse_comment_();\n              s9 = peg$parsedotdot();\n              if (s9 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f8(s2, s4, s5, s6, s7, s8);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseline_to() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$parsepipe();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseminus();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f9();\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseminus();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsepipe();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f10();\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseminus();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parseminus();\n              if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f11();\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n        return s0;\n      }\n      function peg$parsecoordinate() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$currPos;\n        s3 = peg$parseplus();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseplus();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        s1 = input.substring(s1, peg$currPos);\n        s2 = peg$parseopen_paren();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$currPos;\n          peg$silentFails++;\n          s7 = peg$parseclose_paren();\n          peg$silentFails--;\n          if (s7 === peg$FAILED) {\n            s6 = void 0;\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n          if (s6 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s7 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s7 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e0);\n              }\n            }\n            if (s7 !== peg$FAILED) {\n              s6 = [s6, s7];\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$currPos;\n            peg$silentFails++;\n            s7 = peg$parseclose_paren();\n            peg$silentFails--;\n            if (s7 === peg$FAILED) {\n              s6 = void 0;\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s7 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e0);\n                }\n              }\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          s3 = input.substring(s3, peg$currPos);\n          s4 = peg$parseclose_paren();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f12(s1, s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsesquare_brace_group() {\n        var s0, s1, s2, s3, s4, s5, s6;\n        s0 = peg$currPos;\n        s1 = peg$parseopen_square_brace();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = [];\n          s4 = peg$currPos;\n          s5 = peg$currPos;\n          peg$silentFails++;\n          s6 = peg$parseclose_square_brace();\n          peg$silentFails--;\n          if (s6 === peg$FAILED) {\n            s5 = void 0;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$e0);\n              }\n            }\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n            s5 = peg$currPos;\n            peg$silentFails++;\n            s6 = peg$parseclose_square_brace();\n            peg$silentFails--;\n            if (s6 === peg$FAILED) {\n              s5 = void 0;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s6 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$e0);\n                }\n              }\n              if (s6 !== peg$FAILED) {\n                s5 = [s5, s6];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n          s2 = input.substring(s2, peg$currPos);\n          s3 = peg$parseclose_square_brace();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f13(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsedotdot() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = peg$parsedot();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedot();\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseunknown() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f14(s1);\n        }\n        s0 = s1;\n        return s0;\n      }\n      function peg$parsesame_line_comment() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f15(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f16(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e1);\n          }\n        }\n        return s0;\n      }\n      function peg$parseown_line_comment() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f17(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f18(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e2);\n          }\n        }\n        return s0;\n      }\n      function peg$parsecomment() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f19(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f20(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e3);\n          }\n        }\n        return s0;\n      }\n      function peg$parse_() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f21(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f22(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parse_comment_() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parse_();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parse_();\n        }\n        s2 = peg$parsecomment();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        s3 = [];\n        s4 = peg$parse_();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parse_();\n        }\n        peg$savedPos = s0;\n        s0 = peg$f23(s2);\n        peg$silentFails--;\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$e4);\n        }\n        return s0;\n      }\n      function peg$parseoperation() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f24(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f25(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e5);\n          }\n        }\n        return s0;\n      }\n      function peg$parseequals() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f26(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f27(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e6);\n          }\n        }\n        return s0;\n      }\n      function peg$parseopen_square_brace() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f28(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f29(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseclose_square_brace() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f30(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f31(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseopen_paren() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f32(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f33(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseclose_paren() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f34(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f35(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseplus() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f36(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f37(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseminus() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f38(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f39(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsepipe() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f40(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f41(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsedot() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f42(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f43(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsecontrols_keyword() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f44(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f45(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseand_keyword() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f46(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f47(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsesvg_keyword() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f48(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f49(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsegroup() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f50(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f51(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsemacro() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f52(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f53(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseforeach_keyword() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f54(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f55(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseforeach_macro() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f56(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f57(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsein_keyword() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f58(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f59(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parsecolon() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$f60(s1);\n          if (s2) {\n            s2 = void 0;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f61(s1);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseEOL() {\n        var s0, s1;\n        s0 = peg$currPos;\n        peg$silentFails++;\n        if (input.length > peg$currPos) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$e0);\n          }\n        }\n        peg$silentFails--;\n        if (s1 === peg$FAILED) {\n          s0 = void 0;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      if (!options.isWhitespace) {\n        try {\n          Object.assign(options, {\n            isChar: (node, char) => node.type === \"string\" && node.content === char,\n            isOperation: (node) => node.type === \"string\" && node.content.match(/[a-zA-Z]/),\n            isWhitespace: (node) => node.type === \"whitespace\" || node.type === \"parbreak\",\n            isSameLineComment: (node) => node.type === \"comment\" && node.sameline,\n            isOwnLineComment: (node) => node.type === \"comment\" && !node.sameline,\n            isComment: (node) => node.type === \"comment\",\n            isGroup: (node) => node.type === \"group\",\n            isMacro: (node, name) => node.type === \"macro\" && node.content === name,\n            isAnyMacro: (node) => node.type === \"macro\"\n          });\n        } catch (e) {\n          console.warn(\"Error when initializing parser\", e);\n        }\n      }\n      peg$result = peg$startRuleFunction();\n      if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n      } else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n          peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(\n          peg$maxFailExpected,\n          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n          peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n        );\n      }\n    }\n    return {\n      SyntaxError: peg$SyntaxError,\n      parse: peg$parse\n    };\n  }()\n);\n\n// libs/pegjs-parsers.ts\nvar LatexPegParser = latex_default;\nvar AlignEnvironmentPegParser = align_environment_default;\nvar ArgSpecPegParser = xparse_argspec_default;\nvar PgfkeysPegParser = pgfkeys_default;\nvar MacroSubstitutionPegParser = macro_substitutions_default;\nvar LigaturesPegParser = ligatures_default;\nvar XColorPegParser = xcolor_expressions_default;\nvar TabularPegParser = tabular_spec_default;\nvar SystemePegParser = systeme_environment_default;\nvar GluePegParser = tex_glue_default;\nvar TikzPegParser = tikz_default;\nexport {\n  AlignEnvironmentPegParser,\n  ArgSpecPegParser,\n  GluePegParser,\n  LatexPegParser,\n  LigaturesPegParser,\n  MacroSubstitutionPegParser,\n  PgfkeysPegParser,\n  SystemePegParser,\n  TabularPegParser,\n  TikzPegParser,\n  XColorPegParser,\n  decorateArrayForPegjs,\n  splitStringsIntoSingleChars\n};\n//# sourceMappingURL=index.js.map\n","// libs/argspec-parser.ts\nimport { ArgSpecPegParser as PegParser } from \"@unified-latex/unified-latex-util-pegjs\";\nfunction getDecorators(node) {\n  let ret = \"\";\n  if (node.noLeadingWhitespace) {\n    ret += \"!\";\n  }\n  return ret;\n}\nfunction printRaw(node, root = false) {\n  if (typeof node === \"string\") {\n    return node;\n  }\n  if (Array.isArray(node)) {\n    const sepToken = root ? \" \" : \"\";\n    return node.map((tok) => printRaw(tok)).join(sepToken);\n  }\n  const decorators = getDecorators(node);\n  const defaultArg = node.defaultArg ? printRaw(node.defaultArg) : \"\";\n  let spec = decorators;\n  const type = node.type;\n  switch (type) {\n    case \"body\":\n      return decorators + \"b\";\n    case \"optionalStar\":\n      return decorators + \"s\";\n    case \"optionalToken\":\n      return spec + \"t\" + node.token;\n    case \"optional\":\n      if (node.openBrace === \"[\" && node.closeBrace === \"]\") {\n        spec += node.defaultArg ? \"O\" : \"o\";\n      } else {\n        spec += node.defaultArg ? \"D\" : \"d\";\n        spec += node.openBrace + node.closeBrace;\n      }\n      return spec + defaultArg;\n    case \"mandatory\":\n      if (node.openBrace === \"{\" && node.closeBrace === \"}\") {\n        spec += \"m\";\n      } else {\n        spec += node.defaultArg ? \"R\" : \"r\";\n        spec += node.openBrace + node.closeBrace;\n      }\n      return spec + defaultArg;\n    case \"embellishment\":\n      spec += node.defaultArg ? \"E\" : \"e\";\n      return spec + \"{\" + printRaw(node.embellishmentTokens) + \"}\" + defaultArg;\n    case \"verbatim\":\n      return spec + \"v\" + node.openBrace;\n    case \"group\":\n      return spec + \"{\" + printRaw(node.content) + \"}\";\n    case \"until\": {\n      const stopTokens = printRaw(node.stopTokens);\n      return stopTokens.length > 1 || stopTokens[0] === \" \" ? `u{${stopTokens}}` : `u${stopTokens}`;\n    }\n    default:\n      const neverType = type;\n      console.warn(`Unknown node type \"${neverType}\" for node`, node);\n      return \"\";\n  }\n}\nvar parseCache = {};\nfunction parse(str = \"\") {\n  parseCache[str] = parseCache[str] || PegParser.parse(str);\n  return parseCache[str];\n}\n\n// libs/argspec-types.ts\nvar argspec_types_exports = {};\nexport {\n  argspec_types_exports as ArgSpecAst,\n  parse,\n  printRaw\n};\n//# sourceMappingURL=index.js.map\n","// libs/builders.ts\nfunction normalizeNode(node) {\n  if (typeof node === \"string\") {\n    return s(node);\n  }\n  return node;\n}\nfunction normalizeArgument(arg2, openMark = \"{\", closeMark = \"}\") {\n  if (arg2 == null) {\n    return { type: \"argument\", content: [], openMark: \"\", closeMark: \"\" };\n  }\n  if (typeof arg2 === \"string\") {\n    return {\n      type: \"argument\",\n      openMark,\n      closeMark,\n      content: [s(arg2)]\n    };\n  }\n  if (arg2.type === \"argument\") {\n    return arg2;\n  }\n  return { type: \"argument\", openMark, closeMark, content: [arg2] };\n}\nfunction normalizeArgumentsList(args2, openMark = \"{\", closeMark = \"}\") {\n  if (args2 == null) {\n    return [];\n  }\n  if (Array.isArray(args2)) {\n    return args2.map((arg2) => normalizeArgument(arg2, openMark, closeMark));\n  }\n  return [normalizeArgument(args2, openMark, closeMark)];\n}\nvar BRACES_MAP = {\n  \"*\": { openMark: \"\", closeMark: \"\" },\n  \"{\": { openMark: \"{\", closeMark: \"}\" },\n  \"[\": { openMark: \"[\", closeMark: \"]\" },\n  \"(\": { openMark: \"(\", closeMark: \")\" },\n  \"<\": { openMark: \"<\", closeMark: \">\" }\n};\nvar CLOSE_BRACES = new Set(\n  Object.values(BRACES_MAP).map((x) => x.closeMark).filter((x) => x)\n);\nfunction bracesToOpenAndCloseMarks(braces) {\n  const ret = [];\n  for (const char of braces.split(\"\")) {\n    if (CLOSE_BRACES.has(char)) {\n      continue;\n    }\n    const braces2 = BRACES_MAP[char];\n    if (braces2 == null) {\n      throw new Error(`Unknown open/close mark type \"${char}\"`);\n    }\n    braces2;\n    ret.push(braces2);\n  }\n  return ret;\n}\nfunction args(args2, special) {\n  if (!Array.isArray(args2)) {\n    args2 = [args2];\n  }\n  if (special == null ? void 0 : special.braces) {\n    const braces = bracesToOpenAndCloseMarks(special.braces);\n    if (braces.length !== args2.length) {\n      throw new Error(\n        `There is a difference between the number of supplied braces and the number of supplied arguments. ${args2.length} supplied with braces signature ${special.braces}`\n      );\n    }\n    return args2.map(\n      (arg2, i) => normalizeArgument(arg2, braces[i].openMark, braces[i].closeMark)\n    );\n  }\n  const openMark = (special == null ? void 0 : special.defaultOpenMark) ?? \"{\";\n  const closeMark = (special == null ? void 0 : special.defaultCloseMark) ?? \"}\";\n  return normalizeArgumentsList(args2, openMark, closeMark);\n}\nfunction arg(args2, special) {\n  if (args2 == null) {\n    return { type: \"argument\", content: [], openMark: \"\", closeMark: \"\" };\n  }\n  if (typeof args2 === \"string\") {\n    args2 = s(args2);\n  }\n  if (!Array.isArray(args2) && args2.type === \"argument\") {\n    return args2;\n  }\n  let openMark = (special == null ? void 0 : special.openMark) ?? \"{\";\n  let closeMark = (special == null ? void 0 : special.closeMark) ?? \"}\";\n  if (special == null ? void 0 : special.braces) {\n    const braces = bracesToOpenAndCloseMarks(special.braces);\n    if (braces[0]) {\n      openMark = braces[0].openMark;\n      closeMark = braces[0].closeMark;\n    }\n  }\n  if (!Array.isArray(args2)) {\n    args2 = [args2];\n  }\n  return { type: \"argument\", content: args2, openMark, closeMark };\n}\nfunction m(name, marcoArgs, special) {\n  const args2 = normalizeArgumentsList(marcoArgs);\n  const escapeToken = special == null ? void 0 : special.escapeToken;\n  const ret = { type: \"macro\", content: name };\n  if (args2.length > 0) {\n    ret.args = args2;\n  }\n  if (escapeToken != null) {\n    ret.escapeToken = escapeToken;\n  }\n  return ret;\n}\nfunction s(value) {\n  if (typeof value === \"string\") {\n    return { type: \"string\", content: value };\n  }\n  return value;\n}\nfunction env(name, body, envArgs, special) {\n  if (!Array.isArray(body)) {\n    body = [body];\n  }\n  const args2 = normalizeArgumentsList(envArgs, \"[\", \"]\");\n  const ret = {\n    type: \"environment\",\n    env: name,\n    content: body.map(normalizeNode)\n  };\n  if (args2.length > 0) {\n    ret.args = args2;\n  }\n  return ret;\n}\nvar SP = { type: \"whitespace\" };\nexport {\n  SP,\n  arg,\n  args,\n  env,\n  m,\n  s\n};\n//# sourceMappingURL=index.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = {\n  END_WORD: '$',\n  END_WORD_REPLACER: '9a219a89-91cd-42e2-abd5-eb113af08ca8',\n  PERMS_MIN_LEN: 2\n};\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = append;\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction append(trie, letter, index, array) {\n  var isEndWordLetter = letter === _config2.default.END_WORD;\n  var isLastLetter = index === array.length - 1;\n\n  if (isEndWordLetter && !isLastLetter) {\n    trie[_config2.default.END_WORD] = 1;\n    trie[_config2.default.END_WORD_REPLACER] = {};\n    trie = trie[_config2.default.END_WORD_REPLACER];\n  } else {\n    trie[letter] = trie[letter] || {};\n    trie = trie[letter];\n  }\n\n  if (isLastLetter) {\n    trie[_config2.default.END_WORD] = 1;\n  }\n\n  return trie;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = create;\n\nvar _append = require('./append');\n\nvar _append2 = _interopRequireDefault(_append);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction create(input) {\n  if (!Array.isArray(input)) {\n    throw 'Expected parameter Array, received ' + (typeof input === 'undefined' ? 'undefined' : _typeof(input));\n  }\n\n  var trie = input.reduce(function (accumulator, item) {\n    item.toLowerCase().split('').reduce(_append2.default, accumulator);\n\n    return accumulator;\n  }, {});\n\n  return trie;\n};\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = {\n  objectCopy: function objectCopy(obj) {\n    if (typeof obj === 'undefined') {\n      return {};\n    }\n    return JSON.parse(JSON.stringify(obj));\n  },\n  stringify: function stringify(obj) {\n    var spacer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n\n    if (typeof obj === 'undefined') {\n      return '';\n    }\n    return JSON.stringify(obj, null, spacer);\n  }\n};\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = checkPrefix;\n\nvar _utils = require('./utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction checkPrefix(prefixNode, prefix) {\n  var input = prefix.toLowerCase().split('');\n  var prefixFound = input.every(function (letter, index) {\n    if (!prefixNode[letter]) {\n      return false;\n    }\n    return prefixNode = prefixNode[letter];\n  });\n\n  return {\n    prefixFound: prefixFound,\n    prefixNode: prefixNode\n  };\n};\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = recursePrefix;\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// sort items as they're being found\n// to prevent slow .sort() in NodeJs\nvar pushInOrder = function pushInOrder(word, prefixes) {\n  var i = 0;\n\n  while (i < prefixes.length) {\n    if (word < prefixes[i]) {\n      break;\n    }\n    i += 1;\n  }\n\n  prefixes.splice(i, 0, word);\n\n  return prefixes;\n};\n\nfunction recursePrefix(node, prefix, sorted) {\n  var prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n  var word = prefix;\n\n  for (var branch in node) {\n    var currentLetter = branch;\n    if (branch === _config2.default.END_WORD && typeof node[branch] === 'number') {\n      if (sorted) {\n        pushInOrder(word, prefixes);\n      } else {\n        prefixes.push(word);\n      }\n      word = '';\n    } else if (branch === _config2.default.END_WORD_REPLACER) {\n      currentLetter = _config2.default.END_WORD;\n    }\n    recursePrefix(node[branch], prefix + currentLetter, sorted, prefixes);\n  }\n\n  return prefixes;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = recurseRandomWord;\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction recurseRandomWord(node, prefix) {\n  var word = prefix;\n  var branches = Object.keys(node);\n  var branch = branches[Math.floor(Math.random() * branches.length)];\n\n  if (branch === _config2.default.END_WORD) {\n    return word;\n  }\n  return recurseRandomWord(node[branch], prefix + branch);\n};\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = permutations;\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction permutations(letters, trie) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    type: 'anagram'\n  };\n\n  if (typeof letters !== 'string') {\n    throw 'Permutations expects string letters, received ' + (typeof letters === 'undefined' ? 'undefined' : _typeof(letters));\n  }\n\n  var words = [];\n\n  var permute = function permute(word, node) {\n    var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n    var wordIsEmpty = word.length === 0;\n    var wordFound = words.indexOf(prefix) !== -1;\n    var endWordFound = node[_config2.default.END_WORD] === 1;\n\n    if (wordIsEmpty && endWordFound && !wordFound) {\n      words.push(prefix);\n    }\n\n    for (var i = 0, len = word.length; i < len; i++) {\n      var letter = word[i];\n\n      if (opts.type === 'sub-anagram') {\n        if (endWordFound && !(words.indexOf(prefix) !== -1)) {\n          words.push(prefix);\n        }\n      }\n\n      if (node[letter]) {\n        var remaining = word.substring(0, i) + word.substring(i + 1, len);\n        permute(remaining, node[letter], prefix + letter, words);\n      }\n    }\n\n    return words.sort();\n  };\n\n  return permute(letters, trie);\n};\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = function (input) {\n  if (!Array.isArray(input)) {\n    throw 'Expected parameter Array, received ' + (typeof input === 'undefined' ? 'undefined' : _typeof(input));\n  }\n\n  var trie = (0, _create2.default)([].concat(_toConsumableArray(input)));\n\n  return {\n    /**\n     * Get the generated raw trie object\n    */\n    tree: function tree() {\n      return trie;\n    },\n\n\n    /**\n     * Get a string representation of the trie\n    */\n    dump: function dump() {\n      var spacer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      return _utils2.default.stringify(trie, spacer);\n    },\n\n\n    /**\n     * Add a new word to the trie\n     */\n    addWord: function addWord(word) {\n      if (typeof word !== 'string' || word === '') {\n        throw 'Expected parameter string, received ' + (typeof word === 'undefined' ? 'undefined' : _typeof(word));\n      }\n\n      var reducer = function reducer() {\n        return _append2.default.apply(undefined, arguments);\n      };\n\n      var input = word.toLowerCase().split('');\n      input.reduce(reducer, trie);\n\n      return this;\n    },\n\n\n    /**\n     * Remove an existing word from the trie\n     */\n    removeWord: function removeWord(word) {\n      if (typeof word !== 'string' || word === '') {\n        throw 'Expected parameter string, received ' + (typeof word === 'undefined' ? 'undefined' : _typeof(word));\n      }\n\n      var _checkPrefix = (0, _checkPrefix6.default)(trie, word),\n          prefixFound = _checkPrefix.prefixFound,\n          prefixNode = _checkPrefix.prefixNode;\n\n      if (prefixFound) {\n        delete prefixNode[_config2.default.END_WORD];\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Check a prefix is valid\n     * @returns Boolean\n    */\n    isPrefix: function isPrefix(prefix) {\n      if (typeof prefix !== 'string') {\n        throw 'Expected string prefix, received ' + (typeof prefix === 'undefined' ? 'undefined' : _typeof(prefix));\n      }\n\n      var _checkPrefix2 = (0, _checkPrefix6.default)(trie, prefix),\n          prefixFound = _checkPrefix2.prefixFound;\n\n      return prefixFound;\n    },\n\n\n    /**\n    * Get a list of all words in the trie with the given prefix\n    * @returns Array\n    */\n    getPrefix: function getPrefix(strPrefix) {\n      var sorted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (typeof strPrefix !== 'string') {\n        throw 'Expected string prefix, received ' + (typeof strPrefix === 'undefined' ? 'undefined' : _typeof(strPrefix));\n      }\n\n      if (typeof sorted !== 'boolean') {\n        throw 'Expected sort parameter as boolean, received ' + (typeof sorted === 'undefined' ? 'undefined' : _typeof(sorted));\n      }\n\n      if (!this.isPrefix(strPrefix)) {\n        return [];\n      }\n\n      var prefixNode = strPrefix.length ? (0, _checkPrefix6.default)(trie, strPrefix).prefixNode : trie;\n\n      return (0, _recursePrefix2.default)(prefixNode, strPrefix, sorted);\n    },\n\n\n    /**\n    * Get a random word in the trie with the given prefix\n    * @returns Array\n    */\n    getRandomWordWithPrefix: function getRandomWordWithPrefix(strPrefix) {\n      if (typeof strPrefix !== 'string') {\n        throw 'Expected string prefix, received ' + (typeof strPrefix === 'undefined' ? 'undefined' : _typeof(strPrefix));\n      }\n\n      if (!this.isPrefix(strPrefix)) {\n        return '';\n      }\n\n      var _checkPrefix3 = (0, _checkPrefix6.default)(trie, strPrefix),\n          prefixNode = _checkPrefix3.prefixNode;\n\n      return (0, _recurseRandomWord2.default)(prefixNode, strPrefix);\n    },\n\n\n    /**\n    * Count the number of words with the given prefixSearch\n    * @returns Number\n    */\n    countPrefix: function countPrefix(strPrefix) {\n      var prefixes = this.getPrefix(strPrefix);\n\n      return prefixes.length;\n    },\n\n\n    /**\n    * Get all words in the trie\n    * @returns Array\n    */\n    getWords: function getWords() {\n      var sorted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      return this.getPrefix('', sorted);\n    },\n\n\n    /**\n    * Check the existence of a word in the trie\n    * @returns Boolean\n    */\n    hasWord: function hasWord(word) {\n      if (typeof word !== 'string') {\n        throw 'Expected string word, received ' + (typeof word === 'undefined' ? 'undefined' : _typeof(word));\n      }\n\n      var _checkPrefix4 = (0, _checkPrefix6.default)(trie, word),\n          prefixFound = _checkPrefix4.prefixFound,\n          prefixNode = _checkPrefix4.prefixNode;\n\n      if (prefixFound) {\n        return prefixNode[_config2.default.END_WORD] === 1;\n      }\n\n      return false;\n    },\n\n\n    /**\n    * Get a list of valid anagrams that can be made from the given letters\n    * @returns Array\n    */\n    getAnagrams: function getAnagrams(letters) {\n      if (typeof letters !== 'string') {\n        throw 'Anagrams expected string letters, received ' + (typeof letters === 'undefined' ? 'undefined' : _typeof(letters));\n      }\n\n      if (letters.length < PERMS_MIN_LEN) {\n        throw 'getAnagrams expects at least ' + PERMS_MIN_LEN + ' letters';\n      }\n\n      return (0, _permutations2.default)(letters, trie, {\n        type: 'anagram'\n      });\n    },\n\n\n    /**\n    * Get a list of all sub-anagrams that can be made from the given letters\n    * @returns Array\n    */\n    getSubAnagrams: function getSubAnagrams(letters) {\n      if (typeof letters !== 'string') {\n        throw 'Expected string letters, received ' + (typeof letters === 'undefined' ? 'undefined' : _typeof(letters));\n      }\n\n      if (letters.length < PERMS_MIN_LEN) {\n        throw 'getSubAnagrams expects at least ' + PERMS_MIN_LEN + ' letters';\n      }\n\n      return (0, _permutations2.default)(letters, trie, {\n        type: 'sub-anagram'\n      });\n    }\n  };\n};\n\nvar _create = require('./create');\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _append = require('./append');\n\nvar _append2 = _interopRequireDefault(_append);\n\nvar _checkPrefix5 = require('./checkPrefix');\n\nvar _checkPrefix6 = _interopRequireDefault(_checkPrefix5);\n\nvar _recursePrefix = require('./recursePrefix');\n\nvar _recursePrefix2 = _interopRequireDefault(_recursePrefix);\n\nvar _recurseRandomWord = require('./recurseRandomWord');\n\nvar _recurseRandomWord2 = _interopRequireDefault(_recurseRandomWord);\n\nvar _utils = require('./utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _permutations = require('./permutations');\n\nvar _permutations2 = _interopRequireDefault(_permutations);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar PERMS_MIN_LEN = _config2.default.PERMS_MIN_LEN;\n\n;\nmodule.exports = exports['default'];","// libs/scan.ts\nimport { match } from \"@unified-latex/unified-latex-util-match\";\nimport { printRaw } from \"@unified-latex/unified-latex-util-print-raw\";\nfunction scan(nodes, token, options) {\n  const { startIndex, onlySkipWhitespaceAndComments, allowSubstringMatches } = options || {};\n  if (typeof token === \"string\") {\n    token = { type: \"string\", content: token };\n  }\n  for (let i = startIndex || 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (node.type === token.type) {\n      switch (node.type) {\n        case \"comment\":\n        case \"displaymath\":\n        case \"inlinemath\":\n        case \"root\":\n        case \"parbreak\":\n        case \"whitespace\":\n        case \"verb\":\n        case \"verbatim\":\n        case \"group\":\n          return i;\n        case \"macro\":\n          if (node.content === token.content) {\n            return i;\n          }\n          break;\n        case \"environment\":\n        case \"mathenv\":\n          if (printRaw(node.env) === printRaw(token.env)) {\n            return i;\n          }\n          break;\n        case \"string\":\n          if (node.content === token.content) {\n            return i;\n          }\n          if (allowSubstringMatches && node.content.indexOf(token.content) >= 0) {\n            return i;\n          }\n          break;\n      }\n    }\n    if (onlySkipWhitespaceAndComments && !match.whitespace(node) && !match.comment(node)) {\n      return null;\n    }\n  }\n  return null;\n}\n\n// libs/prefix-match.ts\nimport Trie from \"trie-prefix-tree\";\nimport { match as match2 } from \"@unified-latex/unified-latex-util-match\";\nfunction prefixMatch(nodes, prefixes, options) {\n  const {\n    startIndex = 0,\n    matchSubstrings = false,\n    assumeOneCharStrings = false\n  } = options || {};\n  if (typeof prefixes === \"string\") {\n    prefixes = [prefixes];\n  }\n  if (Array.isArray(prefixes)) {\n    prefixes = Trie(prefixes);\n  }\n  const prefixTree = prefixes;\n  const history = {\n    lastPrefix: \"\",\n    lastWord: \"\",\n    index: startIndex,\n    partialMatch: \"\"\n  };\n  function tryToMatchNextChar(char, index) {\n    let ret = false;\n    if (prefixTree.isPrefix(history.lastPrefix + char)) {\n      history.lastPrefix += char;\n      history.index = index;\n      ret = true;\n    }\n    if (prefixTree.hasWord(history.lastPrefix)) {\n      history.lastWord = history.lastPrefix;\n    }\n    return ret;\n  }\n  for (let i = 0; startIndex + i < nodes.length; i++) {\n    const node = nodes[startIndex + i];\n    if (!match2.string(node)) {\n      break;\n    }\n    if (assumeOneCharStrings && node.content.length !== 1) {\n      break;\n    }\n    if (matchSubstrings) {\n      let fullMatch = true;\n      history.partialMatch = \"\";\n      for (let j = 0; j < node.content.length; j++) {\n        const char = node.content[j];\n        if (tryToMatchNextChar(char, startIndex + i)) {\n          history.partialMatch += char;\n        } else {\n          fullMatch = false;\n          break;\n        }\n      }\n      if (fullMatch) {\n        history.partialMatch = \"\";\n      } else {\n        break;\n      }\n    } else {\n      if (!tryToMatchNextChar(node.content, startIndex + i)) {\n        break;\n      }\n    }\n  }\n  return history.lastWord ? {\n    match: history.lastWord,\n    endNodeIndex: history.index,\n    endNodePartialMatch: history.partialMatch ? history.partialMatch : null\n  } : null;\n}\nexport {\n  Trie,\n  prefixMatch,\n  scan\n};\n//# sourceMappingURL=index.js.map\n","// index.ts\nimport { visit } from \"@unified-latex/unified-latex-util-visit\";\nfunction updateRenderInfo(node, renderInfo) {\n  if (renderInfo != null) {\n    node._renderInfo = { ...node._renderInfo || {}, ...renderInfo };\n  }\n  return node;\n}\nfunction trimRenderInfo(ast) {\n  visit(ast, (node) => {\n    delete node._renderInfo;\n    delete node.position;\n  });\n  return ast;\n}\nexport {\n  trimRenderInfo,\n  updateRenderInfo\n};\n//# sourceMappingURL=index.js.map\n","// libs/gobble-arguments.ts\nimport {\n  parse as parseArgspec\n} from \"@unified-latex/unified-latex-util-argspec\";\nimport { arg as arg2 } from \"@unified-latex/unified-latex-builder\";\n\n// libs/gobble-single-argument.ts\nimport { match } from \"@unified-latex/unified-latex-util-match\";\nimport { scan } from \"@unified-latex/unified-latex-util-scan\";\nimport { arg } from \"@unified-latex/unified-latex-builder\";\nfunction gobbleSingleArgument(nodes, argSpec, startPos = 0) {\n  if (typeof argSpec === \"string\" || !argSpec.type) {\n    throw new Error(\n      `argSpec must be an already-parsed argument specification, not \"${JSON.stringify(\n        argSpec\n      )}\"`\n    );\n  }\n  let argument = null;\n  let currPos = startPos;\n  const gobbleWhitespace = argSpec.noLeadingWhitespace ? () => {\n  } : () => {\n    while (currPos < nodes.length) {\n      if (!match.whitespace(nodes[currPos])) {\n        break;\n      }\n      currPos++;\n    }\n  };\n  const openMark = argSpec.openBrace || \"\";\n  const closeMark = argSpec.closeBrace || \"\";\n  const acceptGroup = (argSpec.type === \"mandatory\" || argSpec.type === \"optional\") && openMark === \"{\" && closeMark === \"}\";\n  function findBracePositions() {\n    let openMarkPos = null;\n    if (openMark) {\n      openMarkPos = nodes.findIndex(\n        (node, i) => i >= currPos && match.string(node, openMark)\n      );\n      if (openMarkPos < currPos) {\n        openMarkPos = null;\n      }\n    }\n    let closeMarkPos = null;\n    if (openMarkPos != null) {\n      closeMarkPos = nodes.findIndex(\n        (node, i) => i >= openMarkPos + 1 && match.string(node, closeMark)\n      );\n      if (closeMarkPos < openMarkPos + 1) {\n        closeMarkPos = null;\n      }\n    }\n    return [openMarkPos, closeMarkPos];\n  }\n  gobbleWhitespace();\n  const currNode = nodes[currPos];\n  if (currNode == null || match.comment(currNode) || match.parbreak(currNode)) {\n    return { argument, nodesRemoved: 0 };\n  }\n  switch (argSpec.type) {\n    case \"mandatory\":\n      if (acceptGroup) {\n        let content = [currNode];\n        if (match.group(currNode)) {\n          content = currNode.content;\n        }\n        argument = arg(content, {\n          openMark,\n          closeMark\n        });\n        currPos++;\n        break;\n      }\n    case \"optional\":\n      if (acceptGroup && match.group(currNode)) {\n        argument = arg(currNode.content, {\n          openMark,\n          closeMark\n        });\n        currPos++;\n        break;\n      }\n      if (match.string(currNode, openMark)) {\n        const [openMarkPos, closeMarkPos] = findBracePositions();\n        if (openMarkPos != null && closeMarkPos != null) {\n          argument = arg(nodes.slice(openMarkPos + 1, closeMarkPos), {\n            openMark,\n            closeMark\n          });\n          currPos = closeMarkPos + 1;\n          break;\n        }\n      }\n      break;\n    case \"optionalStar\":\n    case \"optionalToken\":\n      if (match.string(\n        currNode,\n        argSpec.type === \"optionalStar\" ? \"*\" : argSpec.token\n      )) {\n        argument = arg([currNode], { openMark: \"\", closeMark: \"\" });\n        currPos++;\n        break;\n      }\n      break;\n    case \"until\": {\n      if (argSpec.stopTokens.length > 1) {\n        console.warn(\n          `\"until\" matches with multi-token stop conditions are not yet implemented`\n        );\n        break;\n      }\n      const rawToken = argSpec.stopTokens[0];\n      const stopToken = rawToken === \" \" ? { type: \"whitespace\" } : { type: \"string\", content: argSpec.stopTokens[0] };\n      let matchPos = scan(nodes, stopToken, {\n        startIndex: startPos,\n        allowSubstringMatches: true\n      });\n      if (matchPos != null && partialStringMatch(nodes[matchPos], stopToken)) {\n        console.warn(\n          `\"until\" arguments that stop at non-punctuation symbols is not yet implemented`\n        );\n        break;\n      }\n      if (matchPos == null) {\n        break;\n      }\n      argument = arg(nodes.slice(startPos, matchPos), {\n        openMark: \"\",\n        closeMark: rawToken\n      });\n      currPos = matchPos;\n      if (currPos < nodes.length) {\n        currPos++;\n      }\n      break;\n    }\n    default:\n      console.warn(\n        `Don't know how to find an argument of argspec type \"${argSpec.type}\"`\n      );\n  }\n  const nodesRemoved = argument ? currPos - startPos : 0;\n  nodes.splice(startPos, nodesRemoved);\n  return { argument, nodesRemoved };\n}\nfunction partialStringMatch(node, token) {\n  return match.anyString(node) && match.anyString(token) && node.content.length > token.content.length;\n}\n\n// libs/gobble-arguments.ts\nfunction gobbleArguments(nodes, argSpec, startPos = 0) {\n  if (typeof argSpec === \"function\") {\n    return argSpec(nodes, startPos);\n  }\n  if (typeof argSpec === \"string\") {\n    argSpec = parseArgspec(argSpec);\n  }\n  const args = [];\n  let nodesRemoved = 0;\n  for (const spec of argSpec) {\n    const { argument, nodesRemoved: removed } = gobbleSingleArgument(\n      nodes,\n      spec,\n      startPos\n    );\n    if (argument) {\n      args.push(argument);\n      nodesRemoved += removed;\n    } else {\n      args.push(arg2([], { openMark: \"\", closeMark: \"\" }));\n    }\n  }\n  return { args, nodesRemoved };\n}\n\n// libs/attach-arguments.ts\nimport { match as match2 } from \"@unified-latex/unified-latex-util-match\";\nimport { updateRenderInfo } from \"@unified-latex/unified-latex-util-render-info\";\nimport { visit } from \"@unified-latex/unified-latex-util-visit\";\nfunction attachMacroArgsInArray(nodes, macros) {\n  let currIndex;\n  const isRelevantMacro = match2.createMacroMatcher(macros);\n  function gobbleUntilMacro() {\n    while (currIndex >= 0 && !isRelevantMacro(nodes[currIndex])) {\n      currIndex--;\n    }\n  }\n  currIndex = nodes.length - 1;\n  while (currIndex >= 0) {\n    gobbleUntilMacro();\n    if (currIndex < 0) {\n      return;\n    }\n    const macroIndex = currIndex;\n    const macro = nodes[macroIndex];\n    const macroName = macro.content;\n    const macroInfo = macros[macroName];\n    updateRenderInfo(macro, macroInfo.renderInfo);\n    const signatureOrParser = macroInfo.argumentParser || macroInfo.signature;\n    if (signatureOrParser == null) {\n      currIndex--;\n      continue;\n    }\n    if (macro.args != null) {\n      currIndex = macroIndex - 1;\n      continue;\n    }\n    currIndex++;\n    const { args } = gobbleArguments(nodes, signatureOrParser, currIndex);\n    macro.args = args;\n    currIndex = macroIndex - 1;\n  }\n}\nfunction attachMacroArgs(tree, macros) {\n  visit(\n    tree,\n    (nodes) => {\n      attachMacroArgsInArray(nodes, macros);\n    },\n    { includeArrays: true, test: Array.isArray }\n  );\n}\n\n// libs/unified-latex-attach-macro-arguments.ts\nimport { visit as visit2 } from \"@unified-latex/unified-latex-util-visit\";\nvar unifiedLatexAttachMacroArguments = function unifiedLatexAttachMacroArguments2(options) {\n  return (tree) => {\n    const { macros = {} } = options || {};\n    if (Object.keys(macros).length === 0) {\n      console.warn(\n        \"Attempting to attach macro arguments but no macros are specified.\"\n      );\n    }\n    visit2(\n      tree,\n      (nodes) => {\n        attachMacroArgsInArray(nodes, macros);\n      },\n      { includeArrays: true, test: Array.isArray }\n    );\n  };\n};\n\n// libs/get-args-content.ts\nfunction getArgsContent(node) {\n  if (!Array.isArray(node.args)) {\n    return [];\n  }\n  return node.args.map((arg3) => {\n    if (arg3.openMark === \"\" && arg3.content.length === 0) {\n      return null;\n    }\n    return arg3.content;\n  });\n}\nfunction getNamedArgsContent(node, namedArgumentsFallback = []) {\n  var _a;\n  const names = ((_a = node._renderInfo) == null ? void 0 : _a.namedArguments) || namedArgumentsFallback;\n  if (!Array.isArray(node.args) || !Array.isArray(names) || names.length === 0) {\n    return {};\n  }\n  const ret = {};\n  node.args.forEach((arg3, i) => {\n    const name = names[i];\n    if (name == null) {\n      return;\n    }\n    let val = arg3.content;\n    if (arg3.openMark === \"\" && arg3.content.length === 0) {\n      val = null;\n    }\n    ret[name] = val;\n  });\n  return ret;\n}\nexport {\n  attachMacroArgs,\n  attachMacroArgsInArray,\n  getArgsContent,\n  getNamedArgsContent,\n  gobbleArguments,\n  gobbleSingleArgument,\n  unifiedLatexAttachMacroArguments\n};\n//# sourceMappingURL=index.js.map\n","// package/tikz/provides.ts\nimport { attachMacroArgsInArray } from \"@unified-latex/unified-latex-util-arguments\";\n\n// package/tikz/libs/tikz-command-argument-parser.ts\nimport { arg } from \"@unified-latex/unified-latex-builder\";\nimport {\n  parse as parseArgspec\n} from \"@unified-latex/unified-latex-util-argspec\";\nimport { gobbleSingleArgument } from \"@unified-latex/unified-latex-util-arguments\";\nimport { match } from \"@unified-latex/unified-latex-util-match\";\nimport { scan } from \"@unified-latex/unified-latex-util-scan\";\nimport { trim } from \"@unified-latex/unified-latex-util-trim\";\nvar OPTIONAL_ARGUMENT_ARG_SPEC = parseArgspec(\"o\")[0];\nfunction blankArg() {\n  return arg([], { openMark: \"\", closeMark: \"\" });\n}\nvar tikzCommandArgumentParser = (nodes, startPos) => {\n  const origStartPos = startPos;\n  let pos = startPos;\n  let nodesRemoved = 0;\n  const cursorPosAfterAnimations = eatAllAnimationSpecs(nodes, pos);\n  let animationArg = blankArg();\n  if (cursorPosAfterAnimations !== pos) {\n    const argContent = nodes.splice(pos, cursorPosAfterAnimations - pos);\n    trim(argContent);\n    animationArg = arg(argContent, {\n      openMark: \" \",\n      closeMark: \" \"\n    });\n  }\n  nodesRemoved += cursorPosAfterAnimations - pos;\n  const {\n    argument: _optionalArgument,\n    nodesRemoved: optionalArgumentNodesRemoved\n  } = gobbleSingleArgument(nodes, OPTIONAL_ARGUMENT_ARG_SPEC, pos);\n  nodesRemoved += optionalArgumentNodesRemoved;\n  const optionalArg = _optionalArgument || blankArg();\n  while (match.whitespace(nodes[pos])) {\n    pos++;\n  }\n  const firstNode = nodes[pos];\n  if (!firstNode) {\n    return {\n      args: [animationArg, optionalArg, blankArg()],\n      nodesRemoved: 0\n    };\n  }\n  if (match.group(firstNode)) {\n    const args = [animationArg, optionalArg, arg(firstNode.content)];\n    nodes.splice(origStartPos, pos - origStartPos + 1);\n    return { args, nodesRemoved: pos - origStartPos + 1 + nodesRemoved };\n  }\n  const semicolonPosition = scan(nodes, \";\", { startIndex: pos });\n  if (semicolonPosition != null) {\n    const argNodes = nodes.splice(\n      origStartPos,\n      semicolonPosition - origStartPos + 1\n    );\n    trim(argNodes);\n    const args = [animationArg, optionalArg, arg(argNodes)];\n    return {\n      args,\n      nodesRemoved: origStartPos - semicolonPosition + 1 + nodesRemoved\n    };\n  }\n  return {\n    args: [animationArg, optionalArg, blankArg()],\n    nodesRemoved: 0\n  };\n};\nfunction eatAllAnimationSpecs(nodes, startPos) {\n  const colonPos = scan(nodes, \":\", {\n    startIndex: startPos,\n    allowSubstringMatches: true,\n    onlySkipWhitespaceAndComments: true\n  });\n  if (!colonPos) {\n    return startPos;\n  }\n  let lastMatchPos = startPos;\n  let i = colonPos + 1;\n  for (; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (match.string(node, \"[\")) {\n      break;\n    }\n    if (match.string(node, \"=\")) {\n      i++;\n      while (match.whitespace(nodes[i]) || match.comment(nodes[i])) {\n        i++;\n      }\n      if (!match.group(nodes[i])) {\n        break;\n      }\n      lastMatchPos = i + 1;\n      const colonPos2 = scan(nodes, \":\", {\n        startIndex: lastMatchPos,\n        allowSubstringMatches: true,\n        onlySkipWhitespaceAndComments: true\n      });\n      if (colonPos2 == null) {\n        break;\n      }\n      i = colonPos2 + 1;\n    }\n  }\n  return lastMatchPos;\n}\n\n// package/tikz/provides.ts\nvar macros = {\n  pgfkeys: {\n    signature: \"m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  tikzoption: {\n    signature: \"m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  tikzstyle: {\n    signature: \"m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  usetikzlibrary: {\n    signature: \"m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  usepgfmodule: { signature: \"m\", renderInfo: { pgfkeysArgs: true } },\n  usepgflibrary: { signature: \"m\", renderInfo: { pgfkeysArgs: true } },\n  pgfplotsset: {\n    signature: \"m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  pgfplotstabletypeset: {\n    signature: \"o m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  tikz: {\n    signature: \"o o m\",\n    argumentParser: tikzCommandArgumentParser,\n    renderInfo: { namedArguments: [\"animation\", \"options\", \"command\"] }\n  }\n};\nvar environments = {\n  tikzpicture: {\n    signature: \"o\",\n    renderInfo: { pgfkeysArgs: true, tikzEnvironment: true },\n    processContent: processTikzEnvironmentContent\n  },\n  axis: {\n    signature: \"o\",\n    renderInfo: { pgfkeysArgs: true, tikzEnvironment: true },\n    processContent: processTikzEnvironmentContent\n  },\n  scope: {\n    signature: \"o\",\n    renderInfo: { pgfkeysArgs: true, tikzEnvironment: true },\n    processContent: processTikzEnvironmentContent\n  },\n  pgfonlayer: {\n    signature: \"m\",\n    renderInfo: { tikzEnvironment: true },\n    processContent: processTikzEnvironmentContent\n  },\n  pgflowlevelscope: {\n    signature: \"m\",\n    renderInfo: { tikzEnvironment: true },\n    processContent: processTikzEnvironmentContent\n  },\n  pgfviewboxscope: {\n    signature: \"m m m m m\",\n    renderInfo: { tikzEnvironment: true },\n    processContent: processTikzEnvironmentContent\n  },\n  pgftransparencygroup: {\n    signature: \"o\",\n    renderInfo: { pgfkeysArgs: true, tikzEnvironment: true },\n    processContent: processTikzEnvironmentContent\n  },\n  behindforegroundpath: {\n    signature: \"m\",\n    processContent: processTikzEnvironmentContent\n  },\n  pgfmetadecoration: {\n    signature: \"m\",\n    processContent: processTikzEnvironmentContent\n  },\n  colormixin: { signature: \"m\", renderInfo: { pgfkeysArgs: true } }\n};\nfunction processTikzEnvironmentContent(nodes) {\n  attachMacroArgsInArray(nodes, conditionalMacros);\n  return nodes;\n}\nvar conditionalMacros = {\n  pgfextra: { signature: \"m\" },\n  beginpgfgraphicnamed: { signature: \"m\" },\n  pgfrealjobname: { signature: \"m\" },\n  pgfplotstreampoint: { signature: \"m\" },\n  pgfplotstreampointoutlier: { signature: \"m\" },\n  pgfplotstreamspecial: { signature: \"m\" },\n  pgfplotxyfile: { signature: \"m\" },\n  pgfplotxyzfile: { signature: \"m\" },\n  pgfplotfunction: { signature: \"mmm\" },\n  pgfplotgnuplot: { signature: \"o m\" },\n  pgfplothandlerrecord: { signature: \"m\" },\n  pgfdeclareplothandler: { signature: \"m m m\" },\n  pgfdeclarelayer: { signature: \"m\" },\n  pgfsetlayers: { signature: \"m\", renderInfo: { pgfkeysArgs: true } },\n  pgfonlayer: { signature: \"m\" },\n  startpgfonlayer: { signature: \"m\" },\n  pgfdeclarehorizontalshading: { signature: \"o m m m \" },\n  pgfdeclareradialshading: { signature: \"o m m m\" },\n  pgfdeclarefunctionalshading: { signature: \"o m m m m m\" },\n  pgfshadecolortorgb: { signature: \"m m\" },\n  pgfshadecolortocmyk: { signature: \"m m\" },\n  pgfshadecolortogray: { signature: \"m m\" },\n  pgfuseshading: { signature: \"m\" },\n  pgfshadepath: { signature: \"m m\" },\n  pgfsetadditionalshadetransform: { signature: \"m\" },\n  pgfsetstrokeopacity: { signature: \"m\" },\n  pgfsetfillopacity: { signature: \"m\" },\n  pgfsetblendmode: { signature: \"m\" },\n  pgfdeclarefading: { signature: \"m m\" },\n  pgfsetfading: { signature: \"m m\" },\n  pgfsetfadingforcurrentpath: { signature: \"m m\" },\n  pgfsetfadingforcurrentpathstroked: { signature: \"m m\" },\n  pgfanimateattribute: { signature: \"m m\" },\n  pgfsnapshot: { signature: \"m\" },\n  pgfqpoint: { signature: \"m m\" },\n  pgfqpointxy: { signature: \"m m\" },\n  pgfqpointxyz: { signature: \"m m m\" },\n  pgfqpointscale: { signature: \"m m\" },\n  pgfpathqmoveto: { signature: \"m m\" },\n  pgfpathqlineto: { signature: \"m m\" },\n  pgfpathqcurveto: { signature: \"m m m m m m\" },\n  pgfpathqcircle: { signature: \"m\" },\n  pgfqbox: { signature: \"m\" },\n  pgfqboxsynced: { signature: \"m\" },\n  pgfaliasimage: { signature: \"m m\" },\n  pgfuseimage: { signature: \"m\" },\n  pgfimage: { signature: \"o m\", renderInfo: { pgfkeysArgs: true } },\n  pgfdeclaremask: { signature: \"o m m\", renderInfo: { pgfkeysArgs: true } },\n  pgfdeclarepatternformonly: { signature: \"o m m m m m\" },\n  pgfdeclarepatterninherentlycolored: { signature: \"o m m m m m\" },\n  pgfsetfillpattern: { signature: \"m m\" },\n  // Coordinate canvas and nonlinear transformations\n  pgftransformshift: { signature: \"m\" },\n  pgftransformxshift: { signature: \"m\" },\n  pgftransformyshift: { signature: \"m\" },\n  pgftransformscale: { signature: \"m\" },\n  pgftransformxscale: { signature: \"m\" },\n  pgftransformyscale: { signature: \"m\" },\n  pgftransformxslant: { signature: \"m\" },\n  pgftransformyslant: { signature: \"m\" },\n  pgftransformrotate: { signature: \"m\" },\n  pgftransformtriangle: { signature: \"m m m\" },\n  pgftransformcm: { signature: \"m m m m m\" },\n  pgftransformarrow: { signature: \"m m\" },\n  pgftransformlineattime: { signature: \"m m m\" },\n  pgftransformcurveattime: { signature: \"m m m m m\" },\n  pgftransformarcaxesattime: { signature: \"m m m m m m\" },\n  pgfgettransform: { signature: \"m\" },\n  pgfsettransform: { signature: \"m\" },\n  pgfgettransformentries: { signature: \"m m m m m m\" },\n  pgfsettransformentries: { signature: \"m m m m m m\" },\n  pgfpointtransformed: { signature: \"m\" },\n  pgflowlevel: { signature: \"m\" },\n  pgflowlevelobj: { signature: \"m m\" },\n  pgflowlevelscope: { signature: \"m\" },\n  startpgflowlevelscope: { signature: \"m\" },\n  pgfviewboxscope: { signature: \"m m m m m\" },\n  startpgfviewboxscope: { signature: \"m m m m m\" },\n  pgftransformnonlinear: { signature: \"m\" },\n  pgfpointtransformednonlinear: { signature: \"m\" },\n  pgfsetcurvilinearbeziercurve: { signature: \"m m m m\" },\n  pgfcurvilineardistancetotime: { signature: \"m\" },\n  pgfpointcurvilinearbezierorthogonal: { signature: \"m m\" },\n  pgfpointcurvilinearbezierpolar: { signature: \"m m\" },\n  // Matrices\n  pgfmatrix: { signature: \"m m m m m m m\" },\n  pgfsetmatrixcolumnsep: { signature: \"m\" },\n  pgfmatrixnextcell: { signature: \"o\" },\n  pgfsetmatrixrowsep: { signature: \"m\" },\n  pgfmatrixendrow: { signature: \"o\" },\n  // Nodes and shapes\n  pgfnode: { signature: \"m m m m m\" },\n  pgfmultipartnode: { signature: \"m m m m\" },\n  pgfcoordinate: { signature: \"m m\" },\n  pgfnodealias: { signature: \"m m\" },\n  pgfnoderename: { signature: \"m m\" },\n  pgfpositionnodelater: { signature: \"m\" },\n  pgfpositionnodenow: { signature: \"m\" },\n  pgfnodepostsetupcode: { signature: \"m m\" },\n  pgfpointanchor: { signature: \"m m\" },\n  pgfpointshapeborder: { signature: \"m m\" },\n  pgfdeclareshape: { signature: \"m m\" },\n  saveddimen: { signature: \"m m\" },\n  savedmacro: { signature: \" m\" },\n  anchor: { signature: \"m m\" },\n  deferredanchor: { signature: \"m m\" },\n  anchorborder: { signature: \"m\" },\n  backgroundpath: { signature: \"m\" },\n  foregroundpath: { signature: \"m\" },\n  behindbackgroundpath: { signature: \"m\" },\n  beforebackgroundpath: { signature: \"m\" },\n  beforeforegroundpath: { signature: \"m\" },\n  behindforegroundpath: { signature: \"m\" },\n  // Arrows\n  pgfdeclarearrow: { signature: \"m\" },\n  pgfarrowssettipend: { signature: \"m\" },\n  pgfarrowssetbackend: { signature: \"m\" },\n  pgfarrowssetlineend: { signature: \"m\" },\n  pgfarrowssetvisualbackend: { signature: \"m\" },\n  pgfarrowssetvisualtipend: { signature: \"m\" },\n  pgfarrowshullpoint: { signature: \"m m\" },\n  pgfarrowsupperhullpoint: { signature: \"m m\" },\n  pgfarrowssave: { signature: \"m\" },\n  pgfarrowssavethe: { signature: \"m\" },\n  pgfarrowsaddtooptions: { signature: \"m\" },\n  pgfarrowsaddtolateoptions: { signature: \"m\" },\n  pgfarrowsaddtolengthscalelist: { signature: \"m\" },\n  pgfarrowsaddtowidthscalelist: { signature: \"m\" },\n  pgfarrowsthreeparameters: { signature: \"m\" },\n  pgfarrowslinewidthdependent: { signature: \"m m m\" },\n  pgfarrowslengthdependent: { signature: \"m\" },\n  // Path\n  pgfusepath: { signature: \"m\" },\n  pgfsetlinewidth: { signature: \"m\" },\n  pgfsetmiterlimit: { signature: \"m\" },\n  pgfsetdash: { signature: \"m m\" },\n  pgfsetstrokecolor: { signature: \"m\" },\n  pgfsetcolor: { signature: \"m\" },\n  pgfsetinnerlinewidth: { signature: \"m\" },\n  pgfsetinnerstrokecolor: { signature: \"m\" },\n  pgfsetarrowsstart: { signature: \"m\" },\n  pgfsetarrowsend: { signature: \"m\" },\n  pgfsetarrows: { signature: \"m\" },\n  pgfsetshortenstart: { signature: \"m\" },\n  pgfsetshortenend: { signature: \"m\" },\n  pgfsetfillcolor: { signature: \"m\" },\n  // Decorations\n  pgfdeclaredecoration: { signature: \"m m m\" },\n  state: { signature: \"m o m\" },\n  pgfdecoratepath: { signature: \"m m\" },\n  startpgfdecoration: { signature: \"m\" },\n  pgfdecoration: { signature: \"m\" },\n  pgfdecoratecurrentpath: { signature: \"m\" },\n  pgfsetdecorationsegmenttransformation: { signature: \"m\" },\n  pgfdeclaremetadecorate: { signature: \"m m m\" },\n  pgfmetadecoration: { signature: \"m\" },\n  startpgfmetadecoration: { signature: \"m\" },\n  // Constructing paths\n  pgfpathmoveto: { signature: \"m\" },\n  pgfpathlineto: { signature: \"m\" },\n  pgfpathcurveto: { signature: \"m m m\" },\n  pgfpathquadraticcurveto: { signature: \"m m\" },\n  pgfpathcurvebetweentime: { signature: \"m m m m m m\" },\n  pgfpathcurvebetweentimecontinue: { signature: \"m m m m m m\" },\n  pgfpatharc: { signature: \"m m m\" },\n  pgfpatharcaxes: { signature: \"m m m m\" },\n  pgfpatharcto: { signature: \"m m m m m m\" },\n  pgfpatharctoprecomputed: { signature: \"m m m m m m m m\" },\n  pgfpathellipse: { signature: \"m m m\" },\n  pgfpathcircle: { signature: \"m m\" },\n  pgfpathrectangle: { signature: \"m m\" },\n  pgfpathrectanglecorners: { signature: \"m m\" },\n  pgfpathgrid: { signature: \" o m m\" },\n  pgfpathparabola: { signature: \"m m\" },\n  pgfpathsine: { signature: \"m\" },\n  pgfpathcosine: { signature: \"m\" },\n  pgfsetcornersarced: { signature: \"m\" },\n  \"pgf@protocolsizes\": { signature: \"m m\" },\n  // Specifying coordinates\n  pgfpoint: { signature: \"m m\" },\n  pgfpointpolar: { signature: \"m m m\" },\n  pgfpointxy: { signature: \"m m\" },\n  pgfsetxvec: { signature: \"m\" },\n  pgfsetyvec: { signature: \"m\" },\n  pgfpointpolarxy: { signature: \"m m\" },\n  pgfpointxyz: { signature: \"m m m\" },\n  pgfsetzvec: { signature: \"m\" },\n  pgfpointcylindrical: { signature: \"m m m\" },\n  pgfpointspherical: { signature: \"m m m\" },\n  pgfpointadd: { signature: \"m m\" },\n  pgfpointscale: { signature: \"m m\" },\n  pgfpointdiff: { signature: \"m m\" },\n  pgfpointnormalised: { signature: \"m\" },\n  pgfpointlineattime: { signature: \"m m m\" },\n  pgfpointlineatdistance: { signature: \"m m m\" },\n  pgfpointarcaxesattime: { signature: \"m m m m m m\" },\n  pgfpointcurveattime: { signature: \"m m m m m\" },\n  pgfpointborderrectangle: { signature: \"m m\" },\n  pgfpointborderellipse: { signature: \"m m\" },\n  pgfpointintersectionoflines: { signature: \"m m m m\" },\n  pgfpointintersectionofcircles: { signature: \"m m m m m\" },\n  pgfintersectionofpaths: { signature: \"m m\" },\n  pgfpointintersectionsolution: { signature: \"m\" },\n  pgfextractx: { signature: \"m m\" },\n  pgfextracty: { signature: \"m m\" },\n  pgfgetlastxy: { signature: \"m m\" },\n  \"pgf@process\": { signature: \"m\" },\n  // Heirarchical structres ...\n  pgfsetbaseline: { signature: \"m\" },\n  pgfsetbaselinepointnow: { signature: \"m\" },\n  pgfsetbaselinepointlater: { signature: \"m\" },\n  pgftext: { signature: \"o m\", renderInfo: { pgfkeysArgs: true } },\n  pgfuseid: { signature: \"m\" },\n  pgfusetype: { signature: \"m\" },\n  pgfidrefnextuse: { signature: \"m m\" },\n  pgfidrefprevuse: { signature: \"m m\" },\n  pgfaliasid: { signature: \"m m\" },\n  pgfgaliasid: { signature: \"m m\" },\n  pgfifidreferenced: { signature: \"m m m\" },\n  pgfrdfabout: { signature: \"m\" },\n  pgfrdfcontent: { signature: \"m\" },\n  pgfrdfdatatype: { signature: \"m\" },\n  pgfrdfhref: { signature: \"m\" },\n  pgfrdfprefix: { signature: \"m\" },\n  pgfrdfproperty: { signature: \"m\" },\n  pgfrdfrel: { signature: \"m\" },\n  pgfrdfresource: { signature: \"m\" },\n  pgfrdfrev: { signature: \"m\" },\n  pgfrdfsrc: { signature: \"m\" },\n  pgfrdftypeof: { signature: \"m\" },\n  pgfrdfvocab: { signature: \"m\" },\n  pgferror: { signature: \"m\" },\n  pgfwarning: { signature: \"m\" },\n  path: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  draw: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  fill: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  filldraw: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  pattern: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  shade: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  clip: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  useasboundingbox: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  node: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  coordinate: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  graph: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  scoped: {\n    signature: \"o o m\",\n    argumentParser: tikzCommandArgumentParser,\n    renderInfo: {\n      namedArguments: [\"animation\", \"options\", \"command\"],\n      breakAround: true\n    }\n  }\n};\n\n// package/tikz/libs/print-raw.ts\nimport { printRaw as latexPrintRaw } from \"@unified-latex/unified-latex-util-print-raw\";\nimport { trim as trim2 } from \"@unified-latex/unified-latex-util-trim\";\nfunction printRaw(node, root = false) {\n  if (typeof node === \"string\") {\n    return node;\n  }\n  if (Array.isArray(node)) {\n    const sepToken = root ? \" \" : \"\";\n    const printed = [];\n    for (let i = 0; i < node.length; i++) {\n      const tok = node[i];\n      const prevTok = node[i - 1];\n      if (!prevTok) {\n        printed.push(printRaw(tok));\n        continue;\n      }\n      if (prevTok.type === \"comment\") {\n        printed.push(printRaw(tok));\n        continue;\n      }\n      if (tok.type !== \"comment\") {\n        printed.push(sepToken);\n      }\n      printed.push(printRaw(tok));\n    }\n    return printed.join(\"\");\n  }\n  const type = node.type;\n  switch (type) {\n    case \"path_spec\":\n      return printRaw(node.content, root = true);\n    case \"coordinate\":\n      return `${latexPrintRaw(node.prefix)}(${latexPrintRaw(\n        node.content\n      )})`;\n    case \"operation\":\n      return latexPrintRaw(node.content);\n    case \"comment\":\n      return latexPrintRaw(node);\n    case \"line_to\":\n      return node.command;\n    case \"curve_to\": {\n      const comments = node.comments.map((c) => latexPrintRaw({ ...c, leadingWhitespace: false })).join(\"\");\n      if (node.controls.length === 1) {\n        return `${comments}.. controls ${printRaw(\n          node.controls[0]\n        )} ..`;\n      } else {\n        return `${comments}.. controls ${printRaw(\n          node.controls[0]\n        )} and ${printRaw(node.controls[1])} ..`;\n      }\n    }\n    case \"unknown\":\n      return latexPrintRaw(node.content);\n    case \"square_brace_group\":\n      return `[${latexPrintRaw(node.content)}]`;\n    case \"foreach\": {\n      const comments = node.comments.map((c) => latexPrintRaw({ ...c, leadingWhitespace: false })).join(\"\");\n      let options = \"\";\n      if (node.options) {\n        options = ` [${latexPrintRaw(node.options)}]`;\n      }\n      const start = latexPrintRaw(node.start);\n      const variables = [...node.variables];\n      trim2(variables);\n      let printedVariables = latexPrintRaw(variables);\n      if (printedVariables.length > 0) {\n        printedVariables = \" \" + printedVariables;\n      }\n      const command = node.command.type === \"foreach\" ? printRaw(node.command) : latexPrintRaw(node.command);\n      return `${comments}${start}${printedVariables}${options} in ${latexPrintRaw(\n        node.list\n      )} ${command}`;\n    }\n    case \"svg_operation\": {\n      const comments = node.comments.map((c) => latexPrintRaw({ ...c, leadingWhitespace: false })).join(\"\");\n      let options = \"\";\n      if (node.options) {\n        options = `[${latexPrintRaw(node.options)}]`;\n      }\n      return `${comments}svg${options} ${latexPrintRaw(node.content)}`;\n    }\n    case \"animation\": {\n      const comments = node.comments.map((c) => latexPrintRaw({ ...c, leadingWhitespace: false })).join(\"\");\n      return `${comments}:${node.attribute} = {${latexPrintRaw(\n        node.content\n      )}}`;\n    }\n    default:\n      const unprintedType = type;\n      console.warn(`Unknown node type \"${unprintedType}\" for node`, node);\n      return \"\";\n  }\n}\n\n// package/tikz/libs/parser.ts\nimport { match as match2 } from \"@unified-latex/unified-latex-util-match\";\nimport { decorateArrayForPegjs } from \"@unified-latex/unified-latex-util-pegjs\";\nimport { TikzPegParser } from \"@unified-latex/unified-latex-util-pegjs\";\nfunction createMatchers() {\n  return {\n    isChar: match2.string,\n    isTerminal: (node) => match2.string(node, \";\"),\n    isOperation: (node) => match2.anyString(node) && node.content.match(/[a-zA-Z]/),\n    isWhitespace: (node) => match2.whitespace(node) || match2.parbreak(node),\n    isComment: match2.comment,\n    isGroup: match2.group,\n    isMacro: match2.macro,\n    isAnyMacro: match2.anyMacro\n  };\n}\nvar matchers = createMatchers();\nfunction parse(ast, options) {\n  const { startRule = \"path_spec\" } = options || {};\n  if (!Array.isArray(ast)) {\n    throw new Error(\"You must pass an array of nodes\");\n  }\n  ast = decorateArrayForPegjs([...ast]);\n  return TikzPegParser.parse(ast, {\n    ...matchers,\n    startRule\n  });\n}\nexport {\n  conditionalMacros,\n  environments,\n  macros,\n  parse,\n  printRaw\n};\n//# sourceMappingURL=index.js.map\n","// libs/pgfkeys-parser.ts\nimport { PgfkeysPegParser } from \"@unified-latex/unified-latex-util-pegjs\";\nimport { match } from \"@unified-latex/unified-latex-util-match\";\nimport { decorateArrayForPegjs } from \"@unified-latex/unified-latex-util-pegjs\";\nfunction createMatchers() {\n  return {\n    isChar: (node, char) => match.string(node, char),\n    isComma: (node) => match.string(node, \",\"),\n    isEquals: (node) => match.string(node, \"=\"),\n    isWhitespace: (node) => match.whitespace(node),\n    isParbreak: (node) => match.parbreak(node),\n    isSameLineComment: (node) => match.comment(node) && node.sameline,\n    isOwnLineComment: (node) => match.comment(node) && !node.sameline\n  };\n}\nfunction parsePgfkeys(ast, options) {\n  if (!Array.isArray(ast)) {\n    throw new Error(\"You must pass an array of nodes\");\n  }\n  const { allowParenGroups = false } = options || {};\n  ast = decorateArrayForPegjs([...ast]);\n  return PgfkeysPegParser.parse(ast, {\n    ...createMatchers(),\n    allowParenGroups\n  });\n}\n\n// libs/pgfkeys-to-object.ts\nimport { match as match2 } from \"@unified-latex/unified-latex-util-match\";\nimport { printRaw } from \"@unified-latex/unified-latex-util-print-raw\";\nfunction pgfkeysArgToObject(arg) {\n  function parseFront(nodes) {\n    return printRaw(nodes);\n  }\n  function parseBack(nodes) {\n    if (!nodes) {\n      return [];\n    }\n    if (nodes.length === 1 && match2.group(nodes[0])) {\n      return nodes[0].content;\n    }\n    return nodes;\n  }\n  let nodeList;\n  if (match2.argument(arg)) {\n    nodeList = arg.content;\n  } else {\n    nodeList = arg;\n  }\n  const parsedArgs = parsePgfkeys(nodeList);\n  return Object.fromEntries(\n    parsedArgs.filter((part) => part.itemParts).map((part) => [\n      parseFront(part.itemParts[0]),\n      parseBack(part.itemParts[1])\n    ])\n  );\n}\nexport {\n  createMatchers,\n  parsePgfkeys,\n  pgfkeysArgToObject\n};\n//# sourceMappingURL=index.js.map\n","// libs/parse-align-environment.ts\nimport { match } from \"@unified-latex/unified-latex-util-match\";\nimport {\n  AlignEnvironmentPegParser,\n  decorateArrayForPegjs\n} from \"@unified-latex/unified-latex-util-pegjs\";\nfunction createMatchers(rowSepMacros, colSep) {\n  const isRowSep = match.createMacroMatcher(rowSepMacros);\n  return {\n    isRowSep,\n    isColSep: (node) => colSep.some((sep) => match.string(node, sep)),\n    isWhitespace: (node) => match.whitespace(node),\n    isSameLineComment: (node) => match.comment(node) && node.sameline,\n    isOwnLineComment: (node) => match.comment(node) && !node.sameline\n  };\n}\nfunction parseAlignEnvironment(ast, colSep = [\"&\"], rowSepMacros = [\"\\\\\", \"hline\", \"cr\"]) {\n  if (!Array.isArray(ast)) {\n    throw new Error(\"You must pass an array of nodes\");\n  }\n  ast = decorateArrayForPegjs([...ast]);\n  return AlignEnvironmentPegParser.parse(\n    ast,\n    createMatchers(rowSepMacros, colSep)\n  );\n}\nexport {\n  createMatchers,\n  parseAlignEnvironment\n};\n//# sourceMappingURL=index.js.map\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","// libs/split-on-macro.ts\nimport { match } from \"@unified-latex/unified-latex-util-match\";\n\n// libs/split-on-condition.ts\nfunction splitOnCondition(nodes, splitFunc = () => false, options) {\n  if (!Array.isArray(nodes)) {\n    throw new Error(`Can only split an Array, not ${nodes}`);\n  }\n  const { onlySplitOnFirstOccurrence = false } = options || {};\n  const splitIndices = [];\n  for (let i = 0; i < nodes.length; i++) {\n    if (splitFunc(nodes[i])) {\n      splitIndices.push(i);\n      if (onlySplitOnFirstOccurrence) {\n        break;\n      }\n    }\n  }\n  if (splitIndices.length === 0) {\n    return { segments: [nodes], separators: [] };\n  }\n  let separators = splitIndices.map((i) => nodes[i]);\n  let segments = splitIndices.map((splitEnd, i) => {\n    const splitStart = i === 0 ? 0 : splitIndices[i - 1] + 1;\n    return nodes.slice(splitStart, splitEnd);\n  });\n  segments.push(\n    nodes.slice(splitIndices[splitIndices.length - 1] + 1, nodes.length)\n  );\n  return { segments, separators };\n}\n\n// libs/split-on-macro.ts\nfunction splitOnMacro(ast, macroName) {\n  if (typeof macroName === \"string\") {\n    macroName = [macroName];\n  }\n  if (!Array.isArray(macroName)) {\n    throw new Error(\"Type coercion failed\");\n  }\n  const isSeparator = match.createMacroMatcher(macroName);\n  const { segments, separators } = splitOnCondition(ast, isSeparator);\n  return { segments, macros: separators };\n}\n\n// libs/unsplit-on-macro.ts\nfunction unsplitOnMacro({\n  segments,\n  macros\n}) {\n  if (segments.length === 0) {\n    console.warn(\"Trying to join zero segments\");\n    return [];\n  }\n  if (segments.length !== macros.length + 1) {\n    console.warn(\n      \"Mismatch between lengths of macros and segments when trying to unsplit\"\n    );\n  }\n  let ret = segments[0];\n  for (let i = 0; i < macros.length; i++) {\n    ret = ret.concat(macros[i]).concat(segments[i + 1]);\n  }\n  return ret;\n}\n\n// libs/array-join.ts\nfunction arrayJoin(array, sep) {\n  return array.flatMap((item, i) => {\n    if (i === 0) {\n      return item;\n    }\n    if (Array.isArray(sep)) {\n      return [...sep, ...item];\n    } else {\n      return [sep, ...item];\n    }\n  });\n}\nexport {\n  arrayJoin,\n  splitOnCondition,\n  splitOnMacro,\n  unsplitOnMacro\n};\n//# sourceMappingURL=index.js.map\n","// libs/replace-node.ts\nimport {\n  visit\n} from \"@unified-latex/unified-latex-util-visit\";\nfunction replaceNode(ast, visitor) {\n  visit(ast, {\n    leave: (node, info) => {\n      let replacement = visitor(node, info);\n      if (typeof replacement === \"undefined\" || replacement === node) {\n        return;\n      }\n      if (!info.containingArray || info.index == null) {\n        throw new Error(\n          \"Trying to replace node, but cannot find containing array\"\n        );\n      }\n      if (replacement === null || Array.isArray(replacement) && replacement.length === 0) {\n        info.containingArray.splice(info.index, 1);\n        return info.index;\n      }\n      if (!Array.isArray(replacement)) {\n        replacement = [replacement];\n      }\n      info.containingArray.splice(info.index, 1, ...replacement);\n      return info.index + replacement.length;\n    }\n  });\n}\n\n// libs/unified-latex-streaming-command.ts\nimport { match as match5 } from \"@unified-latex/unified-latex-util-match\";\nimport { trimEnd as trimEnd3, trimStart as trimStart4 } from \"@unified-latex/unified-latex-util-trim\";\nimport { visit as visit2 } from \"@unified-latex/unified-latex-util-visit\";\n\n// libs/replace-streaming-command.ts\nimport { match as match4 } from \"@unified-latex/unified-latex-util-match\";\nimport {\n  splitOnCondition,\n  unsplitOnMacro\n} from \"@unified-latex/unified-latex-util-split\";\nimport {\n  trim,\n  trimEnd as trimEnd2,\n  trimStart as trimStart3\n} from \"@unified-latex/unified-latex-util-trim\";\n\n// libs/utils/significant-node.ts\nimport { match } from \"@unified-latex/unified-latex-util-match\";\nfunction firstSignificantNode(nodes, parbreaksAreInsignificant) {\n  const index = firstSignificantNodeIndex(nodes, parbreaksAreInsignificant);\n  if (index == null) {\n    return null;\n  }\n  return nodes[index];\n}\nfunction lastSignificantNode(nodes, parbreaksAreInsignificant) {\n  const index = lastSignificantNodeIndex(nodes, parbreaksAreInsignificant);\n  if (index == null) {\n    return null;\n  }\n  return nodes[index];\n}\nfunction lastSignificantNodeIndex(nodes, parbreaksAreInsignificant) {\n  for (let i = nodes.length - 1; i >= 0; i--) {\n    const node = nodes[i];\n    if (match.whitespace(node) || match.comment(node) || parbreaksAreInsignificant && match.parbreak(node)) {\n      continue;\n    }\n    return i;\n  }\n  return void 0;\n}\nfunction firstSignificantNodeIndex(nodes, parbreaksAreInsignificant) {\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (match.whitespace(node) || match.comment(node) || parbreaksAreInsignificant && match.parbreak(node)) {\n      continue;\n    }\n    return i;\n  }\n  return void 0;\n}\n\n// libs/utils/replace-streaming-command-in-array.ts\nimport { trimEnd, trimStart as trimStart2 } from \"@unified-latex/unified-latex-util-trim\";\n\n// libs/utils/join-without-excess-whitespace.ts\nimport { match as match2 } from \"@unified-latex/unified-latex-util-match\";\nimport { trimStart } from \"@unified-latex/unified-latex-util-trim\";\nfunction isSpaceLike(node) {\n  return match2.whitespace(node) || match2.comment(node) && Boolean(node.leadingWhitespace);\n}\nfunction joinWithoutExcessWhitespace(head, tail) {\n  if (tail.length === 0) {\n    return;\n  }\n  if (head.length === 0) {\n    head.push(...tail);\n    return;\n  }\n  const headEnd = head[head.length - 1];\n  const tailStart = tail[0];\n  if (match2.whitespace(headEnd) && match2.whitespace(tailStart)) {\n    head.push(...tail.slice(1));\n    return;\n  }\n  if (!isSpaceLike(headEnd) || !isSpaceLike(tailStart)) {\n    if (match2.whitespace(headEnd) && match2.comment(tailStart)) {\n      const comment2 = {\n        type: \"comment\",\n        content: tailStart.content,\n        sameline: true,\n        leadingWhitespace: true\n      };\n      tail = tail.slice(1);\n      trimStart(tail);\n      head.pop();\n      head.push(comment2, ...tail);\n      return;\n    }\n    head.push(...tail);\n    return;\n  }\n  if (match2.comment(headEnd) && match2.comment(tailStart)) {\n    if (tailStart.leadingWhitespace || tailStart.sameline) {\n      head.push(\n        { type: \"comment\", content: tailStart.content },\n        ...tail.slice(1)\n      );\n      return;\n    }\n    head.push(...tail);\n    return;\n  }\n  let comment = match2.comment(headEnd) ? headEnd : tailStart;\n  if (!match2.comment(comment)) {\n    throw new Error(\n      `Expected a comment but found ${JSON.stringify(comment)}`\n    );\n  }\n  if (!comment.leadingWhitespace || !comment.sameline) {\n    comment = {\n      type: \"comment\",\n      content: comment.content,\n      leadingWhitespace: true,\n      sameline: true\n    };\n  }\n  head.pop();\n  head.push(comment, ...tail.slice(1));\n}\n\n// libs/utils/wrap-significant-content.ts\nimport { match as match3 } from \"@unified-latex/unified-latex-util-match\";\nfunction wrapSignificantContent(content, wrapper) {\n  let hoistUntil = 0;\n  let hoistAfter = content.length;\n  for (let i = 0; i < content.length; i++) {\n    if (match3.whitespace(content[i]) || match3.comment(content[i])) {\n      hoistUntil = i + 1;\n      continue;\n    }\n    break;\n  }\n  for (let j = content.length - 1; j >= 0; j--) {\n    if (match3.whitespace(content[j]) || match3.comment(content[j])) {\n      hoistAfter = j;\n      continue;\n    }\n    break;\n  }\n  if (hoistUntil === 0 && hoistAfter === content.length) {\n    return ensureArray(wrapper(content));\n  }\n  const frontMatter = content.slice(0, hoistUntil);\n  const middle = content.slice(hoistUntil, hoistAfter);\n  const backMatter = content.slice(hoistAfter, content.length);\n  return frontMatter.concat(wrapper(middle), backMatter);\n}\nfunction ensureArray(x) {\n  if (!Array.isArray(x)) {\n    return [x];\n  }\n  return x;\n}\n\n// libs/utils/replace-streaming-command-in-array.ts\nfunction replaceStreamingCommandInArray(nodes, isStreamingCommand, replacer) {\n  while (nodes.length > 0 && isStreamingCommand(nodes[nodes.length - 1])) {\n    nodes.pop();\n    trimEnd(nodes);\n  }\n  const foundStreamingCommands = [];\n  for (let i = nodes.length - 1; i >= 0; i--) {\n    const node = nodes[i];\n    if (isStreamingCommand(node)) {\n      const wrapper = (content) => replacer(content, node);\n      let tail = nodes.slice(i + 1);\n      trimStart2(tail);\n      tail = wrapSignificantContent(tail, wrapper);\n      foundStreamingCommands.push(node);\n      nodes.splice(i);\n      joinWithoutExcessWhitespace(nodes, tail);\n    }\n  }\n  return { foundStreamingCommands };\n}\n\n// libs/replace-streaming-command.ts\nfunction replaceStreamingCommandInGroup(group, isStreamingCommand, replacer, options) {\n  const content = group.content;\n  let popFromGroup = isStreamingCommand(firstSignificantNode(content));\n  let innerProcessed = replaceStreamingCommand(\n    content,\n    isStreamingCommand,\n    replacer,\n    options\n  );\n  if (innerProcessed.length === 0) {\n    return [];\n  }\n  if (popFromGroup) {\n    return innerProcessed;\n  } else {\n    return [{ type: \"group\", content: innerProcessed }];\n  }\n}\nfunction replaceStreamingCommand(ast, isStreamingCommand, replacer, options) {\n  if (typeof isStreamingCommand !== \"function\") {\n    throw new Error(\n      `'isStreamingCommand' must be a function, not '${typeof isStreamingCommand}'`\n    );\n  }\n  const {\n    macrosThatBreakPars = [\n      \"part\",\n      \"chapter\",\n      \"section\",\n      \"subsection\",\n      \"subsubsection\",\n      \"vspace\",\n      \"smallskip\",\n      \"medskip\",\n      \"bigskip\",\n      \"hfill\"\n    ],\n    environmentsThatDontBreakPars = []\n  } = options || {};\n  let processedContent = [];\n  if (match4.group(ast)) {\n    processedContent = replaceStreamingCommandInGroup(\n      ast,\n      isStreamingCommand,\n      replacer\n    );\n  }\n  if (Array.isArray(ast)) {\n    const nodes = ast;\n    let scanIndex = nodes.length;\n    let sliceIndex = scanIndex;\n    while (scanIndex > 0 && (isStreamingCommand(nodes[scanIndex - 1]) || match4.whitespace(nodes[scanIndex - 1]))) {\n      scanIndex--;\n      if (isStreamingCommand(nodes[scanIndex])) {\n        sliceIndex = scanIndex;\n      }\n    }\n    if (sliceIndex !== nodes.length) {\n      nodes.splice(sliceIndex);\n    }\n    const macroThatBreaks = match4.createMacroMatcher(macrosThatBreakPars);\n    const envThatDoesntBreak = match4.createEnvironmentMatcher(\n      environmentsThatDontBreakPars\n    );\n    const isPar = (node) => match4.parbreak(node) || match4.macro(node, \"par\") || macroThatBreaks(node) || match4.environment(node) && !envThatDoesntBreak(node) || node.type === \"displaymath\";\n    const splitByPar = splitOnCondition(nodes, isPar);\n    splitByPar.separators = splitByPar.separators.map(\n      (sep) => match4.macro(sep, \"par\") ? { type: \"parbreak\" } : sep\n    );\n    const replacers = [];\n    let segments = splitByPar.segments.map((segment) => {\n      if (segment.length === 0) {\n        return segment;\n      }\n      function applyAccumulatedReplacers(nodes2) {\n        if (replacers.length === 0) {\n          return nodes2;\n        }\n        return wrapSignificantContent(\n          nodes2,\n          composeReplacers(replacers)\n        );\n      }\n      const { foundStreamingCommands } = replaceStreamingCommandInArray(\n        segment,\n        isStreamingCommand,\n        replacer\n      );\n      const ret = applyAccumulatedReplacers(segment);\n      foundStreamingCommands.forEach((macro) => {\n        replacers.push((nodes2) => {\n          const ret2 = replacer(nodes2, macro);\n          if (!Array.isArray(ret2)) {\n            return [ret2];\n          }\n          return ret2;\n        });\n      });\n      return ret;\n    });\n    if (segments.length > 1) {\n      segments.forEach((segment, i) => {\n        if (i === 0) {\n          trimEnd2(segment);\n        } else if (i === segments.length - 1) {\n          trimStart3(segment);\n        } else {\n          trim(segment);\n        }\n      });\n    }\n    processedContent = unsplitOnMacro({\n      segments,\n      macros: splitByPar.separators\n    });\n  }\n  return processedContent;\n}\nfunction composeReplacers(replacers) {\n  if (replacers.length === 0) {\n    throw new Error(\"Cannot compose zero replacement functions\");\n  }\n  return (nodes) => {\n    let ret = nodes;\n    for (let i = 0; i < replacers.length; i++) {\n      const func = replacers[i];\n      ret = func(ret);\n    }\n    return ret;\n  };\n}\n\n// libs/replace-node-during-visit.ts\nfunction replaceNodeDuringVisit(replacement, info) {\n  const parent = info.parents[0];\n  if (!parent) {\n    throw new Error(`Cannot replace node: parent not found`);\n  }\n  const container = parent[info.key];\n  if (!Array.isArray(container)) {\n    throw new Error(`Cannot replace node: containing array not found`);\n  }\n  if (info.index == null) {\n    throw new Error(`Cannot replace node: node index undefined`);\n  }\n  if (!Array.isArray(replacement)) {\n    container[info.index] = replacement;\n  } else {\n    container.splice(info.index, 1, ...replacement);\n  }\n}\n\n// libs/unified-latex-streaming-command.ts\nvar unifiedLatexReplaceStreamingCommands = function unifiedLatexReplaceStreamingCommands2(options) {\n  const { replacers = {} } = options || {};\n  const isReplaceable = match5.createMacroMatcher(replacers);\n  return (tree) => {\n    visit2(\n      tree,\n      (group, info) => {\n        if (info.context.hasMathModeAncestor || !group.content.some(isReplaceable)) {\n          return;\n        }\n        let fixed = replaceStreamingCommand(\n          group,\n          isReplaceable,\n          (content, command) => {\n            return replacers[command.content](content, command);\n          }\n        );\n        if (!info.containingArray || info.index == null) {\n          return;\n        }\n        const prevToken = info.containingArray[info.index - 1];\n        const nextToken = info.containingArray[info.index + 1];\n        if (match5.whitespaceLike(prevToken) && match5.whitespaceLike(fixed[0])) {\n          trimStart4(fixed);\n        }\n        if (match5.whitespaceLike(nextToken) && match5.whitespaceLike(fixed[fixed.length - 1])) {\n          trimEnd3(fixed);\n        }\n        replaceNodeDuringVisit(fixed, info);\n      },\n      { test: match5.group }\n    );\n    visit2(\n      tree,\n      (nodes, info) => {\n        if (info.context.hasMathModeAncestor || !nodes.some(isReplaceable)) {\n          return;\n        }\n        const replaced = replaceStreamingCommand(\n          nodes,\n          isReplaceable,\n          (content, command) => {\n            return replacers[command.content](content, command);\n          }\n        );\n        if (replaced !== nodes) {\n          nodes.length = 0;\n          nodes.push(...replaced);\n        }\n      },\n      { includeArrays: true, test: Array.isArray }\n    );\n  };\n};\nexport {\n  firstSignificantNode,\n  firstSignificantNodeIndex,\n  lastSignificantNode,\n  lastSignificantNodeIndex,\n  replaceNode,\n  replaceNodeDuringVisit,\n  replaceStreamingCommand,\n  replaceStreamingCommandInGroup,\n  unifiedLatexReplaceStreamingCommands\n};\n//# sourceMappingURL=index.js.map\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","module.exports = function isArrayish(obj) {\n\tif (!obj || typeof obj === 'string') {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && (obj.splice instanceof Function ||\n\t\t\t(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));\n};\n","'use strict';\n\nvar isArrayish = require('is-arrayish');\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n\tvar results = [];\n\n\tfor (var i = 0, len = args.length; i < len; i++) {\n\t\tvar arg = args[i];\n\n\t\tif (isArrayish(arg)) {\n\t\t\t// http://jsperf.com/javascript-array-concat-vs-push/98\n\t\t\tresults = concat.call(results, slice.call(arg));\n\t\t} else {\n\t\t\tresults.push(arg);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nswizzle.wrap = function (fn) {\n\treturn function () {\n\t\treturn fn(swizzle(arguments));\n\t};\n};\n","/* MIT license */\nvar colorNames = require('color-name');\nvar swizzle = require('simple-swizzle');\nvar hasOwnProperty = Object.hasOwnProperty;\n\nvar reverseNames = Object.create(null);\n\n// create a list of reverse color names\nfor (var name in colorNames) {\n\tif (hasOwnProperty.call(colorNames, name)) {\n\t\treverseNames[colorNames[name]] = name;\n\t}\n}\n\nvar cs = module.exports = {\n\tto: {},\n\tget: {}\n};\n\ncs.get = function (string) {\n\tvar prefix = string.substring(0, 3).toLowerCase();\n\tvar val;\n\tvar model;\n\tswitch (prefix) {\n\t\tcase 'hsl':\n\t\t\tval = cs.get.hsl(string);\n\t\t\tmodel = 'hsl';\n\t\t\tbreak;\n\t\tcase 'hwb':\n\t\t\tval = cs.get.hwb(string);\n\t\t\tmodel = 'hwb';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tval = cs.get.rgb(string);\n\t\t\tmodel = 'rgb';\n\t\t\tbreak;\n\t}\n\n\tif (!val) {\n\t\treturn null;\n\t}\n\n\treturn {model: model, value: val};\n};\n\ncs.get.rgb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar abbr = /^#([a-f0-9]{3,4})$/i;\n\tvar hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n\tvar rgba = /^rgba?\\(\\s*([+-]?\\d+)(?=[\\s,])\\s*(?:,\\s*)?([+-]?\\d+)(?=[\\s,])\\s*(?:,\\s*)?([+-]?\\d+)\\s*(?:[,|\\/]\\s*([+-]?[\\d\\.]+)(%?)\\s*)?\\)$/;\n\tvar per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,?\\s*([+-]?[\\d\\.]+)\\%\\s*,?\\s*([+-]?[\\d\\.]+)\\%\\s*(?:[,|\\/]\\s*([+-]?[\\d\\.]+)(%?)\\s*)?\\)$/;\n\tvar keyword = /^(\\w+)$/;\n\n\tvar rgb = [0, 0, 0, 1];\n\tvar match;\n\tvar i;\n\tvar hexAlpha;\n\n\tif (match = string.match(hex)) {\n\t\thexAlpha = match[2];\n\t\tmatch = match[1];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\t// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n\t\t\tvar i2 = i * 2;\n\t\t\trgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = parseInt(hexAlpha, 16) / 255;\n\t\t}\n\t} else if (match = string.match(abbr)) {\n\t\tmatch = match[1];\n\t\thexAlpha = match[3];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i] + match[i], 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;\n\t\t}\n\t} else if (match = string.match(rgba)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i + 1], 0);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\tif (match[5]) {\n\t\t\t\trgb[3] = parseFloat(match[4]) * 0.01;\n\t\t\t} else {\n\t\t\t\trgb[3] = parseFloat(match[4]);\n\t\t\t}\n\t\t}\n\t} else if (match = string.match(per)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\tif (match[5]) {\n\t\t\t\trgb[3] = parseFloat(match[4]) * 0.01;\n\t\t\t} else {\n\t\t\t\trgb[3] = parseFloat(match[4]);\n\t\t\t}\n\t\t}\n\t} else if (match = string.match(keyword)) {\n\t\tif (match[1] === 'transparent') {\n\t\t\treturn [0, 0, 0, 0];\n\t\t}\n\n\t\tif (!hasOwnProperty.call(colorNames, match[1])) {\n\t\t\treturn null;\n\t\t}\n\n\t\trgb = colorNames[match[1]];\n\t\trgb[3] = 1;\n\n\t\treturn rgb;\n\t} else {\n\t\treturn null;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = clamp(rgb[i], 0, 255);\n\t}\n\trgb[3] = clamp(rgb[3], 0, 1);\n\n\treturn rgb;\n};\n\ncs.get.hsl = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hsl = /^hsla?\\(\\s*([+-]?(?:\\d{0,3}\\.)?\\d+)(?:deg)?\\s*,?\\s*([+-]?[\\d\\.]+)%\\s*,?\\s*([+-]?[\\d\\.]+)%\\s*(?:[,|\\/]\\s*([+-]?(?=\\.\\d|\\d)(?:0|[1-9]\\d*)?(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\s*)?\\)$/;\n\tvar match = string.match(hsl);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar s = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar l = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\n\t\treturn [h, s, l, a];\n\t}\n\n\treturn null;\n};\n\ncs.get.hwb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hwb = /^hwb\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?(?=\\.\\d|\\d)(?:0|[1-9]\\d*)?(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\s*)?\\)$/;\n\tvar match = string.match(hwb);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar w = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar b = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\t\treturn [h, w, b, a];\n\t}\n\n\treturn null;\n};\n\ncs.to.hex = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn (\n\t\t'#' +\n\t\thexDouble(rgba[0]) +\n\t\thexDouble(rgba[1]) +\n\t\thexDouble(rgba[2]) +\n\t\t(rgba[3] < 1\n\t\t\t? (hexDouble(Math.round(rgba[3] * 255)))\n\t\t\t: '')\n\t);\n};\n\ncs.to.rgb = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'\n\t\t: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n\tvar rgba = swizzle(arguments);\n\n\tvar r = Math.round(rgba[0] / 255 * 100);\n\tvar g = Math.round(rgba[1] / 255 * 100);\n\tvar b = Math.round(rgba[2] / 255 * 100);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'\n\t\t: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n\tvar hsla = swizzle(arguments);\n\treturn hsla.length < 4 || hsla[3] === 1\n\t\t? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'\n\t\t: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n};\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\ncs.to.hwb = function () {\n\tvar hwba = swizzle(arguments);\n\n\tvar a = '';\n\tif (hwba.length >= 4 && hwba[3] !== 1) {\n\t\ta = ', ' + hwba[3];\n\t}\n\n\treturn 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n\treturn reverseNames[rgb.slice(0, 3)];\n};\n\n// helpers\nfunction clamp(num, min, max) {\n\treturn Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n\tvar str = Math.round(num).toString(16).toUpperCase();\n\treturn (str.length < 2) ? '0' + str : str;\n}\n","/* MIT license */\n/* eslint-disable no-mixed-operators */\nconst cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nconst reverseKeywords = {};\nfor (const key of Object.keys(cssKeywords)) {\n\treverseKeywords[cssKeywords[key]] = key;\n}\n\nconst convert = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\nmodule.exports = convert;\n\n// Hide .channels and .labels properties\nfor (const model of Object.keys(convert)) {\n\tif (!('channels' in convert[model])) {\n\t\tthrow new Error('missing channels property: ' + model);\n\t}\n\n\tif (!('labels' in convert[model])) {\n\t\tthrow new Error('missing channel labels property: ' + model);\n\t}\n\n\tif (convert[model].labels.length !== convert[model].channels) {\n\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t}\n\n\tconst {channels, labels} = convert[model];\n\tdelete convert[model].channels;\n\tdelete convert[model].labels;\n\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\tObject.defineProperty(convert[model], 'labels', {value: labels});\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst min = Math.min(r, g, b);\n\tconst max = Math.max(r, g, b);\n\tconst delta = max - min;\n\tlet h;\n\tlet s;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tconst l = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tlet rdif;\n\tlet gdif;\n\tlet bdif;\n\tlet h;\n\tlet s;\n\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst v = Math.max(r, g, b);\n\tconst diff = v - Math.min(r, g, b);\n\tconst diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = 0;\n\t\ts = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tconst r = rgb[0];\n\tconst g = rgb[1];\n\tlet b = rgb[2];\n\tconst h = convert.rgb.hsl(rgb)[0];\n\tconst w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\n\tconst k = Math.min(1 - r, 1 - g, 1 - b);\n\tconst c = (1 - r - k) / (1 - k) || 0;\n\tconst m = (1 - g - k) / (1 - k) || 0;\n\tconst y = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\nfunction comparativeDistance(x, y) {\n\t/*\n\t\tSee https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n\t*/\n\treturn (\n\t\t((x[0] - y[0]) ** 2) +\n\t\t((x[1] - y[1]) ** 2) +\n\t\t((x[2] - y[2]) ** 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tconst reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tlet currentClosestDistance = Infinity;\n\tlet currentClosestKeyword;\n\n\tfor (const keyword of Object.keys(cssKeywords)) {\n\t\tconst value = cssKeywords[keyword];\n\n\t\t// Compute comparative distance\n\t\tconst distance = comparativeDistance(rgb, value);\n\n\t\t// Check if its less, if so set as closest\n\t\tif (distance < currentClosestDistance) {\n\t\t\tcurrentClosestDistance = distance;\n\t\t\tcurrentClosestKeyword = keyword;\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tlet r = rgb[0] / 255;\n\tlet g = rgb[1] / 255;\n\tlet b = rgb[2] / 255;\n\n\t// Assume sRGB\n\tr = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);\n\n\tconst x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tconst y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tconst z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tconst xyz = convert.rgb.xyz(rgb);\n\tlet x = xyz[0];\n\tlet y = xyz[1];\n\tlet z = xyz[2];\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);\n\n\tconst l = (116 * y) - 16;\n\tconst a = 500 * (x - y);\n\tconst b = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tconst h = hsl[0] / 360;\n\tconst s = hsl[1] / 100;\n\tconst l = hsl[2] / 100;\n\tlet t2;\n\tlet t3;\n\tlet val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tconst t1 = 2 * l - t2;\n\n\tconst rgb = [0, 0, 0];\n\tfor (let i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tconst h = hsl[0];\n\tlet s = hsl[1] / 100;\n\tlet l = hsl[2] / 100;\n\tlet smin = s;\n\tconst lmin = Math.max(l, 0.01);\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tconst v = (l + s) / 2;\n\tconst sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tconst h = hsv[0] / 60;\n\tconst s = hsv[1] / 100;\n\tlet v = hsv[2] / 100;\n\tconst hi = Math.floor(h) % 6;\n\n\tconst f = h - Math.floor(h);\n\tconst p = 255 * v * (1 - s);\n\tconst q = 255 * v * (1 - (s * f));\n\tconst t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tconst h = hsv[0];\n\tconst s = hsv[1] / 100;\n\tconst v = hsv[2] / 100;\n\tconst vmin = Math.max(v, 0.01);\n\tlet sl;\n\tlet l;\n\n\tl = (2 - s) * v;\n\tconst lmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tconst h = hwb[0] / 360;\n\tlet wh = hwb[1] / 100;\n\tlet bl = hwb[2] / 100;\n\tconst ratio = wh + bl;\n\tlet f;\n\n\t// Wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\tconst i = Math.floor(6 * h);\n\tconst v = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tconst n = wh + f * (v - wh); // Linear interpolation\n\n\tlet r;\n\tlet g;\n\tlet b;\n\t/* eslint-disable max-statements-per-line,no-multi-spaces */\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v;  g = n;  b = wh; break;\n\t\tcase 1: r = n;  g = v;  b = wh; break;\n\t\tcase 2: r = wh; g = v;  b = n; break;\n\t\tcase 3: r = wh; g = n;  b = v; break;\n\t\tcase 4: r = n;  g = wh; b = v; break;\n\t\tcase 5: r = v;  g = wh; b = n; break;\n\t}\n\t/* eslint-enable max-statements-per-line,no-multi-spaces */\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tconst c = cmyk[0] / 100;\n\tconst m = cmyk[1] / 100;\n\tconst y = cmyk[2] / 100;\n\tconst k = cmyk[3] / 100;\n\n\tconst r = 1 - Math.min(1, c * (1 - k) + k);\n\tconst g = 1 - Math.min(1, m * (1 - k) + k);\n\tconst b = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tconst x = xyz[0] / 100;\n\tconst y = xyz[1] / 100;\n\tconst z = xyz[2] / 100;\n\tlet r;\n\tlet g;\n\tlet b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// Assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tlet x = xyz[0];\n\tlet y = xyz[1];\n\tlet z = xyz[2];\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);\n\n\tconst l = (116 * y) - 16;\n\tconst a = 500 * (x - y);\n\tconst b = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tconst l = lab[0];\n\tconst a = lab[1];\n\tconst b = lab[2];\n\tlet x;\n\tlet y;\n\tlet z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tconst y2 = y ** 3;\n\tconst x2 = x ** 3;\n\tconst z2 = z ** 3;\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tconst l = lab[0];\n\tconst a = lab[1];\n\tconst b = lab[2];\n\tlet h;\n\n\tconst hr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tconst c = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tconst l = lch[0];\n\tconst c = lch[1];\n\tconst h = lch[2];\n\n\tconst hr = h / 360 * 2 * Math.PI;\n\tconst a = c * Math.cos(hr);\n\tconst b = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args, saturation = null) {\n\tconst [r, g, b] = args;\n\tlet value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tlet ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// Optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tconst r = args[0];\n\tconst g = args[1];\n\tconst b = args[2];\n\n\t// We use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tconst ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tlet color = args % 10;\n\n\t// Handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tconst mult = (~~(args > 50) + 1) * 0.5;\n\tconst r = ((color & 1) * mult) * 255;\n\tconst g = (((color >> 1) & 1) * mult) * 255;\n\tconst b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// Handle greyscale\n\tif (args >= 232) {\n\t\tconst c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tlet rem;\n\tconst r = Math.floor(args / 36) / 5 * 255;\n\tconst g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tconst b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tconst integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tconst string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tconst match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tlet colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(char => {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tconst integer = parseInt(colorString, 16);\n\tconst r = (integer >> 16) & 0xFF;\n\tconst g = (integer >> 8) & 0xFF;\n\tconst b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst max = Math.max(Math.max(r, g), b);\n\tconst min = Math.min(Math.min(r, g), b);\n\tconst chroma = (max - min);\n\tlet grayscale;\n\tlet hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tconst s = hsl[1] / 100;\n\tconst l = hsl[2] / 100;\n\n\tconst c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));\n\n\tlet f = 0;\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tconst s = hsv[1] / 100;\n\tconst v = hsv[2] / 100;\n\n\tconst c = s * v;\n\tlet f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tconst h = hcg[0] / 360;\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tconst pure = [0, 0, 0];\n\tconst hi = (h % 1) * 6;\n\tconst v = hi % 1;\n\tconst w = 1 - v;\n\tlet mg = 0;\n\n\t/* eslint-disable max-statements-per-line */\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\t/* eslint-enable max-statements-per-line */\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tconst v = c + g * (1.0 - c);\n\tlet f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tconst l = g * (1.0 - c) + 0.5 * c;\n\tlet s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\tconst v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tconst w = hwb[1] / 100;\n\tconst b = hwb[2] / 100;\n\tconst v = 1 - b;\n\tconst c = v - w;\n\tlet g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hsv = convert.gray.hsl;\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tconst val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tconst integer = (val << 16) + (val << 8) + val;\n\n\tconst string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tconst val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n","const conversions = require('./conversions');\n\n/*\n\tThis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tconst graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tconst models = Object.keys(conversions);\n\n\tfor (let len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tconst graph = buildGraph();\n\tconst queue = [fromModel]; // Unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tconst current = queue.pop();\n\t\tconst adjacents = Object.keys(conversions[current]);\n\n\t\tfor (let len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tconst adjacent = adjacents[i];\n\t\t\tconst node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tconst path = [graph[toModel].parent, toModel];\n\tlet fn = conversions[graph[toModel].parent][toModel];\n\n\tlet cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tconst graph = deriveBFS(fromModel);\n\tconst conversion = {};\n\n\tconst models = Object.keys(graph);\n\tfor (let len = models.length, i = 0; i < len; i++) {\n\t\tconst toModel = models[i];\n\t\tconst node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// No possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n","const conversions = require('./conversions');\nconst route = require('./route');\n\nconst convert = {};\n\nconst models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tconst wrappedFn = function (...args) {\n\t\tconst arg0 = args[0];\n\t\tif (arg0 === undefined || arg0 === null) {\n\t\t\treturn arg0;\n\t\t}\n\n\t\tif (arg0.length > 1) {\n\t\t\targs = arg0;\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// Preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tconst wrappedFn = function (...args) {\n\t\tconst arg0 = args[0];\n\n\t\tif (arg0 === undefined || arg0 === null) {\n\t\t\treturn arg0;\n\t\t}\n\n\t\tif (arg0.length > 1) {\n\t\t\targs = arg0;\n\t\t}\n\n\t\tconst result = fn(args);\n\n\t\t// We're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (let len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// Preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(fromModel => {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tconst routes = route(fromModel);\n\tconst routeModels = Object.keys(routes);\n\n\trouteModels.forEach(toModel => {\n\t\tconst fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n","const colorString = require('color-string');\nconst convert = require('color-convert');\n\nconst skippedModels = [\n\t// To be honest, I don't really feel like keyword belongs in color convert, but eh.\n\t'keyword',\n\n\t// Gray conflicts with some method names, and has its own method defined.\n\t'gray',\n\n\t// Shouldn't really be in color-convert either...\n\t'hex',\n];\n\nconst hashedModelKeys = {};\nfor (const model of Object.keys(convert)) {\n\thashedModelKeys[[...convert[model].labels].sort().join('')] = model;\n}\n\nconst limiters = {};\n\nfunction Color(object, model) {\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(object, model);\n\t}\n\n\tif (model && model in skippedModels) {\n\t\tmodel = null;\n\t}\n\n\tif (model && !(model in convert)) {\n\t\tthrow new Error('Unknown model: ' + model);\n\t}\n\n\tlet i;\n\tlet channels;\n\n\tif (object == null) { // eslint-disable-line no-eq-null,eqeqeq\n\t\tthis.model = 'rgb';\n\t\tthis.color = [0, 0, 0];\n\t\tthis.valpha = 1;\n\t} else if (object instanceof Color) {\n\t\tthis.model = object.model;\n\t\tthis.color = [...object.color];\n\t\tthis.valpha = object.valpha;\n\t} else if (typeof object === 'string') {\n\t\tconst result = colorString.get(object);\n\t\tif (result === null) {\n\t\t\tthrow new Error('Unable to parse color from string: ' + object);\n\t\t}\n\n\t\tthis.model = result.model;\n\t\tchannels = convert[this.model].channels;\n\t\tthis.color = result.value.slice(0, channels);\n\t\tthis.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n\t} else if (object.length > 0) {\n\t\tthis.model = model || 'rgb';\n\t\tchannels = convert[this.model].channels;\n\t\tconst newArray = Array.prototype.slice.call(object, 0, channels);\n\t\tthis.color = zeroArray(newArray, channels);\n\t\tthis.valpha = typeof object[channels] === 'number' ? object[channels] : 1;\n\t} else if (typeof object === 'number') {\n\t\t// This is always RGB - can be converted later on.\n\t\tthis.model = 'rgb';\n\t\tthis.color = [\n\t\t\t(object >> 16) & 0xFF,\n\t\t\t(object >> 8) & 0xFF,\n\t\t\tobject & 0xFF,\n\t\t];\n\t\tthis.valpha = 1;\n\t} else {\n\t\tthis.valpha = 1;\n\n\t\tconst keys = Object.keys(object);\n\t\tif ('alpha' in object) {\n\t\t\tkeys.splice(keys.indexOf('alpha'), 1);\n\t\t\tthis.valpha = typeof object.alpha === 'number' ? object.alpha : 0;\n\t\t}\n\n\t\tconst hashedKeys = keys.sort().join('');\n\t\tif (!(hashedKeys in hashedModelKeys)) {\n\t\t\tthrow new Error('Unable to parse color from object: ' + JSON.stringify(object));\n\t\t}\n\n\t\tthis.model = hashedModelKeys[hashedKeys];\n\n\t\tconst {labels} = convert[this.model];\n\t\tconst color = [];\n\t\tfor (i = 0; i < labels.length; i++) {\n\t\t\tcolor.push(object[labels[i]]);\n\t\t}\n\n\t\tthis.color = zeroArray(color);\n\t}\n\n\t// Perform limitations (clamping, etc.)\n\tif (limiters[this.model]) {\n\t\tchannels = convert[this.model].channels;\n\t\tfor (i = 0; i < channels; i++) {\n\t\t\tconst limit = limiters[this.model][i];\n\t\t\tif (limit) {\n\t\t\t\tthis.color[i] = limit(this.color[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.valpha = Math.max(0, Math.min(1, this.valpha));\n\n\tif (Object.freeze) {\n\t\tObject.freeze(this);\n\t}\n}\n\nColor.prototype = {\n\ttoString() {\n\t\treturn this.string();\n\t},\n\n\ttoJSON() {\n\t\treturn this[this.model]();\n\t},\n\n\tstring(places) {\n\t\tlet self = this.model in colorString.to ? this : this.rgb();\n\t\tself = self.round(typeof places === 'number' ? places : 1);\n\t\tconst args = self.valpha === 1 ? self.color : [...self.color, this.valpha];\n\t\treturn colorString.to[self.model](args);\n\t},\n\n\tpercentString(places) {\n\t\tconst self = this.rgb().round(typeof places === 'number' ? places : 1);\n\t\tconst args = self.valpha === 1 ? self.color : [...self.color, this.valpha];\n\t\treturn colorString.to.rgb.percent(args);\n\t},\n\n\tarray() {\n\t\treturn this.valpha === 1 ? [...this.color] : [...this.color, this.valpha];\n\t},\n\n\tobject() {\n\t\tconst result = {};\n\t\tconst {channels} = convert[this.model];\n\t\tconst {labels} = convert[this.model];\n\n\t\tfor (let i = 0; i < channels; i++) {\n\t\t\tresult[labels[i]] = this.color[i];\n\t\t}\n\n\t\tif (this.valpha !== 1) {\n\t\t\tresult.alpha = this.valpha;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tunitArray() {\n\t\tconst rgb = this.rgb().color;\n\t\trgb[0] /= 255;\n\t\trgb[1] /= 255;\n\t\trgb[2] /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.push(this.valpha);\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tunitObject() {\n\t\tconst rgb = this.rgb().object();\n\t\trgb.r /= 255;\n\t\trgb.g /= 255;\n\t\trgb.b /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.alpha = this.valpha;\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tround(places) {\n\t\tplaces = Math.max(places || 0, 0);\n\t\treturn new Color([...this.color.map(roundToPlace(places)), this.valpha], this.model);\n\t},\n\n\talpha(value) {\n\t\tif (value !== undefined) {\n\t\t\treturn new Color([...this.color, Math.max(0, Math.min(1, value))], this.model);\n\t\t}\n\n\t\treturn this.valpha;\n\t},\n\n\t// Rgb\n\tred: getset('rgb', 0, maxfn(255)),\n\tgreen: getset('rgb', 1, maxfn(255)),\n\tblue: getset('rgb', 2, maxfn(255)),\n\n\thue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, value => ((value % 360) + 360) % 360),\n\n\tsaturationl: getset('hsl', 1, maxfn(100)),\n\tlightness: getset('hsl', 2, maxfn(100)),\n\n\tsaturationv: getset('hsv', 1, maxfn(100)),\n\tvalue: getset('hsv', 2, maxfn(100)),\n\n\tchroma: getset('hcg', 1, maxfn(100)),\n\tgray: getset('hcg', 2, maxfn(100)),\n\n\twhite: getset('hwb', 1, maxfn(100)),\n\twblack: getset('hwb', 2, maxfn(100)),\n\n\tcyan: getset('cmyk', 0, maxfn(100)),\n\tmagenta: getset('cmyk', 1, maxfn(100)),\n\tyellow: getset('cmyk', 2, maxfn(100)),\n\tblack: getset('cmyk', 3, maxfn(100)),\n\n\tx: getset('xyz', 0, maxfn(95.047)),\n\ty: getset('xyz', 1, maxfn(100)),\n\tz: getset('xyz', 2, maxfn(108.833)),\n\n\tl: getset('lab', 0, maxfn(100)),\n\ta: getset('lab', 1),\n\tb: getset('lab', 2),\n\n\tkeyword(value) {\n\t\tif (value !== undefined) {\n\t\t\treturn new Color(value);\n\t\t}\n\n\t\treturn convert[this.model].keyword(this.color);\n\t},\n\n\thex(value) {\n\t\tif (value !== undefined) {\n\t\t\treturn new Color(value);\n\t\t}\n\n\t\treturn colorString.to.hex(this.rgb().round().color);\n\t},\n\n\thexa(value) {\n\t\tif (value !== undefined) {\n\t\t\treturn new Color(value);\n\t\t}\n\n\t\tconst rgbArray = this.rgb().round().color;\n\n\t\tlet alphaHex = Math.round(this.valpha * 255).toString(16).toUpperCase();\n\t\tif (alphaHex.length === 1) {\n\t\t\talphaHex = '0' + alphaHex;\n\t\t}\n\n\t\treturn colorString.to.hex(rgbArray) + alphaHex;\n\t},\n\n\trgbNumber() {\n\t\tconst rgb = this.rgb().color;\n\t\treturn ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);\n\t},\n\n\tluminosity() {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tconst rgb = this.rgb().color;\n\n\t\tconst lum = [];\n\t\tfor (const [i, element] of rgb.entries()) {\n\t\t\tconst chan = element / 255;\n\t\t\tlum[i] = (chan <= 0.04045) ? chan / 12.92 : ((chan + 0.055) / 1.055) ** 2.4;\n\t\t}\n\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast(color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tconst lum1 = this.luminosity();\n\t\tconst lum2 = color2.luminosity();\n\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel(color2) {\n\t\t// https://www.w3.org/TR/WCAG/#contrast-enhanced\n\t\tconst contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tisDark() {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tconst rgb = this.rgb().color;\n\t\tconst yiq = (rgb[0] * 2126 + rgb[1] * 7152 + rgb[2] * 722) / 10000;\n\t\treturn yiq < 128;\n\t},\n\n\tisLight() {\n\t\treturn !this.isDark();\n\t},\n\n\tnegate() {\n\t\tconst rgb = this.rgb();\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\trgb.color[i] = 255 - rgb.color[i];\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tlighten(ratio) {\n\t\tconst hsl = this.hsl();\n\t\thsl.color[2] += hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdarken(ratio) {\n\t\tconst hsl = this.hsl();\n\t\thsl.color[2] -= hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tsaturate(ratio) {\n\t\tconst hsl = this.hsl();\n\t\thsl.color[1] += hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdesaturate(ratio) {\n\t\tconst hsl = this.hsl();\n\t\thsl.color[1] -= hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\twhiten(ratio) {\n\t\tconst hwb = this.hwb();\n\t\thwb.color[1] += hwb.color[1] * ratio;\n\t\treturn hwb;\n\t},\n\n\tblacken(ratio) {\n\t\tconst hwb = this.hwb();\n\t\thwb.color[2] += hwb.color[2] * ratio;\n\t\treturn hwb;\n\t},\n\n\tgrayscale() {\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tconst rgb = this.rgb().color;\n\t\tconst value = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\treturn Color.rgb(value, value, value);\n\t},\n\n\tfade(ratio) {\n\t\treturn this.alpha(this.valpha - (this.valpha * ratio));\n\t},\n\n\topaquer(ratio) {\n\t\treturn this.alpha(this.valpha + (this.valpha * ratio));\n\t},\n\n\trotate(degrees) {\n\t\tconst hsl = this.hsl();\n\t\tlet hue = hsl.color[0];\n\t\thue = (hue + degrees) % 360;\n\t\thue = hue < 0 ? 360 + hue : hue;\n\t\thsl.color[0] = hue;\n\t\treturn hsl;\n\t},\n\n\tmix(mixinColor, weight) {\n\t\t// Ported from sass implementation in C\n\t\t// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t\tif (!mixinColor || !mixinColor.rgb) {\n\t\t\tthrow new Error('Argument to \"mix\" was not a Color instance, but rather an instance of ' + typeof mixinColor);\n\t\t}\n\n\t\tconst color1 = mixinColor.rgb();\n\t\tconst color2 = this.rgb();\n\t\tconst p = weight === undefined ? 0.5 : weight;\n\n\t\tconst w = 2 * p - 1;\n\t\tconst a = color1.alpha() - color2.alpha();\n\n\t\tconst w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2;\n\t\tconst w2 = 1 - w1;\n\n\t\treturn Color.rgb(\n\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\tw1 * color1.blue() + w2 * color2.blue(),\n\t\t\tcolor1.alpha() * p + color2.alpha() * (1 - p));\n\t},\n};\n\n// Model conversion methods and static constructors\nfor (const model of Object.keys(convert)) {\n\tif (skippedModels.includes(model)) {\n\t\tcontinue;\n\t}\n\n\tconst {channels} = convert[model];\n\n\t// Conversion methods\n\tColor.prototype[model] = function (...args) {\n\t\tif (this.model === model) {\n\t\t\treturn new Color(this);\n\t\t}\n\n\t\tif (args.length > 0) {\n\t\t\treturn new Color(args, model);\n\t\t}\n\n\t\treturn new Color([...assertArray(convert[this.model][model].raw(this.color)), this.valpha], model);\n\t};\n\n\t// 'static' construction methods\n\tColor[model] = function (...args) {\n\t\tlet color = args[0];\n\t\tif (typeof color === 'number') {\n\t\t\tcolor = zeroArray(args, channels);\n\t\t}\n\n\t\treturn new Color(color, model);\n\t};\n}\n\nfunction roundTo(number, places) {\n\treturn Number(number.toFixed(places));\n}\n\nfunction roundToPlace(places) {\n\treturn function (number) {\n\t\treturn roundTo(number, places);\n\t};\n}\n\nfunction getset(model, channel, modifier) {\n\tmodel = Array.isArray(model) ? model : [model];\n\n\tfor (const m of model) {\n\t\t(limiters[m] || (limiters[m] = []))[channel] = modifier;\n\t}\n\n\tmodel = model[0];\n\n\treturn function (value) {\n\t\tlet result;\n\n\t\tif (value !== undefined) {\n\t\t\tif (modifier) {\n\t\t\t\tvalue = modifier(value);\n\t\t\t}\n\n\t\t\tresult = this[model]();\n\t\t\tresult.color[channel] = value;\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = this[model]().color[channel];\n\t\tif (modifier) {\n\t\t\tresult = modifier(result);\n\t\t}\n\n\t\treturn result;\n\t};\n}\n\nfunction maxfn(max) {\n\treturn function (v) {\n\t\treturn Math.max(0, Math.min(max, v));\n\t};\n}\n\nfunction assertArray(value) {\n\treturn Array.isArray(value) ? value : [value];\n}\n\nfunction zeroArray(array, length) {\n\tfor (let i = 0; i < length; i++) {\n\t\tif (typeof array[i] !== 'number') {\n\t\t\tarray[i] = 0;\n\t\t}\n\t}\n\n\treturn array;\n}\n\nmodule.exports = Color;\n","// package/cleveref/provides.ts\nvar macros = {\n  cref: { signature: \"s m\" },\n  Cref: { signature: \"s m\" },\n  crefrange: { signature: \"s m m\" },\n  Crefrange: { signature: \"s m m\" },\n  cpageref: { signature: \"s m\" },\n  Cpageref: { signature: \"s m\" },\n  ref: { signature: \"m\" },\n  pageref: { signature: \"m\" },\n  namecref: { signature: \"m\" },\n  nameCref: { signature: \"m\" },\n  lcnamecref: { signature: \"m\" },\n  namecrefs: { signature: \"m\" },\n  nameCrefs: { signature: \"m\" },\n  lcnamecrefs: { signature: \"m\" },\n  labelcref: { signature: \"m\" },\n  labelcpageref: { signature: \"m\" },\n  crefalias: { signature: \"m m\" },\n  crefname: { signature: \"m m m\" },\n  // XXX there are many more obscure commands to add here\n  // https://ctan.org/pkg/cleveref\n  crefdefaultlabelformat: { signature: \"m\" },\n  crefrangeconjunction: { signature: \"m\" }\n};\nvar environments = {};\n\n// utils/enumerate.ts\nimport { arg } from \"@unified-latex/unified-latex-builder\";\nimport { match } from \"@unified-latex/unified-latex-util-match\";\nimport { updateRenderInfo } from \"@unified-latex/unified-latex-util-render-info\";\nimport {\n  lastSignificantNodeIndex\n} from \"@unified-latex/unified-latex-util-replace\";\nimport { splitOnMacro } from \"@unified-latex/unified-latex-util-split\";\nimport { trim, trimEnd } from \"@unified-latex/unified-latex-util-trim\";\nfunction cleanEnumerateBody(ast, itemName = \"item\") {\n  let { segments, macros: macros17 } = splitOnMacro(ast, itemName);\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    if (i === 0) {\n      trimEnd(segment);\n    } else {\n      trim(segment);\n    }\n    if (segment.length > 0 && i > 0) {\n      segment.unshift({ type: \"whitespace\" });\n    }\n  }\n  let insertParbreakBefore = /* @__PURE__ */ new WeakSet();\n  let body = macros17.flatMap((node, i) => {\n    var _a;\n    const segment = segments[i + 1];\n    const trailingComments = popTrailingComments(segment);\n    node.args = node.args || [];\n    node.args.push(arg(segment, { openMark: \"\", closeMark: \"\" }));\n    updateRenderInfo(node, { inParMode: true });\n    if (i > 0 || ((_a = segments[0]) == null ? void 0 : _a.length) > 0) {\n      insertParbreakBefore.add(node);\n    }\n    return [node, ...trailingComments];\n  });\n  body = body.flatMap(\n    (node) => insertParbreakBefore.has(node) ? [{ type: \"parbreak\" }, node] : node\n  );\n  body.unshift(...segments[0]);\n  for (let i = 0; i < body.length - 1; i++) {\n    const node = body[i];\n    const nextNode = body[i + 1];\n    if (!match.parbreak(nextNode)) {\n      continue;\n    }\n    if (match.comment(node)) {\n      node.suffixParbreak = true;\n    }\n    if (match.macro(node) && node.args && node.args[node.args.length - 1].closeMark === \"\") {\n      const args = node.args[node.args.length - 1].content;\n      const lastArg = args[args.length - 1];\n      if (match.comment(lastArg)) {\n        lastArg.suffixParbreak = true;\n      }\n    }\n  }\n  return body;\n}\nfunction popTrailingComments(nodes) {\n  let lastNodeIndex = lastSignificantNodeIndex(nodes, true);\n  if (lastNodeIndex === nodes.length - 1 || lastNodeIndex == null && nodes.length === 0) {\n    return [];\n  }\n  if (lastNodeIndex == null) {\n    lastNodeIndex = -1;\n  }\n  return nodes.splice(lastNodeIndex + 1);\n}\n\n// package/exam/provides.ts\nvar macros2 = {\n  answerline: { signature: \"o\" },\n  fillin: { signature: \"o o\" },\n  fullwidth: { signature: \"m\" },\n  fillwidthlines: { signature: \"m\" },\n  fillwidthdottedlines: { signature: \"m\" },\n  fillwidthgrid: { signature: \"m\" },\n  makeemptybox: { signature: \"m\" },\n  CorrectChoiceEmphasis: {\n    signature: \"m\",\n    renderInfo: { breakAround: true }\n  },\n  SolutionEmphasis: { signature: \"m\", renderInfo: { breakAround: true } },\n  uplevel: { signature: \"m\", renderInfo: { breakAround: true } },\n  checkboxchar: { signature: \"m\", renderInfo: { breakAround: true } },\n  checkedchar: { signature: \"m\", renderInfo: { breakAround: true } },\n  pointname: { signature: \"m\", renderInfo: { breakAround: true } },\n  marginpointname: { signature: \"m\", renderInfo: { breakAround: true } },\n  extrawidth: { signature: \"m\", renderInfo: { breakAround: true } },\n  pointformat: { signature: \"m\", renderInfo: { breakAround: true } },\n  bonuspointformat: { signature: \"m\", renderInfo: { breakAround: true } },\n  totalformat: { signature: \"m\", renderInfo: { breakAround: true } },\n  qformat: { signature: \"m\", renderInfo: { breakAround: true } },\n  titledquestion: { signature: \"m o\", renderInfo: { breakAround: true } },\n  pointpoints: { signature: \"m m\", renderInfo: { breakAround: true } },\n  bonuspointpoints: { signature: \"m m\", renderInfo: { breakAround: true } }\n};\nvar environments2 = {\n  choices: {\n    signature: \"o\",\n    processContent: (nodes) => cleanEnumerateBody(nodes, \"choice\")\n  },\n  checkboxes: {\n    signature: \"o\",\n    processContent: (nodes) => cleanEnumerateBody(nodes, \"choice\")\n  },\n  oneparchoices: {\n    signature: \"o\",\n    processContent: (nodes) => cleanEnumerateBody(nodes, \"choice\")\n  },\n  oneparcheckboxes: {\n    signature: \"o\",\n    processContent: (nodes) => cleanEnumerateBody(nodes, \"choice\")\n  },\n  parts: {\n    signature: \"o\",\n    processContent: (nodes) => cleanEnumerateBody(nodes, \"part\")\n  },\n  subparts: {\n    signature: \"o\",\n    processContent: (nodes) => cleanEnumerateBody(nodes, \"subpart\")\n  },\n  subsubparts: {\n    signature: \"o\",\n    processContent: (nodes) => cleanEnumerateBody(nodes, \"subsubpart\")\n  },\n  questions: {\n    signature: \"o\",\n    processContent: (nodes) => cleanEnumerateBody(nodes, \"question\")\n  }\n};\n\n// package/geometry/provides.ts\nvar macros3 = {\n  geometry: {\n    signature: \"m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  }\n};\nvar environments3 = {};\n\n// package/hyperref/provides.ts\nvar macros4 = {\n  hypersetup: {\n    signature: \"m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  href: { signature: \"o m m\" },\n  url: { signature: \"m\" },\n  nolinkurl: { signature: \"m\" },\n  hyperbaseurl: { signature: \"m\" },\n  hyperimage: { signature: \"m m\" },\n  hyperdef: { signature: \"m m m\" },\n  hyperref: { signature: \"o m\" },\n  hyperlink: { signature: \"m m\" },\n  hypertarget: { signature: \"m m\" },\n  autoref: { signature: \"s m\" },\n  pageref: { signature: \"s m\" },\n  autopageref: { signature: \"s m\" },\n  pdfstringdef: { signature: \"m m\" },\n  pdfbookmark: { signature: \"o m m\" },\n  currentpdfbookmark: { signature: \"m m\" },\n  subpdfbookmark: { signature: \"m m\" },\n  belowpdfbookmark: { signature: \"m m\" },\n  texorpdfstring: { signature: \"m m\" },\n  thispdfpagelabel: { signature: \"m\" },\n  hypercalcbp: { signature: \"m\" }\n};\nvar environments4 = {};\n\n// package/latex2e/provides.ts\nimport { trim as trim2 } from \"@unified-latex/unified-latex-util-trim\";\nvar macros5 = {\n  // Special\n  \"\\\\\": { signature: \"!s !o\" },\n  _: { signature: \"m\", escapeToken: \"\" },\n  \"^\": { signature: \"m\", escapeToken: \"\" },\n  // \\newcommand arg signature from https://www.texdev.net/2020/08/19/the-good-the-bad-and-the-ugly-creating-document-commands\n  // List can be found in latex2e.pdf \"An unofficial reference manual\"\n  newcommand: {\n    signature: \"s +m o +o +m\",\n    renderInfo: {\n      breakAround: true,\n      namedArguments: [\"starred\", \"name\", \"numArgs\", \"default\", \"body\"]\n    }\n  },\n  renewcommand: {\n    signature: \"s +m o +o +m\",\n    renderInfo: {\n      breakAround: true,\n      namedArguments: [\"starred\", \"name\", \"numArgs\", \"default\", \"body\"]\n    }\n  },\n  providecommand: {\n    signature: \"s +m o +o +m\",\n    renderInfo: { breakAround: true }\n  },\n  // Counters\n  newcounter: {\n    signature: \"m o\",\n    renderInfo: { breakAround: true }\n  },\n  usecounter: {\n    signature: \"m\"\n  },\n  setcounter: {\n    signature: \"m m\",\n    renderInfo: { breakAround: true }\n  },\n  addtocounter: {\n    signature: \"m m\",\n    renderInfo: { breakAround: true }\n  },\n  stepcounter: {\n    signature: \"m\",\n    renderInfo: { breakAround: true }\n  },\n  refstepcounter: {\n    signature: \"m\",\n    renderInfo: { breakAround: true }\n  },\n  // Lengths\n  newlength: {\n    signature: \"m\",\n    renderInfo: { breakAround: true }\n  },\n  addtolength: {\n    signature: \"m m\",\n    renderInfo: { breakAround: true }\n  },\n  settodepth: {\n    signature: \"m m\",\n    renderInfo: { breakAround: true }\n  },\n  settoheight: {\n    signature: \"m m\",\n    renderInfo: { breakAround: true }\n  },\n  settowidth: {\n    signature: \"m m\",\n    renderInfo: { breakAround: true }\n  },\n  // Spaces\n  stretch: { signature: \"m\" },\n  hspace: { signature: \"s m\" },\n  vspace: { signature: \"s m\", renderInfo: { breakAround: true } },\n  vfill: { renderInfo: { breakAround: true } },\n  indent: { renderInfo: { breakAround: true } },\n  phantom: { signature: \"m\" },\n  vphantom: { signature: \"m\" },\n  hphantom: { signature: \"m\" },\n  noindent: { renderInfo: { breakAround: true } },\n  smallskip: { renderInfo: { breakAround: true } },\n  medskip: { renderInfo: { breakAround: true } },\n  bigskip: { renderInfo: { breakAround: true } },\n  smallbreak: { renderInfo: { breakAround: true } },\n  medbreak: { renderInfo: { breakAround: true } },\n  bigbreak: { renderInfo: { breakAround: true } },\n  newline: { renderInfo: { breakAround: true } },\n  linebreak: { signature: \"o\", renderInfo: { breakAround: true } },\n  nolinebreak: { signature: \"o\", renderInfo: { breakAround: true } },\n  clearpage: { renderInfo: { breakAround: true } },\n  cleardoublepage: { renderInfo: { breakAround: true } },\n  newpage: { renderInfo: { breakAround: true } },\n  enlargethispage: { signature: \"s\", renderInfo: { breakAround: true } },\n  pagebreak: { signature: \"o\", renderInfo: { breakAround: true } },\n  nopagebreak: { signature: \"o\", renderInfo: { breakAround: true } },\n  // Boxes\n  newsavebox: {\n    signature: \"m\",\n    renderInfo: { breakAround: true }\n  },\n  sbox: {\n    signature: \"m m\",\n    renderInfo: { breakAround: true }\n  },\n  savebox: {\n    signature: \"m o o m\",\n    renderInfo: { breakAround: true }\n  },\n  mbox: { signature: \"m\" },\n  makebox: { signature: \"d() o o m\", renderInfo: { breakAround: true } },\n  fbox: { signature: \"m\" },\n  framebox: { signature: \"o o m\", renderInfo: { breakAround: true } },\n  frame: { signature: \"m\", renderInfo: { breakAround: true } },\n  parbox: { signature: \"o o o m m\", renderInfo: { breakAround: true } },\n  raisebox: { signature: \"m o o m\" },\n  marginpar: { signature: \"o m\", renderInfo: { breakAround: true } },\n  colorbox: { signature: \"o m m\", renderInfo: { breakAround: true } },\n  fcolorbox: { signature: \"o m m\", renderInfo: { breakAround: true } },\n  rotatebox: { signature: \"o m m\" },\n  scalebox: { signature: \"m o m\" },\n  reflectbox: { signature: \"m\" },\n  resizebox: { signature: \"s m m m\" },\n  // Define environments\n  newenvironment: {\n    signature: \"s m o o m m\",\n    renderInfo: { breakAround: true }\n  },\n  renewenvironment: {\n    signature: \"s m o o m m\",\n    renderInfo: { breakAround: true }\n  },\n  newtheorem: {\n    signature: \"s m o m o\",\n    renderInfo: { breakAround: true }\n  },\n  newfont: {\n    signature: \"m m\",\n    renderInfo: { breakAround: true }\n  },\n  // Counters\n  alph: { signature: \"m\" },\n  Alph: { signature: \"m\" },\n  arabic: { signature: \"m\" },\n  roman: { signature: \"m\" },\n  Roman: { signature: \"m\" },\n  fnsymbol: { signature: \"m\" },\n  // Other\n  documentclass: {\n    signature: \"o m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  usepackage: {\n    signature: \"o m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  item: {\n    signature: \"o\",\n    renderInfo: { hangingIndent: true, namedArguments: [\"label\"] }\n  },\n  value: { signature: \"m\" },\n  centering: { renderInfo: { breakAround: true } },\n  input: { signature: \"m\", renderInfo: { breakAround: true } },\n  include: { signature: \"m\", renderInfo: { breakAround: true } },\n  includeonly: {\n    signature: \"m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  discretionary: { signature: \"m m m\" },\n  hyphenation: { signature: \"m m m\" },\n  footnote: { signature: \"o m\", renderInfo: { inParMode: true } },\n  footnotemark: { signature: \"o\" },\n  footnotetext: { signature: \"o m\", renderInfo: { inParMode: true } },\n  caption: {\n    signature: \"o m\",\n    renderInfo: { inParMode: true, breakAround: true }\n  },\n  // Math Commands\n  sqrt: { signature: \"o m\", renderInfo: { inMathMode: true } },\n  frac: { signature: \"m m\", renderInfo: { inMathMode: true } },\n  stackrel: { signature: \"m m\" },\n  ensuremath: { signature: \"m\", renderInfo: { inMathMode: true } },\n  // Layout commands\n  abstract: {\n    signature: \"m\",\n    renderInfo: { breakAround: true, inParMode: true }\n  },\n  maketitle: { renderInfo: { breakAround: true } },\n  doublespacing: { renderInfo: { breakAround: true } },\n  singlespacing: { renderInfo: { breakAround: true } },\n  author: {\n    signature: \"m\",\n    renderInfo: { breakAround: true, inParMode: true }\n  },\n  date: { signature: \"o m\", renderInfo: { breakAround: true } },\n  thanks: {\n    signature: \"m\",\n    renderInfo: { breakAround: true, inParMode: true }\n  },\n  // amsart document class adds an optional argument\n  title: {\n    signature: \"o m\",\n    renderInfo: { breakAround: true, inParMode: true }\n  },\n  pagenumbering: { signature: \"m\", renderInfo: { breakAround: true } },\n  pagestyle: { signature: \"m\", renderInfo: { breakAround: true } },\n  thispagestyle: { signature: \"m\", renderInfo: { breakAround: true } },\n  // Colors\n  definecolor: { signature: \"m m m\", renderInfo: { breakAround: true } },\n  pagecolor: { signature: \"o m\", renderInfo: { breakAround: true } },\n  nopagecolor: { renderInfo: { breakAround: true } },\n  multicolumn: { signature: \"m m m\" },\n  // Graphics\n  includegraphics: {\n    signature: \"s o o m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  rule: { signature: \"o m m\" },\n  // Sectioning\n  part: {\n    signature: \"s o m\",\n    renderInfo: {\n      breakAround: true,\n      inParMode: true,\n      namedArguments: [\"starred\", \"tocTitle\", \"title\"]\n    }\n  },\n  chapter: {\n    signature: \"s o m\",\n    renderInfo: {\n      breakAround: true,\n      inParMode: true,\n      namedArguments: [\"starred\", \"tocTitle\", \"title\"]\n    }\n  },\n  section: {\n    signature: \"s o m\",\n    renderInfo: {\n      breakAround: true,\n      inParMode: true,\n      namedArguments: [\"starred\", \"tocTitle\", \"title\"]\n    }\n  },\n  subsection: {\n    signature: \"s o m\",\n    renderInfo: {\n      breakAround: true,\n      inParMode: true,\n      namedArguments: [\"starred\", \"tocTitle\", \"title\"]\n    }\n  },\n  subsubsection: {\n    signature: \"s o m\",\n    renderInfo: {\n      breakAround: true,\n      inParMode: true,\n      namedArguments: [\"starred\", \"tocTitle\", \"title\"]\n    }\n  },\n  paragraph: {\n    signature: \"s o m\",\n    renderInfo: {\n      breakAround: true,\n      inParMode: true,\n      namedArguments: [\"starred\", \"tocTitle\", \"title\"]\n    }\n  },\n  subparagraph: {\n    signature: \"s o m\",\n    renderInfo: {\n      breakAround: true,\n      inParMode: true,\n      namedArguments: [\"starred\", \"tocTitle\", \"title\"]\n    }\n  },\n  appendix: { renderInfo: { breakAround: true, inParMode: true } },\n  frontmatter: { renderInfo: { breakAround: true, inParMode: true } },\n  mainmatter: { renderInfo: { breakAround: true, inParMode: true } },\n  backmatter: { renderInfo: { breakAround: true, inParMode: true } },\n  // Citing and references\n  bibitem: { signature: \"o m\", renderInfo: { hangingIndent: true } },\n  cite: { signature: \"o m\" },\n  // Fonts\n  textrm: { signature: \"m\", renderInfo: { inParMode: true } },\n  textit: { signature: \"m\", renderInfo: { inParMode: true } },\n  textmd: { signature: \"m\", renderInfo: { inParMode: true } },\n  textbf: { signature: \"m\", renderInfo: { inParMode: true } },\n  textup: { signature: \"m\", renderInfo: { inParMode: true } },\n  textsl: { signature: \"m\", renderInfo: { inParMode: true } },\n  textsf: { signature: \"m\", renderInfo: { inParMode: true } },\n  textsc: { signature: \"m\", renderInfo: { inParMode: true } },\n  texttt: { signature: \"m\", renderInfo: { inParMode: true } },\n  emph: { signature: \"m\", renderInfo: { inParMode: true } },\n  textnormal: { signature: \"m\", renderInfo: { inParMode: true } },\n  uppercase: { signature: \"m\", renderInfo: { inParMode: true } },\n  mathbf: { signature: \"m\" },\n  mathsf: { signature: \"m\" },\n  mathtt: { signature: \"m\" },\n  mathit: { signature: \"m\" },\n  mathnormal: { signature: \"m\" },\n  mathcal: { signature: \"m\" },\n  mathrm: { signature: \"m\" },\n  // Other\n  setlength: { signature: \"m m\", renderInfo: { breakAround: true } },\n  ref: { signature: \"s m\" },\n  label: { signature: \"o m\" },\n  // cleveref changes \\label to have this signature\n  printbibliography: { renderInfo: { breakAround: true } },\n  addtocontents: { signature: \"m m\", renderInfo: { breakAround: true } },\n  addcontentsline: { signature: \"m m m\", renderInfo: { breakAround: true } },\n  contentsline: { signature: \"m m m\", renderInfo: { breakAround: true } },\n  bibliography: { signature: \"m\", renderInfo: { breakAround: true } },\n  bibliographystyle: { signature: \"m\", renderInfo: { breakAround: true } }\n};\nvar environments5 = {\n  document: {\n    processContent: (nodes) => {\n      trim2(nodes);\n      return nodes;\n    }\n  },\n  array: { signature: \"o m\", renderInfo: { alignContent: true } },\n  description: { signature: \"o\", processContent: cleanEnumerateBody },\n  enumerate: {\n    signature: \"o\",\n    processContent: cleanEnumerateBody,\n    renderInfo: { pgfkeysArgs: true }\n  },\n  itemize: { signature: \"o\", processContent: cleanEnumerateBody },\n  trivlist: { signature: \"o\", processContent: cleanEnumerateBody },\n  list: { signature: \"m m\", processContent: cleanEnumerateBody },\n  figure: { signature: \"o\" },\n  \"figure*\": { signature: \"o\" },\n  filecontents: { signature: \"o m\" },\n  \"filecontents*\": { signature: \"o m\" },\n  minipage: { signature: \"o o o m\" },\n  picture: { signature: \"r() d()\" },\n  tabbing: { renderInfo: { alignContent: true } },\n  table: { signature: \"o\" },\n  tabular: { signature: \"o m\", renderInfo: { alignContent: true } },\n  \"tabular*\": { signature: \"m o m\", renderInfo: { alignContent: true } },\n  thebibliography: {\n    signature: \"m\",\n    processContent: (nodes) => cleanEnumerateBody(nodes, \"bibitem\")\n  },\n  // Math\n  math: { renderInfo: { inMathMode: true } }\n};\n\n// package/listings/libs/argument-parser.ts\nimport { arg as arg2 } from \"@unified-latex/unified-latex-builder\";\nimport { parse as parseArgspec } from \"@unified-latex/unified-latex-util-argspec\";\nimport { gobbleSingleArgument } from \"@unified-latex/unified-latex-util-arguments\";\nimport { match as match2 } from \"@unified-latex/unified-latex-util-match\";\nvar argSpecM = parseArgspec(\"m\")[0];\nvar argSpecO = parseArgspec(\"o\")[0];\nvar argSpecRDelim = {};\nvar argumentParser = (nodes, startPos) => {\n  const { argument: optionalArg, nodesRemoved: optionalArgNodesRemoved } = gobbleSingleArgument(nodes, argSpecO, startPos);\n  let codeArg = null;\n  let codeArgNodesRemoved = 0;\n  const nextNode = nodes[startPos];\n  if (match2.group(nextNode)) {\n    const mandatoryArg = gobbleSingleArgument(nodes, argSpecM, startPos);\n    codeArg = mandatoryArg.argument;\n    codeArgNodesRemoved = mandatoryArg.nodesRemoved;\n  } else if (match2.string(nextNode) && nextNode.content.length === 1) {\n    const delim = nextNode.content;\n    argSpecRDelim[delim] = argSpecRDelim[delim] || parseArgspec(`r${delim}${delim}`)[0];\n    const delimArg = gobbleSingleArgument(\n      nodes,\n      argSpecRDelim[delim],\n      startPos\n    );\n    codeArg = delimArg.argument;\n    codeArgNodesRemoved = delimArg.nodesRemoved;\n  }\n  return {\n    args: [optionalArg || arg2(null), codeArg || arg2(null)],\n    nodesRemoved: optionalArgNodesRemoved + codeArgNodesRemoved\n  };\n};\n\n// package/listings/provides.ts\nvar macros6 = {\n  lstset: { signature: \"m\" },\n  lstinline: { argumentParser },\n  lstinputlisting: { signature: \"o m\" },\n  lstdefinestyle: { signature: \"m m\" },\n  lstnewenvironment: { signature: \"m o o m m\" },\n  lstMakeShortInline: { signature: \"o m\" },\n  lstDeleteShortInline: { signature: \"m\" },\n  lstdefineformat: { signature: \"m m\" },\n  lstdefinelanguage: { signature: \"o m o m o\" },\n  lstalias: { signature: \"o m o m\" },\n  lstloadlanguages: { signature: \"m\" }\n};\nvar environments6 = {};\n\n// package/makeidx/provides.ts\nvar macros7 = {\n  see: { signature: \"m m\" },\n  seealso: { signature: \"m m\" },\n  seename: { signature: \"m\" },\n  alsoname: { signature: \"m\" },\n  index: { signature: \"m\" }\n};\nvar environments7 = {};\n\n// package/mathtools/provides.ts\nvar macros8 = {\n  mathtoolsset: {\n    signature: \"m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  mathllap: {\n    signature: \"o m\"\n  },\n  mathrlap: {\n    signature: \"o m\"\n  },\n  mathclap: {\n    signature: \"o m\"\n  },\n  clap: {\n    signature: \"m\"\n  },\n  mathmbox: {\n    signature: \"m\"\n  },\n  mathmakebox: {\n    signature: \"o o m\"\n  },\n  cramped: {\n    signature: \"o m\"\n  },\n  crampedllap: {\n    signature: \"o m\"\n  },\n  crampedrlap: {\n    signature: \"o m\"\n  },\n  crampedclap: {\n    signature: \"o m\"\n  },\n  crampedsubstack: {\n    signature: \"o m\"\n  },\n  smashoperator: {\n    signature: \"o m\"\n  },\n  newtagform: {\n    signature: \"m o m m\"\n  },\n  renewtagform: {\n    signature: \"m o m m\"\n  },\n  usetagform: {\n    signature: \"m\"\n  },\n  xleftrightarrow: { signature: \"o m\" },\n  xLeftarrow: { signature: \"o m\" },\n  xhookleftarrow: { signature: \"o m\" },\n  xmapsto: { signature: \"o m\" },\n  xRightarrow: { signature: \"o m\" },\n  xLeftrightarrow: { signature: \"o m\" },\n  xhookrightarrow: { signature: \"o m\" },\n  underbracket: { signature: \"o o m\" },\n  overbracket: { signature: \"o o m\" },\n  underbrace: { signature: \"m\" },\n  overbrace: { signature: \"m\" },\n  shoveleft: { signature: \"o m\" },\n  shoveright: { signature: \"o m\" },\n  ArrowBetweenLines: { signature: \"s o\" },\n  vdotswithin: { signature: \"m\" },\n  shortdotswithin: { signature: \"s m\" },\n  DeclarePairedDelimiter: {\n    signature: \"m m m\",\n    renderInfo: { breakAround: true }\n  },\n  DeclarePairedDelimiterX: {\n    signature: \"m o m m m\",\n    renderInfo: { breakAround: true }\n  },\n  DeclarePairedDelimiterXPP: {\n    signature: \"m o m m m m m\",\n    renderInfo: { breakAround: true }\n  },\n  prescript: { signature: \"m m m\" },\n  DeclareMathSizes: { signature: \"m m m m\" },\n  newgathered: { signature: \"m m m m\" },\n  renewgathered: { signature: \"m m m m\" },\n  splitfrac: { signature: \"m m\" },\n  splitdfrac: { signature: \"m m\" },\n  xmathstrut: { signature: \"o m\" },\n  // amsthm\n  newtheorem: { signature: \"s m o m o\", renderInfo: { breakAround: true } },\n  theoremstyle: { signature: \"m\", renderInfo: { breakAround: true } },\n  newtheoremstyle: {\n    signature: \"m m m m m m m m m\",\n    renderInfo: { breakAround: true }\n  },\n  // amsmath\n  text: { signature: \"m\", renderInfo: { inMathMode: false } },\n  // amsfonts\n  mathbb: { signature: \"m\" },\n  mathscr: { signature: \"m\" },\n  mathfrak: { signature: \"m\" },\n  frak: { signature: \"m\" },\n  Bdd: { signature: \"m\" },\n  bold: { signature: \"m\" },\n  // amsopn\n  operatorname: { signature: \"s m\" },\n  DeclareMathOperator: {\n    signature: \"s m m\",\n    renderInfo: { breakAround: true }\n  }\n};\nvar environments8 = {\n  crampedsubarray: {\n    signature: \"m\",\n    renderInfo: { alignContent: true, inMathMode: true }\n  },\n  matrix: { renderInfo: { alignContent: true, inMathMode: true } },\n  bmatrix: { renderInfo: { alignContent: true, inMathMode: true } },\n  pmatrix: { renderInfo: { alignContent: true, inMathMode: true } },\n  vmatrix: { renderInfo: { alignContent: true, inMathMode: true } },\n  Bmatrix: { renderInfo: { alignContent: true, inMathMode: true } },\n  Vmatrix: { renderInfo: { alignContent: true, inMathMode: true } },\n  smallmatrix: { renderInfo: { alignContent: true, inMathMode: true } },\n  psmallmatrix: { renderInfo: { alignContent: true, inMathMode: true } },\n  vsmallmatrix: { renderInfo: { alignContent: true, inMathMode: true } },\n  bsmallmatrix: { renderInfo: { alignContent: true, inMathMode: true } },\n  Bsmallmatrix: { renderInfo: { alignContent: true, inMathMode: true } },\n  Vsmallmatrix: { renderInfo: { alignContent: true, inMathMode: true } },\n  \"matrix*\": {\n    signature: \"o\",\n    renderInfo: { alignContent: true, inMathMode: true }\n  },\n  \"bmatrix*\": {\n    signature: \"o\",\n    renderInfo: { alignContent: true, inMathMode: true }\n  },\n  \"pmatrix*\": {\n    signature: \"o\",\n    renderInfo: { alignContent: true, inMathMode: true }\n  },\n  \"vmatrix*\": {\n    signature: \"o\",\n    renderInfo: { alignContent: true, inMathMode: true }\n  },\n  \"Bmatrix*\": {\n    signature: \"o\",\n    renderInfo: { alignContent: true, inMathMode: true }\n  },\n  \"Vmatrix*\": {\n    signature: \"o\",\n    renderInfo: { alignContent: true, inMathMode: true }\n  },\n  \"smallmatrix*\": {\n    signature: \"o\",\n    renderInfo: { alignContent: true, inMathMode: true }\n  },\n  \"psmallmatrix*\": {\n    signature: \"o\",\n    renderInfo: { alignContent: true, inMathMode: true }\n  },\n  \"bsmallmatrix*\": {\n    signature: \"o\",\n    renderInfo: { alignContent: true, inMathMode: true }\n  },\n  \"vsmallmatrix*\": {\n    signature: \"o\",\n    renderInfo: { alignContent: true, inMathMode: true }\n  },\n  \"Bsmallmatrix*\": {\n    signature: \"o\",\n    renderInfo: { alignContent: true, inMathMode: true }\n  },\n  \"Vsmallmatrix*\": {\n    signature: \"o\",\n    renderInfo: { alignContent: true, inMathMode: true }\n  },\n  multilined: { signature: \"o o\", renderInfo: { inMathMode: true } },\n  cases: { renderInfo: { alignContent: true, inMathMode: true } },\n  \"cases*\": { renderInfo: { alignContent: true, inMathMode: true } },\n  dcases: { renderInfo: { alignContent: true, inMathMode: true } },\n  \"dcases*\": { renderInfo: { alignContent: true, inMathMode: true } },\n  rcases: { renderInfo: { alignContent: true, inMathMode: true } },\n  \"rcases*\": { renderInfo: { alignContent: true, inMathMode: true } },\n  drcases: { renderInfo: { alignContent: true, inMathMode: true } },\n  \"drcases*\": { renderInfo: { alignContent: true, inMathMode: true } },\n  spreadlines: { signature: \"m\", renderInfo: { inMathMode: true } },\n  lgathered: { signature: \"o\", renderInfo: { inMathMode: true } },\n  rgathered: { signature: \"o\", renderInfo: { inMathMode: true } },\n  // amsmath\n  \"align*\": { renderInfo: { inMathMode: true, alignContent: true } },\n  align: { renderInfo: { inMathMode: true, alignContent: true } },\n  aligned: { renderInfo: { inMathMode: true, alignContent: true } },\n  \"alignat*\": { renderInfo: { inMathMode: true, alignContent: true } },\n  alignat: { renderInfo: { inMathMode: true, alignContent: true } },\n  \"equation*\": { renderInfo: { inMathMode: true } },\n  equation: { renderInfo: { inMathMode: true } },\n  \"gather*\": { renderInfo: { inMathMode: true } },\n  gather: { renderInfo: { inMathMode: true } },\n  \"multline*\": { renderInfo: { inMathMode: true } },\n  multline: { renderInfo: { inMathMode: true } },\n  \"flalign*\": { renderInfo: { inMathMode: true, alignContent: true } },\n  flalign: { renderInfo: { inMathMode: true, alignContent: true } },\n  split: { renderInfo: { inMathMode: true } },\n  // Math environments\n  displaymath: { renderInfo: { inMathMode: true } },\n  // Typical amsthm environments\n  theorem: { signature: \"o\" },\n  lemma: { signature: \"o\" },\n  definition: { signature: \"o\" },\n  proposition: { signature: \"o\" },\n  corollary: { signature: \"o\" },\n  remark: { signature: \"!o\" },\n  example: { signature: \"!o\" },\n  proof: { signature: \"o\" }\n};\n\n// package/minted/libs/argument-parser.ts\nimport { arg as arg3 } from \"@unified-latex/unified-latex-builder\";\nimport { parse as parseArgspec2 } from \"@unified-latex/unified-latex-util-argspec\";\nimport { gobbleSingleArgument as gobbleSingleArgument2 } from \"@unified-latex/unified-latex-util-arguments\";\nimport { match as match3 } from \"@unified-latex/unified-latex-util-match\";\nvar argSpecM2 = parseArgspec2(\"m\")[0];\nvar argSpecO2 = parseArgspec2(\"o\")[0];\nvar argSpecRDelim2 = {};\nvar argumentParser2 = (nodes, startPos) => {\n  const { argument: optionalArg, nodesRemoved: optionalArgNodesRemoved } = gobbleSingleArgument2(nodes, argSpecO2, startPos);\n  const { argument: languageArg, nodesRemoved: languageArgNodesRemoved } = gobbleSingleArgument2(nodes, argSpecM2, startPos);\n  let codeArg = null;\n  let codeArgNodesRemoved = 0;\n  const nextNode = nodes[startPos];\n  if (match3.group(nextNode)) {\n    const mandatoryArg = gobbleSingleArgument2(nodes, argSpecM2, startPos);\n    codeArg = mandatoryArg.argument;\n    codeArgNodesRemoved = mandatoryArg.nodesRemoved;\n  } else if (match3.string(nextNode) && nextNode.content.length === 1) {\n    const delim = nextNode.content;\n    argSpecRDelim2[delim] = argSpecRDelim2[delim] || parseArgspec2(`r${delim}${delim}`)[0];\n    const delimArg = gobbleSingleArgument2(\n      nodes,\n      argSpecRDelim2[delim],\n      startPos\n    );\n    codeArg = delimArg.argument;\n    codeArgNodesRemoved = delimArg.nodesRemoved;\n  }\n  return {\n    args: [\n      optionalArg || arg3(null),\n      languageArg || arg3(null),\n      codeArg || arg3(null)\n    ],\n    nodesRemoved: optionalArgNodesRemoved + languageArgNodesRemoved + codeArgNodesRemoved\n  };\n};\n\n// package/minted/provides.ts\nvar macros9 = {\n  mint: { argumentParser: argumentParser2 },\n  mintinline: { argumentParser: argumentParser2 },\n  inputminted: { argumentParser: argumentParser2 },\n  usemintedstyle: { signature: \"m\" },\n  setminted: { signature: \"o m\" },\n  setmintedinline: { signature: \"o m\" },\n  newmint: { signature: \"o m m\" },\n  newminted: { signature: \"o m m\" },\n  newmintinline: { signature: \"o m m\" },\n  newmintedfile: { signature: \"o m m\" }\n};\nvar environments9 = {};\n\n// package/nicematrix/provides.ts\nvar macros10 = {\n  NiceMatrixOptions: {\n    signature: \"m\",\n    renderInfo: { pgfkeysArgs: true, breakAround: true }\n  }\n};\nvar environments10 = {\n  NiceTabular: {\n    signature: \"o m !o\",\n    renderInfo: { pgfkeysArgs: true, alignContent: true }\n  },\n  NiceMatrixBlock: {\n    signature: \"!o\",\n    renderInfo: { pgfkeysArgs: true, alignContent: true }\n  },\n  NiceArrayWithDelims: {\n    signature: \"m m o m !o\",\n    renderInfo: { pgfkeysArgs: true, alignContent: true }\n  },\n  NiceArray: {\n    signature: \"o m !o\",\n    renderInfo: { pgfkeysArgs: true, alignContent: true }\n  },\n  pNiceArray: {\n    signature: \"o m !o\",\n    renderInfo: { pgfkeysArgs: true, alignContent: true }\n  },\n  bNiceArray: {\n    signature: \"o m !o\",\n    renderInfo: { pgfkeysArgs: true, alignContent: true }\n  },\n  BNiceArray: {\n    signature: \"o m !o\",\n    renderInfo: { pgfkeysArgs: true, alignContent: true }\n  },\n  vNiceArray: {\n    signature: \"o m !o\",\n    renderInfo: { pgfkeysArgs: true, alignContent: true }\n  },\n  VNiceArray: {\n    signature: \"o m !o\",\n    renderInfo: { pgfkeysArgs: true, alignContent: true }\n  },\n  NiceMatrix: {\n    signature: \"!o\",\n    renderInfo: { pgfkeysArgs: true, alignContent: true }\n  },\n  pNiceMatrix: {\n    signature: \"!o\",\n    renderInfo: { pgfkeysArgs: true, alignContent: true }\n  },\n  bNiceMatrix: {\n    signature: \"!o\",\n    renderInfo: { pgfkeysArgs: true, alignContent: true }\n  },\n  BNiceMatrix: {\n    signature: \"!o\",\n    renderInfo: { pgfkeysArgs: true, alignContent: true }\n  },\n  vNiceMatrix: {\n    signature: \"!o\",\n    renderInfo: { pgfkeysArgs: true, alignContent: true }\n  },\n  VNiceMatrix: {\n    signature: \"!o\",\n    renderInfo: { pgfkeysArgs: true, alignContent: true }\n  }\n};\n\n// package/systeme/provides.ts\nvar macros11 = {\n  systeme: {\n    signature: \"s o o m\",\n    renderInfo: { inMathMode: true }\n  },\n  sysdelim: {\n    signature: \"m m\"\n  },\n  syseqsep: { signature: \"m\" },\n  sysalign: { signature: \"m\" },\n  syssignspace: { signature: \"m\" },\n  syseqspace: { signature: \"m\" },\n  syslineskipcoeff: { signature: \"m\" },\n  syseqivsign: { signature: \"m\" },\n  sysaddeqsign: { signature: \"m\" },\n  sysremoveeqsign: { signature: \"m\" },\n  sysextracolonsign: { signature: \"m\" },\n  syscodeextracol: { signature: \"m\" },\n  sysautonum: { signature: \"m\" },\n  syssubstitute: { signature: \"m\" }\n};\nvar environments11 = {};\n\n// package/systeme/libs/parser.ts\nimport { match as match4 } from \"@unified-latex/unified-latex-util-match\";\nimport { decorateArrayForPegjs } from \"@unified-latex/unified-latex-util-pegjs\";\nimport { SystemePegParser } from \"@unified-latex/unified-latex-util-pegjs\";\n\n// package/systeme/libs/print-raw.ts\nimport { printRaw as latexPrintRaw } from \"@unified-latex/unified-latex-util-print-raw\";\n\n// package/systeme/libs/systeme.ts\nimport { printRaw } from \"@unified-latex/unified-latex-util-print-raw\";\nimport { match as match5 } from \"@unified-latex/unified-latex-util-match\";\nimport { arrayJoin } from \"@unified-latex/unified-latex-util-split\";\n\n// ../structured-clone/dist/index.js\n(function() {\n  if (typeof globalThis === \"object\")\n    return;\n  Object.defineProperty(Object.prototype, \"__magic__\", {\n    get: function() {\n      return this;\n    },\n    configurable: true\n    // This makes it possible to `delete` the getter later.\n  });\n  __magic__.globalThis = __magic__;\n  delete Object.prototype.__magic__;\n})();\nvar clone = typeof globalThis.structuredClone === \"function\" ? globalThis.structuredClone : (obj) => JSON.parse(JSON.stringify(obj));\n\n// package/systeme/libs/systeme.ts\nimport { deleteComments } from \"@unified-latex/unified-latex-util-comments\";\nimport { visit } from \"@unified-latex/unified-latex-util-visit\";\nimport { updateRenderInfo as updateRenderInfo2 } from \"@unified-latex/unified-latex-util-render-info\";\nimport { getArgsContent } from \"@unified-latex/unified-latex-util-arguments\";\n\n// package/tikz/provides.ts\nimport { attachMacroArgsInArray } from \"@unified-latex/unified-latex-util-arguments\";\n\n// package/tikz/libs/tikz-command-argument-parser.ts\nimport { arg as arg4 } from \"@unified-latex/unified-latex-builder\";\nimport {\n  parse as parseArgspec3\n} from \"@unified-latex/unified-latex-util-argspec\";\nimport { gobbleSingleArgument as gobbleSingleArgument3 } from \"@unified-latex/unified-latex-util-arguments\";\nimport { match as match6 } from \"@unified-latex/unified-latex-util-match\";\nimport { scan } from \"@unified-latex/unified-latex-util-scan\";\nimport { trim as trim3 } from \"@unified-latex/unified-latex-util-trim\";\nvar OPTIONAL_ARGUMENT_ARG_SPEC = parseArgspec3(\"o\")[0];\nfunction blankArg() {\n  return arg4([], { openMark: \"\", closeMark: \"\" });\n}\nvar tikzCommandArgumentParser = (nodes, startPos) => {\n  const origStartPos = startPos;\n  let pos = startPos;\n  let nodesRemoved = 0;\n  const cursorPosAfterAnimations = eatAllAnimationSpecs(nodes, pos);\n  let animationArg = blankArg();\n  if (cursorPosAfterAnimations !== pos) {\n    const argContent = nodes.splice(pos, cursorPosAfterAnimations - pos);\n    trim3(argContent);\n    animationArg = arg4(argContent, {\n      openMark: \" \",\n      closeMark: \" \"\n    });\n  }\n  nodesRemoved += cursorPosAfterAnimations - pos;\n  const {\n    argument: _optionalArgument,\n    nodesRemoved: optionalArgumentNodesRemoved\n  } = gobbleSingleArgument3(nodes, OPTIONAL_ARGUMENT_ARG_SPEC, pos);\n  nodesRemoved += optionalArgumentNodesRemoved;\n  const optionalArg = _optionalArgument || blankArg();\n  while (match6.whitespace(nodes[pos])) {\n    pos++;\n  }\n  const firstNode = nodes[pos];\n  if (!firstNode) {\n    return {\n      args: [animationArg, optionalArg, blankArg()],\n      nodesRemoved: 0\n    };\n  }\n  if (match6.group(firstNode)) {\n    const args = [animationArg, optionalArg, arg4(firstNode.content)];\n    nodes.splice(origStartPos, pos - origStartPos + 1);\n    return { args, nodesRemoved: pos - origStartPos + 1 + nodesRemoved };\n  }\n  const semicolonPosition = scan(nodes, \";\", { startIndex: pos });\n  if (semicolonPosition != null) {\n    const argNodes = nodes.splice(\n      origStartPos,\n      semicolonPosition - origStartPos + 1\n    );\n    trim3(argNodes);\n    const args = [animationArg, optionalArg, arg4(argNodes)];\n    return {\n      args,\n      nodesRemoved: origStartPos - semicolonPosition + 1 + nodesRemoved\n    };\n  }\n  return {\n    args: [animationArg, optionalArg, blankArg()],\n    nodesRemoved: 0\n  };\n};\nfunction eatAllAnimationSpecs(nodes, startPos) {\n  const colonPos = scan(nodes, \":\", {\n    startIndex: startPos,\n    allowSubstringMatches: true,\n    onlySkipWhitespaceAndComments: true\n  });\n  if (!colonPos) {\n    return startPos;\n  }\n  let lastMatchPos = startPos;\n  let i = colonPos + 1;\n  for (; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (match6.string(node, \"[\")) {\n      break;\n    }\n    if (match6.string(node, \"=\")) {\n      i++;\n      while (match6.whitespace(nodes[i]) || match6.comment(nodes[i])) {\n        i++;\n      }\n      if (!match6.group(nodes[i])) {\n        break;\n      }\n      lastMatchPos = i + 1;\n      const colonPos2 = scan(nodes, \":\", {\n        startIndex: lastMatchPos,\n        allowSubstringMatches: true,\n        onlySkipWhitespaceAndComments: true\n      });\n      if (colonPos2 == null) {\n        break;\n      }\n      i = colonPos2 + 1;\n    }\n  }\n  return lastMatchPos;\n}\n\n// package/tikz/provides.ts\nvar macros12 = {\n  pgfkeys: {\n    signature: \"m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  tikzoption: {\n    signature: \"m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  tikzstyle: {\n    signature: \"m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  usetikzlibrary: {\n    signature: \"m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  usepgfmodule: { signature: \"m\", renderInfo: { pgfkeysArgs: true } },\n  usepgflibrary: { signature: \"m\", renderInfo: { pgfkeysArgs: true } },\n  pgfplotsset: {\n    signature: \"m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  pgfplotstabletypeset: {\n    signature: \"o m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  tikz: {\n    signature: \"o o m\",\n    argumentParser: tikzCommandArgumentParser,\n    renderInfo: { namedArguments: [\"animation\", \"options\", \"command\"] }\n  }\n};\nvar environments12 = {\n  tikzpicture: {\n    signature: \"o\",\n    renderInfo: { pgfkeysArgs: true, tikzEnvironment: true },\n    processContent: processTikzEnvironmentContent\n  },\n  axis: {\n    signature: \"o\",\n    renderInfo: { pgfkeysArgs: true, tikzEnvironment: true },\n    processContent: processTikzEnvironmentContent\n  },\n  scope: {\n    signature: \"o\",\n    renderInfo: { pgfkeysArgs: true, tikzEnvironment: true },\n    processContent: processTikzEnvironmentContent\n  },\n  pgfonlayer: {\n    signature: \"m\",\n    renderInfo: { tikzEnvironment: true },\n    processContent: processTikzEnvironmentContent\n  },\n  pgflowlevelscope: {\n    signature: \"m\",\n    renderInfo: { tikzEnvironment: true },\n    processContent: processTikzEnvironmentContent\n  },\n  pgfviewboxscope: {\n    signature: \"m m m m m\",\n    renderInfo: { tikzEnvironment: true },\n    processContent: processTikzEnvironmentContent\n  },\n  pgftransparencygroup: {\n    signature: \"o\",\n    renderInfo: { pgfkeysArgs: true, tikzEnvironment: true },\n    processContent: processTikzEnvironmentContent\n  },\n  behindforegroundpath: {\n    signature: \"m\",\n    processContent: processTikzEnvironmentContent\n  },\n  pgfmetadecoration: {\n    signature: \"m\",\n    processContent: processTikzEnvironmentContent\n  },\n  colormixin: { signature: \"m\", renderInfo: { pgfkeysArgs: true } }\n};\nfunction processTikzEnvironmentContent(nodes) {\n  attachMacroArgsInArray(nodes, conditionalMacros);\n  return nodes;\n}\nvar conditionalMacros = {\n  pgfextra: { signature: \"m\" },\n  beginpgfgraphicnamed: { signature: \"m\" },\n  pgfrealjobname: { signature: \"m\" },\n  pgfplotstreampoint: { signature: \"m\" },\n  pgfplotstreampointoutlier: { signature: \"m\" },\n  pgfplotstreamspecial: { signature: \"m\" },\n  pgfplotxyfile: { signature: \"m\" },\n  pgfplotxyzfile: { signature: \"m\" },\n  pgfplotfunction: { signature: \"mmm\" },\n  pgfplotgnuplot: { signature: \"o m\" },\n  pgfplothandlerrecord: { signature: \"m\" },\n  pgfdeclareplothandler: { signature: \"m m m\" },\n  pgfdeclarelayer: { signature: \"m\" },\n  pgfsetlayers: { signature: \"m\", renderInfo: { pgfkeysArgs: true } },\n  pgfonlayer: { signature: \"m\" },\n  startpgfonlayer: { signature: \"m\" },\n  pgfdeclarehorizontalshading: { signature: \"o m m m \" },\n  pgfdeclareradialshading: { signature: \"o m m m\" },\n  pgfdeclarefunctionalshading: { signature: \"o m m m m m\" },\n  pgfshadecolortorgb: { signature: \"m m\" },\n  pgfshadecolortocmyk: { signature: \"m m\" },\n  pgfshadecolortogray: { signature: \"m m\" },\n  pgfuseshading: { signature: \"m\" },\n  pgfshadepath: { signature: \"m m\" },\n  pgfsetadditionalshadetransform: { signature: \"m\" },\n  pgfsetstrokeopacity: { signature: \"m\" },\n  pgfsetfillopacity: { signature: \"m\" },\n  pgfsetblendmode: { signature: \"m\" },\n  pgfdeclarefading: { signature: \"m m\" },\n  pgfsetfading: { signature: \"m m\" },\n  pgfsetfadingforcurrentpath: { signature: \"m m\" },\n  pgfsetfadingforcurrentpathstroked: { signature: \"m m\" },\n  pgfanimateattribute: { signature: \"m m\" },\n  pgfsnapshot: { signature: \"m\" },\n  pgfqpoint: { signature: \"m m\" },\n  pgfqpointxy: { signature: \"m m\" },\n  pgfqpointxyz: { signature: \"m m m\" },\n  pgfqpointscale: { signature: \"m m\" },\n  pgfpathqmoveto: { signature: \"m m\" },\n  pgfpathqlineto: { signature: \"m m\" },\n  pgfpathqcurveto: { signature: \"m m m m m m\" },\n  pgfpathqcircle: { signature: \"m\" },\n  pgfqbox: { signature: \"m\" },\n  pgfqboxsynced: { signature: \"m\" },\n  pgfaliasimage: { signature: \"m m\" },\n  pgfuseimage: { signature: \"m\" },\n  pgfimage: { signature: \"o m\", renderInfo: { pgfkeysArgs: true } },\n  pgfdeclaremask: { signature: \"o m m\", renderInfo: { pgfkeysArgs: true } },\n  pgfdeclarepatternformonly: { signature: \"o m m m m m\" },\n  pgfdeclarepatterninherentlycolored: { signature: \"o m m m m m\" },\n  pgfsetfillpattern: { signature: \"m m\" },\n  // Coordinate canvas and nonlinear transformations\n  pgftransformshift: { signature: \"m\" },\n  pgftransformxshift: { signature: \"m\" },\n  pgftransformyshift: { signature: \"m\" },\n  pgftransformscale: { signature: \"m\" },\n  pgftransformxscale: { signature: \"m\" },\n  pgftransformyscale: { signature: \"m\" },\n  pgftransformxslant: { signature: \"m\" },\n  pgftransformyslant: { signature: \"m\" },\n  pgftransformrotate: { signature: \"m\" },\n  pgftransformtriangle: { signature: \"m m m\" },\n  pgftransformcm: { signature: \"m m m m m\" },\n  pgftransformarrow: { signature: \"m m\" },\n  pgftransformlineattime: { signature: \"m m m\" },\n  pgftransformcurveattime: { signature: \"m m m m m\" },\n  pgftransformarcaxesattime: { signature: \"m m m m m m\" },\n  pgfgettransform: { signature: \"m\" },\n  pgfsettransform: { signature: \"m\" },\n  pgfgettransformentries: { signature: \"m m m m m m\" },\n  pgfsettransformentries: { signature: \"m m m m m m\" },\n  pgfpointtransformed: { signature: \"m\" },\n  pgflowlevel: { signature: \"m\" },\n  pgflowlevelobj: { signature: \"m m\" },\n  pgflowlevelscope: { signature: \"m\" },\n  startpgflowlevelscope: { signature: \"m\" },\n  pgfviewboxscope: { signature: \"m m m m m\" },\n  startpgfviewboxscope: { signature: \"m m m m m\" },\n  pgftransformnonlinear: { signature: \"m\" },\n  pgfpointtransformednonlinear: { signature: \"m\" },\n  pgfsetcurvilinearbeziercurve: { signature: \"m m m m\" },\n  pgfcurvilineardistancetotime: { signature: \"m\" },\n  pgfpointcurvilinearbezierorthogonal: { signature: \"m m\" },\n  pgfpointcurvilinearbezierpolar: { signature: \"m m\" },\n  // Matrices\n  pgfmatrix: { signature: \"m m m m m m m\" },\n  pgfsetmatrixcolumnsep: { signature: \"m\" },\n  pgfmatrixnextcell: { signature: \"o\" },\n  pgfsetmatrixrowsep: { signature: \"m\" },\n  pgfmatrixendrow: { signature: \"o\" },\n  // Nodes and shapes\n  pgfnode: { signature: \"m m m m m\" },\n  pgfmultipartnode: { signature: \"m m m m\" },\n  pgfcoordinate: { signature: \"m m\" },\n  pgfnodealias: { signature: \"m m\" },\n  pgfnoderename: { signature: \"m m\" },\n  pgfpositionnodelater: { signature: \"m\" },\n  pgfpositionnodenow: { signature: \"m\" },\n  pgfnodepostsetupcode: { signature: \"m m\" },\n  pgfpointanchor: { signature: \"m m\" },\n  pgfpointshapeborder: { signature: \"m m\" },\n  pgfdeclareshape: { signature: \"m m\" },\n  saveddimen: { signature: \"m m\" },\n  savedmacro: { signature: \" m\" },\n  anchor: { signature: \"m m\" },\n  deferredanchor: { signature: \"m m\" },\n  anchorborder: { signature: \"m\" },\n  backgroundpath: { signature: \"m\" },\n  foregroundpath: { signature: \"m\" },\n  behindbackgroundpath: { signature: \"m\" },\n  beforebackgroundpath: { signature: \"m\" },\n  beforeforegroundpath: { signature: \"m\" },\n  behindforegroundpath: { signature: \"m\" },\n  // Arrows\n  pgfdeclarearrow: { signature: \"m\" },\n  pgfarrowssettipend: { signature: \"m\" },\n  pgfarrowssetbackend: { signature: \"m\" },\n  pgfarrowssetlineend: { signature: \"m\" },\n  pgfarrowssetvisualbackend: { signature: \"m\" },\n  pgfarrowssetvisualtipend: { signature: \"m\" },\n  pgfarrowshullpoint: { signature: \"m m\" },\n  pgfarrowsupperhullpoint: { signature: \"m m\" },\n  pgfarrowssave: { signature: \"m\" },\n  pgfarrowssavethe: { signature: \"m\" },\n  pgfarrowsaddtooptions: { signature: \"m\" },\n  pgfarrowsaddtolateoptions: { signature: \"m\" },\n  pgfarrowsaddtolengthscalelist: { signature: \"m\" },\n  pgfarrowsaddtowidthscalelist: { signature: \"m\" },\n  pgfarrowsthreeparameters: { signature: \"m\" },\n  pgfarrowslinewidthdependent: { signature: \"m m m\" },\n  pgfarrowslengthdependent: { signature: \"m\" },\n  // Path\n  pgfusepath: { signature: \"m\" },\n  pgfsetlinewidth: { signature: \"m\" },\n  pgfsetmiterlimit: { signature: \"m\" },\n  pgfsetdash: { signature: \"m m\" },\n  pgfsetstrokecolor: { signature: \"m\" },\n  pgfsetcolor: { signature: \"m\" },\n  pgfsetinnerlinewidth: { signature: \"m\" },\n  pgfsetinnerstrokecolor: { signature: \"m\" },\n  pgfsetarrowsstart: { signature: \"m\" },\n  pgfsetarrowsend: { signature: \"m\" },\n  pgfsetarrows: { signature: \"m\" },\n  pgfsetshortenstart: { signature: \"m\" },\n  pgfsetshortenend: { signature: \"m\" },\n  pgfsetfillcolor: { signature: \"m\" },\n  // Decorations\n  pgfdeclaredecoration: { signature: \"m m m\" },\n  state: { signature: \"m o m\" },\n  pgfdecoratepath: { signature: \"m m\" },\n  startpgfdecoration: { signature: \"m\" },\n  pgfdecoration: { signature: \"m\" },\n  pgfdecoratecurrentpath: { signature: \"m\" },\n  pgfsetdecorationsegmenttransformation: { signature: \"m\" },\n  pgfdeclaremetadecorate: { signature: \"m m m\" },\n  pgfmetadecoration: { signature: \"m\" },\n  startpgfmetadecoration: { signature: \"m\" },\n  // Constructing paths\n  pgfpathmoveto: { signature: \"m\" },\n  pgfpathlineto: { signature: \"m\" },\n  pgfpathcurveto: { signature: \"m m m\" },\n  pgfpathquadraticcurveto: { signature: \"m m\" },\n  pgfpathcurvebetweentime: { signature: \"m m m m m m\" },\n  pgfpathcurvebetweentimecontinue: { signature: \"m m m m m m\" },\n  pgfpatharc: { signature: \"m m m\" },\n  pgfpatharcaxes: { signature: \"m m m m\" },\n  pgfpatharcto: { signature: \"m m m m m m\" },\n  pgfpatharctoprecomputed: { signature: \"m m m m m m m m\" },\n  pgfpathellipse: { signature: \"m m m\" },\n  pgfpathcircle: { signature: \"m m\" },\n  pgfpathrectangle: { signature: \"m m\" },\n  pgfpathrectanglecorners: { signature: \"m m\" },\n  pgfpathgrid: { signature: \" o m m\" },\n  pgfpathparabola: { signature: \"m m\" },\n  pgfpathsine: { signature: \"m\" },\n  pgfpathcosine: { signature: \"m\" },\n  pgfsetcornersarced: { signature: \"m\" },\n  \"pgf@protocolsizes\": { signature: \"m m\" },\n  // Specifying coordinates\n  pgfpoint: { signature: \"m m\" },\n  pgfpointpolar: { signature: \"m m m\" },\n  pgfpointxy: { signature: \"m m\" },\n  pgfsetxvec: { signature: \"m\" },\n  pgfsetyvec: { signature: \"m\" },\n  pgfpointpolarxy: { signature: \"m m\" },\n  pgfpointxyz: { signature: \"m m m\" },\n  pgfsetzvec: { signature: \"m\" },\n  pgfpointcylindrical: { signature: \"m m m\" },\n  pgfpointspherical: { signature: \"m m m\" },\n  pgfpointadd: { signature: \"m m\" },\n  pgfpointscale: { signature: \"m m\" },\n  pgfpointdiff: { signature: \"m m\" },\n  pgfpointnormalised: { signature: \"m\" },\n  pgfpointlineattime: { signature: \"m m m\" },\n  pgfpointlineatdistance: { signature: \"m m m\" },\n  pgfpointarcaxesattime: { signature: \"m m m m m m\" },\n  pgfpointcurveattime: { signature: \"m m m m m\" },\n  pgfpointborderrectangle: { signature: \"m m\" },\n  pgfpointborderellipse: { signature: \"m m\" },\n  pgfpointintersectionoflines: { signature: \"m m m m\" },\n  pgfpointintersectionofcircles: { signature: \"m m m m m\" },\n  pgfintersectionofpaths: { signature: \"m m\" },\n  pgfpointintersectionsolution: { signature: \"m\" },\n  pgfextractx: { signature: \"m m\" },\n  pgfextracty: { signature: \"m m\" },\n  pgfgetlastxy: { signature: \"m m\" },\n  \"pgf@process\": { signature: \"m\" },\n  // Heirarchical structres ...\n  pgfsetbaseline: { signature: \"m\" },\n  pgfsetbaselinepointnow: { signature: \"m\" },\n  pgfsetbaselinepointlater: { signature: \"m\" },\n  pgftext: { signature: \"o m\", renderInfo: { pgfkeysArgs: true } },\n  pgfuseid: { signature: \"m\" },\n  pgfusetype: { signature: \"m\" },\n  pgfidrefnextuse: { signature: \"m m\" },\n  pgfidrefprevuse: { signature: \"m m\" },\n  pgfaliasid: { signature: \"m m\" },\n  pgfgaliasid: { signature: \"m m\" },\n  pgfifidreferenced: { signature: \"m m m\" },\n  pgfrdfabout: { signature: \"m\" },\n  pgfrdfcontent: { signature: \"m\" },\n  pgfrdfdatatype: { signature: \"m\" },\n  pgfrdfhref: { signature: \"m\" },\n  pgfrdfprefix: { signature: \"m\" },\n  pgfrdfproperty: { signature: \"m\" },\n  pgfrdfrel: { signature: \"m\" },\n  pgfrdfresource: { signature: \"m\" },\n  pgfrdfrev: { signature: \"m\" },\n  pgfrdfsrc: { signature: \"m\" },\n  pgfrdftypeof: { signature: \"m\" },\n  pgfrdfvocab: { signature: \"m\" },\n  pgferror: { signature: \"m\" },\n  pgfwarning: { signature: \"m\" },\n  path: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  draw: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  fill: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  filldraw: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  pattern: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  shade: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  clip: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  useasboundingbox: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  node: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  coordinate: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  graph: {\n    signature: \"u;\",\n    renderInfo: { breakAround: true, tikzPathCommand: true }\n  },\n  scoped: {\n    signature: \"o o m\",\n    argumentParser: tikzCommandArgumentParser,\n    renderInfo: {\n      namedArguments: [\"animation\", \"options\", \"command\"],\n      breakAround: true\n    }\n  }\n};\n\n// package/tikz/libs/print-raw.ts\nimport { printRaw as latexPrintRaw2 } from \"@unified-latex/unified-latex-util-print-raw\";\nimport { trim as trim4 } from \"@unified-latex/unified-latex-util-trim\";\n\n// package/tikz/libs/parser.ts\nimport { match as match7 } from \"@unified-latex/unified-latex-util-match\";\nimport { decorateArrayForPegjs as decorateArrayForPegjs2 } from \"@unified-latex/unified-latex-util-pegjs\";\nimport { TikzPegParser } from \"@unified-latex/unified-latex-util-pegjs\";\nfunction createMatchers() {\n  return {\n    isChar: match7.string,\n    isTerminal: (node) => match7.string(node, \";\"),\n    isOperation: (node) => match7.anyString(node) && node.content.match(/[a-zA-Z]/),\n    isWhitespace: (node) => match7.whitespace(node) || match7.parbreak(node),\n    isComment: match7.comment,\n    isGroup: match7.group,\n    isMacro: match7.macro,\n    isAnyMacro: match7.anyMacro\n  };\n}\nvar matchers = createMatchers();\n\n// package/xcolor/provides.ts\nvar macros13 = {\n  substitutecolormodel: {\n    signature: \"m m\",\n    renderInfo: { breakAround: true }\n  },\n  selectcolormodel: {\n    signature: \"m\",\n    renderInfo: { breakAround: true }\n  },\n  definecolor: {\n    signature: \"o m m m\",\n    renderInfo: { breakAround: true }\n  },\n  providecolor: {\n    signature: \"o m m m\",\n    renderInfo: { breakAround: true }\n  },\n  colorlet: {\n    signature: \"o m o m\",\n    renderInfo: { breakAround: true }\n  },\n  definecolorset: {\n    signature: \"o m m m\",\n    renderInfo: { breakAround: true }\n  },\n  providecolorset: {\n    signature: \"o m m m m\",\n    renderInfo: { breakAround: true }\n  },\n  preparecolor: {\n    signature: \"o m m m\",\n    renderInfo: { breakAround: true }\n  },\n  preparecolorset: {\n    signature: \"o m m m m\",\n    renderInfo: { breakAround: true }\n  },\n  DefineNamedColor: {\n    signature: \"m m m m\",\n    renderInfo: { breakAround: true }\n  },\n  definecolors: {\n    signature: \"m\",\n    renderInfo: { breakAround: true }\n  },\n  providecolors: {\n    signature: \"m\",\n    renderInfo: { breakAround: true }\n  },\n  color: { signature: \"o m\", renderInfo: { breakAround: true } },\n  textcolor: { signature: \"o m m\", renderInfo: { inParMode: true } },\n  pagecolor: { signature: \"o m\" },\n  colorbox: { signature: \"o m m\" },\n  fcolorbox: { signature: \"o m o m m\" },\n  boxframe: { signature: \"o m\" },\n  testcolor: { signature: \"o m\" },\n  blendcolors: { signature: \"s m\" },\n  maskcolors: { signature: \"o m\" },\n  definecolorseries: {\n    signature: \"m m m o m o m\",\n    renderInfo: { breakAround: true }\n  },\n  resetcolorseries: {\n    signature: \"o m\",\n    renderInfo: { breakAround: true }\n  },\n  rowcolors: { signature: \"s o m m m\" },\n  extractcolorspec: { signature: \"m m\" },\n  extractcolorspecs: { signature: \"m m m\" },\n  convertcolorspec: { signature: \"m m m m\" }\n};\nvar environments13 = {\n  testcolors: { signature: \"o\", renderInfo: { pgfkeysArgs: true } }\n};\n\n// package/xcolor/libs/xcolor.ts\nimport Color2 from \"color\";\n\n// package/xcolor/libs/predefined-colors.ts\nimport Color from \"color\";\nvar fromRgb = ([r, g, b]) => Color([r * 255, g * 255, b * 255], \"rgb\");\nvar DVI_PS_NAMES = {\n  Apricot: Color(\"#FBB982\"),\n  Aquamarine: Color(\"#00B5BE\"),\n  Bittersweet: Color(\"#C04F17\"),\n  Black: Color(\"#221E1F\"),\n  Blue: Color(\"#2D2F92\"),\n  BlueGreen: Color(\"#00B3B8\"),\n  BlueViolet: Color(\"#473992\"),\n  BrickRed: Color(\"#B6321C\"),\n  Brown: Color(\"#792500\"),\n  BurntOrange: Color(\"#F7921D\"),\n  CadetBlue: Color(\"#74729A\"),\n  CarnationPink: Color(\"#F282B4\"),\n  Cerulean: Color(\"#00A2E3\"),\n  CornflowerBlue: Color(\"#41B0E4\"),\n  Cyan: Color(\"#00AEEF\"),\n  Dandelion: Color(\"#FDBC42\"),\n  DarkOrchid: Color(\"#A4538A\"),\n  Emerald: Color(\"#00A99D\"),\n  ForestGreen: Color(\"#009B55\"),\n  Fuchsia: Color(\"#8C368C\"),\n  Goldenrod: Color(\"#FFDF42\"),\n  Gray: Color(\"#949698\"),\n  Green: Color(\"#00A64F\"),\n  GreenYellow: Color(\"#DFE674\"),\n  JungleGreen: Color(\"#00A99A\"),\n  Lavender: Color(\"#F49EC4\"),\n  LimeGreen: Color(\"#8DC73E\"),\n  Magenta: Color(\"#EC008C\"),\n  Mahogany: Color(\"#A9341F\"),\n  Maroon: Color(\"#AF3235\"),\n  Melon: Color(\"#F89E7B\"),\n  MidnightBlue: Color(\"#006795\"),\n  Mulberry: Color(\"#A93C93\"),\n  NavyBlue: Color(\"#006EB8\"),\n  OliveGreen: Color(\"#3C8031\"),\n  Orange: Color(\"#F58137\"),\n  OrangeRed: Color(\"#ED135A\"),\n  Orchid: Color(\"#AF72B0\"),\n  Peach: Color(\"#F7965A\"),\n  Periwinkle: Color(\"#7977B8\"),\n  PineGreen: Color(\"#008B72\"),\n  Plum: Color(\"#92268F\"),\n  ProcessBlue: Color(\"#00B0F0\"),\n  Purple: Color(\"#99479B\"),\n  RawSienna: Color(\"#974006\"),\n  Red: Color(\"#ED1B23\"),\n  RedOrange: Color(\"#F26035\"),\n  RedViolet: Color(\"#A1246B\"),\n  Rhodamine: Color(\"#EF559F\"),\n  RoyalBlue: Color(\"#0071BC\"),\n  RoyalPurple: Color(\"#613F99\"),\n  RubineRed: Color(\"#ED017D\"),\n  Salmon: Color(\"#F69289\"),\n  SeaGreen: Color(\"#3FBC9D\"),\n  Sepia: Color(\"#671800\"),\n  SkyBlue: Color(\"#46C5DD\"),\n  SpringGreen: Color(\"#C6DC67\"),\n  Tan: Color(\"#DA9D76\"),\n  TealBlue: Color(\"#00AEB3\"),\n  Thistle: Color(\"#D883B7\"),\n  Turquoise: Color(\"#00B4CE\"),\n  Violet: Color(\"#58429B\"),\n  VioletRed: Color(\"#EF58A0\"),\n  White: Color(\"#FFFFFF\"),\n  WildStrawberry: Color(\"#EE2967\"),\n  Yellow: Color(\"#FFF200\"),\n  YellowGreen: Color(\"#98CC70\"),\n  YellowOrange: Color(\"#FAA21A\")\n};\nvar SVG_NAMES = {\n  AliceBlue: fromRgb([0.94, 0.972, 1]),\n  AntiqueWhite: fromRgb([0.98, 0.92, 0.844]),\n  Aqua: fromRgb([0, 1, 1]),\n  Aquamarine: fromRgb([0.498, 1, 0.83]),\n  Azure: fromRgb([0.94, 1, 1]),\n  Beige: fromRgb([0.96, 0.96, 0.864]),\n  Bisque: fromRgb([1, 0.894, 0.77]),\n  Black: fromRgb([0, 0, 0]),\n  BlanchedAlmond: fromRgb([1, 0.92, 0.804]),\n  Blue: fromRgb([0, 0, 1]),\n  BlueViolet: fromRgb([0.54, 0.17, 0.888]),\n  Brown: fromRgb([0.648, 0.165, 0.165]),\n  BurlyWood: fromRgb([0.87, 0.72, 0.53]),\n  CadetBlue: fromRgb([0.372, 0.62, 0.628]),\n  Chartreuse: fromRgb([0.498, 1, 0]),\n  Chocolate: fromRgb([0.824, 0.41, 0.116]),\n  Coral: fromRgb([1, 0.498, 0.312]),\n  CornflowerBlue: fromRgb([0.392, 0.585, 0.93]),\n  Cornsilk: fromRgb([1, 0.972, 0.864]),\n  Crimson: fromRgb([0.864, 0.08, 0.235]),\n  Cyan: fromRgb([0, 1, 1]),\n  DarkBlue: fromRgb([0, 0, 0.545]),\n  DarkCyan: fromRgb([0, 0.545, 0.545]),\n  DarkGoldenrod: fromRgb([0.72, 0.525, 0.044]),\n  DarkGray: fromRgb([0.664, 0.664, 0.664]),\n  DarkGreen: fromRgb([0, 0.392, 0]),\n  DarkGrey: fromRgb([0.664, 0.664, 0.664]),\n  DarkKhaki: fromRgb([0.74, 0.716, 0.42]),\n  DarkMagenta: fromRgb([0.545, 0, 0.545]),\n  DarkOliveGreen: fromRgb([0.332, 0.42, 0.185]),\n  DarkOrange: fromRgb([1, 0.55, 0]),\n  DarkOrchid: fromRgb([0.6, 0.196, 0.8]),\n  DarkRed: fromRgb([0.545, 0, 0]),\n  DarkSalmon: fromRgb([0.912, 0.59, 0.48]),\n  DarkSeaGreen: fromRgb([0.56, 0.736, 0.56]),\n  DarkSlateBlue: fromRgb([0.284, 0.24, 0.545]),\n  DarkSlateGray: fromRgb([0.185, 0.31, 0.31]),\n  DarkSlateGrey: fromRgb([0.185, 0.31, 0.31]),\n  DarkTurquoise: fromRgb([0, 0.808, 0.82]),\n  DarkViolet: fromRgb([0.58, 0, 0.828]),\n  DeepPink: fromRgb([1, 0.08, 0.576]),\n  DeepSkyBlue: fromRgb([0, 0.75, 1]),\n  DimGray: fromRgb([0.41, 0.41, 0.41]),\n  DimGrey: fromRgb([0.41, 0.41, 0.41]),\n  DodgerBlue: fromRgb([0.116, 0.565, 1]),\n  FireBrick: fromRgb([0.698, 0.132, 0.132]),\n  FloralWhite: fromRgb([1, 0.98, 0.94]),\n  ForestGreen: fromRgb([0.132, 0.545, 0.132]),\n  Fuchsia: fromRgb([1, 0, 1]),\n  Gainsboro: fromRgb([0.864, 0.864, 0.864]),\n  GhostWhite: fromRgb([0.972, 0.972, 1]),\n  Gold: fromRgb([1, 0.844, 0]),\n  Goldenrod: fromRgb([0.855, 0.648, 0.125]),\n  Gray: fromRgb([0.5, 0.5, 0.5]),\n  Green: fromRgb([0, 0.5, 0]),\n  GreenYellow: fromRgb([0.68, 1, 0.185]),\n  Grey: fromRgb([0.5, 0.5, 0.5]),\n  Honeydew: fromRgb([0.94, 1, 0.94]),\n  HotPink: fromRgb([1, 0.41, 0.705]),\n  IndianRed: fromRgb([0.804, 0.36, 0.36]),\n  Indigo: fromRgb([0.294, 0, 0.51]),\n  Ivory: fromRgb([1, 1, 0.94]),\n  Khaki: fromRgb([0.94, 0.9, 0.55]),\n  Lavender: fromRgb([0.9, 0.9, 0.98]),\n  LavenderBlush: fromRgb([1, 0.94, 0.96]),\n  LawnGreen: fromRgb([0.488, 0.99, 0]),\n  LemonChiffon: fromRgb([1, 0.98, 0.804]),\n  LightBlue: fromRgb([0.68, 0.848, 0.9]),\n  LightCoral: fromRgb([0.94, 0.5, 0.5]),\n  LightCyan: fromRgb([0.88, 1, 1]),\n  LightGoldenrod: fromRgb([0.933, 0.867, 0.51]),\n  LightGoldenrodYellow: fromRgb([0.98, 0.98, 0.824]),\n  LightGray: fromRgb([0.828, 0.828, 0.828]),\n  LightGreen: fromRgb([0.565, 0.932, 0.565]),\n  LightGrey: fromRgb([0.828, 0.828, 0.828]),\n  LightPink: fromRgb([1, 0.712, 0.756]),\n  LightSalmon: fromRgb([1, 0.628, 0.48]),\n  LightSeaGreen: fromRgb([0.125, 0.698, 0.668]),\n  LightSkyBlue: fromRgb([0.53, 0.808, 0.98]),\n  LightSlateBlue: fromRgb([0.518, 0.44, 1]),\n  LightSlateGray: fromRgb([0.468, 0.532, 0.6]),\n  LightSlateGrey: fromRgb([0.468, 0.532, 0.6]),\n  LightSteelBlue: fromRgb([0.69, 0.77, 0.87]),\n  LightYellow: fromRgb([1, 1, 0.88]),\n  Lime: fromRgb([0, 1, 0]),\n  LimeGreen: fromRgb([0.196, 0.804, 0.196]),\n  Linen: fromRgb([0.98, 0.94, 0.9]),\n  Magenta: fromRgb([1, 0, 1]),\n  Maroon: fromRgb([0.5, 0, 0]),\n  MediumAquamarine: fromRgb([0.4, 0.804, 0.668]),\n  MediumBlue: fromRgb([0, 0, 0.804]),\n  MediumOrchid: fromRgb([0.73, 0.332, 0.828]),\n  MediumPurple: fromRgb([0.576, 0.44, 0.86]),\n  MediumSeaGreen: fromRgb([0.235, 0.7, 0.444]),\n  MediumSlateBlue: fromRgb([0.484, 0.408, 0.932]),\n  MediumSpringGreen: fromRgb([0, 0.98, 0.604]),\n  MediumTurquoise: fromRgb([0.284, 0.82, 0.8]),\n  MediumVioletRed: fromRgb([0.78, 0.084, 0.52]),\n  MidnightBlue: fromRgb([0.098, 0.098, 0.44]),\n  MintCream: fromRgb([0.96, 1, 0.98]),\n  MistyRose: fromRgb([1, 0.894, 0.884]),\n  Moccasin: fromRgb([1, 0.894, 0.71]),\n  NavajoWhite: fromRgb([1, 0.87, 0.68]),\n  Navy: fromRgb([0, 0, 0.5]),\n  NavyBlue: fromRgb([0, 0, 0.5]),\n  OldLace: fromRgb([0.992, 0.96, 0.9]),\n  Olive: fromRgb([0.5, 0.5, 0]),\n  OliveDrab: fromRgb([0.42, 0.556, 0.136]),\n  Orange: fromRgb([1, 0.648, 0]),\n  OrangeRed: fromRgb([1, 0.27, 0]),\n  Orchid: fromRgb([0.855, 0.44, 0.84]),\n  PaleGoldenrod: fromRgb([0.932, 0.91, 0.668]),\n  PaleGreen: fromRgb([0.596, 0.985, 0.596]),\n  PaleTurquoise: fromRgb([0.688, 0.932, 0.932]),\n  PaleVioletRed: fromRgb([0.86, 0.44, 0.576]),\n  PapayaWhip: fromRgb([1, 0.936, 0.835]),\n  PeachPuff: fromRgb([1, 0.855, 0.725]),\n  Peru: fromRgb([0.804, 0.52, 0.248]),\n  Pink: fromRgb([1, 0.752, 0.796]),\n  Plum: fromRgb([0.868, 0.628, 0.868]),\n  PowderBlue: fromRgb([0.69, 0.88, 0.9]),\n  Purple: fromRgb([0.5, 0, 0.5]),\n  Red: fromRgb([1, 0, 0]),\n  RosyBrown: fromRgb([0.736, 0.56, 0.56]),\n  RoyalBlue: fromRgb([0.255, 0.41, 0.884]),\n  SaddleBrown: fromRgb([0.545, 0.27, 0.075]),\n  Salmon: fromRgb([0.98, 0.5, 0.448]),\n  SandyBrown: fromRgb([0.956, 0.644, 0.376]),\n  SeaGreen: fromRgb([0.18, 0.545, 0.34]),\n  Seashell: fromRgb([1, 0.96, 0.932]),\n  Sienna: fromRgb([0.628, 0.32, 0.176]),\n  Silver: fromRgb([0.752, 0.752, 0.752]),\n  SkyBlue: fromRgb([0.53, 0.808, 0.92]),\n  SlateBlue: fromRgb([0.415, 0.352, 0.804]),\n  SlateGray: fromRgb([0.44, 0.5, 0.565]),\n  SlateGrey: fromRgb([0.44, 0.5, 0.565]),\n  Snow: fromRgb([1, 0.98, 0.98]),\n  SpringGreen: fromRgb([0, 1, 0.498]),\n  SteelBlue: fromRgb([0.275, 0.51, 0.705]),\n  Tan: fromRgb([0.824, 0.705, 0.55]),\n  Teal: fromRgb([0, 0.5, 0.5]),\n  Thistle: fromRgb([0.848, 0.75, 0.848]),\n  Tomato: fromRgb([1, 0.39, 0.28]),\n  Turquoise: fromRgb([0.25, 0.88, 0.815]),\n  Violet: fromRgb([0.932, 0.51, 0.932]),\n  VioletRed: fromRgb([0.816, 0.125, 0.565]),\n  Wheat: fromRgb([0.96, 0.87, 0.7]),\n  White: fromRgb([1, 1, 1]),\n  WhiteSmoke: fromRgb([0.96, 0.96, 0.96]),\n  Yellow: fromRgb([1, 1, 0]),\n  YellowGreen: fromRgb([0.604, 0.804, 0.196])\n};\nvar X11_NAMES = {\n  AntiqueWhite1: fromRgb([1, 0.936, 0.86]),\n  AntiqueWhite2: fromRgb([0.932, 0.875, 0.8]),\n  AntiqueWhite3: fromRgb([0.804, 0.752, 0.69]),\n  AntiqueWhite4: fromRgb([0.545, 0.512, 0.47]),\n  Aquamarine1: fromRgb([0.498, 1, 0.83]),\n  Aquamarine2: fromRgb([0.464, 0.932, 0.776]),\n  Aquamarine3: fromRgb([0.4, 0.804, 0.668]),\n  Aquamarine4: fromRgb([0.27, 0.545, 0.455]),\n  Azure1: fromRgb([0.94, 1, 1]),\n  Azure2: fromRgb([0.88, 0.932, 0.932]),\n  Azure3: fromRgb([0.756, 0.804, 0.804]),\n  Azure4: fromRgb([0.512, 0.545, 0.545]),\n  Bisque1: fromRgb([1, 0.894, 0.77]),\n  Bisque2: fromRgb([0.932, 0.835, 0.716]),\n  Bisque3: fromRgb([0.804, 0.716, 0.62]),\n  Bisque4: fromRgb([0.545, 0.49, 0.42]),\n  Blue1: fromRgb([0, 0, 1]),\n  Blue2: fromRgb([0, 0, 0.932]),\n  Blue3: fromRgb([0, 0, 0.804]),\n  Blue4: fromRgb([0, 0, 0.545]),\n  Brown1: fromRgb([1, 0.25, 0.25]),\n  Brown2: fromRgb([0.932, 0.23, 0.23]),\n  Brown3: fromRgb([0.804, 0.2, 0.2]),\n  Brown4: fromRgb([0.545, 0.136, 0.136]),\n  Burlywood1: fromRgb([1, 0.828, 0.608]),\n  Burlywood2: fromRgb([0.932, 0.772, 0.57]),\n  Burlywood3: fromRgb([0.804, 0.668, 0.49]),\n  Burlywood4: fromRgb([0.545, 0.45, 0.332]),\n  CadetBlue1: fromRgb([0.596, 0.96, 1]),\n  CadetBlue2: fromRgb([0.556, 0.898, 0.932]),\n  CadetBlue3: fromRgb([0.48, 0.772, 0.804]),\n  CadetBlue4: fromRgb([0.325, 0.525, 0.545]),\n  Chartreuse1: fromRgb([0.498, 1, 0]),\n  Chartreuse2: fromRgb([0.464, 0.932, 0]),\n  Chartreuse3: fromRgb([0.4, 0.804, 0]),\n  Chartreuse4: fromRgb([0.27, 0.545, 0]),\n  Chocolate1: fromRgb([1, 0.498, 0.14]),\n  Chocolate2: fromRgb([0.932, 0.464, 0.13]),\n  Chocolate3: fromRgb([0.804, 0.4, 0.112]),\n  Chocolate4: fromRgb([0.545, 0.27, 0.075]),\n  Coral1: fromRgb([1, 0.448, 0.336]),\n  Coral2: fromRgb([0.932, 0.415, 0.312]),\n  Coral3: fromRgb([0.804, 0.356, 0.27]),\n  Coral4: fromRgb([0.545, 0.244, 0.185]),\n  Cornsilk1: fromRgb([1, 0.972, 0.864]),\n  Cornsilk2: fromRgb([0.932, 0.91, 0.804]),\n  Cornsilk3: fromRgb([0.804, 0.785, 0.694]),\n  Cornsilk4: fromRgb([0.545, 0.532, 0.47]),\n  Cyan1: fromRgb([0, 1, 1]),\n  Cyan2: fromRgb([0, 0.932, 0.932]),\n  Cyan3: fromRgb([0, 0.804, 0.804]),\n  Cyan4: fromRgb([0, 0.545, 0.545]),\n  DarkGoldenrod1: fromRgb([1, 0.725, 0.06]),\n  DarkGoldenrod2: fromRgb([0.932, 0.68, 0.055]),\n  DarkGoldenrod3: fromRgb([0.804, 0.585, 0.048]),\n  DarkGoldenrod4: fromRgb([0.545, 0.396, 0.03]),\n  DarkOliveGreen1: fromRgb([0.792, 1, 0.44]),\n  DarkOliveGreen2: fromRgb([0.736, 0.932, 0.408]),\n  DarkOliveGreen3: fromRgb([0.635, 0.804, 0.352]),\n  DarkOliveGreen4: fromRgb([0.43, 0.545, 0.24]),\n  DarkOrange1: fromRgb([1, 0.498, 0]),\n  DarkOrange2: fromRgb([0.932, 0.464, 0]),\n  DarkOrange3: fromRgb([0.804, 0.4, 0]),\n  DarkOrange4: fromRgb([0.545, 0.27, 0]),\n  DarkOrchid1: fromRgb([0.75, 0.244, 1]),\n  DarkOrchid2: fromRgb([0.698, 0.228, 0.932]),\n  DarkOrchid3: fromRgb([0.604, 0.196, 0.804]),\n  DarkOrchid4: fromRgb([0.408, 0.132, 0.545]),\n  DarkSeaGreen1: fromRgb([0.756, 1, 0.756]),\n  DarkSeaGreen2: fromRgb([0.705, 0.932, 0.705]),\n  DarkSeaGreen3: fromRgb([0.608, 0.804, 0.608]),\n  DarkSeaGreen4: fromRgb([0.41, 0.545, 0.41]),\n  DarkSlateGray1: fromRgb([0.592, 1, 1]),\n  DarkSlateGray2: fromRgb([0.552, 0.932, 0.932]),\n  DarkSlateGray3: fromRgb([0.475, 0.804, 0.804]),\n  DarkSlateGray4: fromRgb([0.32, 0.545, 0.545]),\n  DeepPink1: fromRgb([1, 0.08, 0.576]),\n  DeepPink2: fromRgb([0.932, 0.07, 0.536]),\n  DeepPink3: fromRgb([0.804, 0.064, 0.464]),\n  DeepPink4: fromRgb([0.545, 0.04, 0.312]),\n  DeepSkyBlue1: fromRgb([0, 0.75, 1]),\n  DeepSkyBlue2: fromRgb([0, 0.698, 0.932]),\n  DeepSkyBlue3: fromRgb([0, 0.604, 0.804]),\n  DeepSkyBlue4: fromRgb([0, 0.408, 0.545]),\n  DodgerBlue1: fromRgb([0.116, 0.565, 1]),\n  DodgerBlue2: fromRgb([0.11, 0.525, 0.932]),\n  DodgerBlue3: fromRgb([0.094, 0.455, 0.804]),\n  DodgerBlue4: fromRgb([0.064, 0.305, 0.545]),\n  Firebrick1: fromRgb([1, 0.19, 0.19]),\n  Firebrick2: fromRgb([0.932, 0.172, 0.172]),\n  Firebrick3: fromRgb([0.804, 0.15, 0.15]),\n  Firebrick4: fromRgb([0.545, 0.1, 0.1]),\n  Gold1: fromRgb([1, 0.844, 0]),\n  Gold2: fromRgb([0.932, 0.79, 0]),\n  Gold3: fromRgb([0.804, 0.68, 0]),\n  Gold4: fromRgb([0.545, 0.46, 0]),\n  Goldenrod1: fromRgb([1, 0.756, 0.145]),\n  Goldenrod2: fromRgb([0.932, 0.705, 0.132]),\n  Goldenrod3: fromRgb([0.804, 0.608, 0.112]),\n  Goldenrod4: fromRgb([0.545, 0.41, 0.08]),\n  Green1: fromRgb([0, 1, 0]),\n  Green2: fromRgb([0, 0.932, 0]),\n  Green3: fromRgb([0, 0.804, 0]),\n  Green4: fromRgb([0, 0.545, 0]),\n  Honeydew1: fromRgb([0.94, 1, 0.94]),\n  Honeydew2: fromRgb([0.88, 0.932, 0.88]),\n  Honeydew3: fromRgb([0.756, 0.804, 0.756]),\n  Honeydew4: fromRgb([0.512, 0.545, 0.512]),\n  HotPink1: fromRgb([1, 0.43, 0.705]),\n  HotPink2: fromRgb([0.932, 0.415, 0.655]),\n  HotPink3: fromRgb([0.804, 0.376, 0.565]),\n  HotPink4: fromRgb([0.545, 0.228, 0.385]),\n  IndianRed1: fromRgb([1, 0.415, 0.415]),\n  IndianRed2: fromRgb([0.932, 0.39, 0.39]),\n  IndianRed3: fromRgb([0.804, 0.332, 0.332]),\n  IndianRed4: fromRgb([0.545, 0.228, 0.228]),\n  Ivory1: fromRgb([1, 1, 0.94]),\n  Ivory2: fromRgb([0.932, 0.932, 0.88]),\n  Ivory3: fromRgb([0.804, 0.804, 0.756]),\n  Ivory4: fromRgb([0.545, 0.545, 0.512]),\n  Khaki1: fromRgb([1, 0.965, 0.56]),\n  Khaki2: fromRgb([0.932, 0.9, 0.52]),\n  Khaki3: fromRgb([0.804, 0.776, 0.45]),\n  Khaki4: fromRgb([0.545, 0.525, 0.305]),\n  LavenderBlush1: fromRgb([1, 0.94, 0.96]),\n  LavenderBlush2: fromRgb([0.932, 0.88, 0.898]),\n  LavenderBlush3: fromRgb([0.804, 0.756, 0.772]),\n  LavenderBlush4: fromRgb([0.545, 0.512, 0.525]),\n  LemonChiffon1: fromRgb([1, 0.98, 0.804]),\n  LemonChiffon2: fromRgb([0.932, 0.912, 0.75]),\n  LemonChiffon3: fromRgb([0.804, 0.79, 0.648]),\n  LemonChiffon4: fromRgb([0.545, 0.536, 0.44]),\n  LightBlue1: fromRgb([0.75, 0.936, 1]),\n  LightBlue2: fromRgb([0.698, 0.875, 0.932]),\n  LightBlue3: fromRgb([0.604, 0.752, 0.804]),\n  LightBlue4: fromRgb([0.408, 0.512, 0.545]),\n  LightCyan1: fromRgb([0.88, 1, 1]),\n  LightCyan2: fromRgb([0.82, 0.932, 0.932]),\n  LightCyan3: fromRgb([0.705, 0.804, 0.804]),\n  LightCyan4: fromRgb([0.48, 0.545, 0.545]),\n  LightGoldenrod1: fromRgb([1, 0.925, 0.545]),\n  LightGoldenrod2: fromRgb([0.932, 0.864, 0.51]),\n  LightGoldenrod3: fromRgb([0.804, 0.745, 0.44]),\n  LightGoldenrod4: fromRgb([0.545, 0.505, 0.298]),\n  LightPink1: fromRgb([1, 0.684, 0.725]),\n  LightPink2: fromRgb([0.932, 0.635, 0.68]),\n  LightPink3: fromRgb([0.804, 0.55, 0.585]),\n  LightPink4: fromRgb([0.545, 0.372, 0.396]),\n  LightSalmon1: fromRgb([1, 0.628, 0.48]),\n  LightSalmon2: fromRgb([0.932, 0.585, 0.448]),\n  LightSalmon3: fromRgb([0.804, 0.505, 0.385]),\n  LightSalmon4: fromRgb([0.545, 0.34, 0.26]),\n  LightSkyBlue1: fromRgb([0.69, 0.888, 1]),\n  LightSkyBlue2: fromRgb([0.644, 0.828, 0.932]),\n  LightSkyBlue3: fromRgb([0.552, 0.712, 0.804]),\n  LightSkyBlue4: fromRgb([0.376, 0.484, 0.545]),\n  LightSteelBlue1: fromRgb([0.792, 0.884, 1]),\n  LightSteelBlue2: fromRgb([0.736, 0.824, 0.932]),\n  LightSteelBlue3: fromRgb([0.635, 0.71, 0.804]),\n  LightSteelBlue4: fromRgb([0.43, 0.484, 0.545]),\n  LightYellow1: fromRgb([1, 1, 0.88]),\n  LightYellow2: fromRgb([0.932, 0.932, 0.82]),\n  LightYellow3: fromRgb([0.804, 0.804, 0.705]),\n  LightYellow4: fromRgb([0.545, 0.545, 0.48]),\n  Magenta1: fromRgb([1, 0, 1]),\n  Magenta2: fromRgb([0.932, 0, 0.932]),\n  Magenta3: fromRgb([0.804, 0, 0.804]),\n  Magenta4: fromRgb([0.545, 0, 0.545]),\n  Maroon1: fromRgb([1, 0.204, 0.7]),\n  Maroon2: fromRgb([0.932, 0.19, 0.655]),\n  Maroon3: fromRgb([0.804, 0.16, 0.565]),\n  Maroon4: fromRgb([0.545, 0.11, 0.385]),\n  MediumOrchid1: fromRgb([0.88, 0.4, 1]),\n  MediumOrchid2: fromRgb([0.82, 0.372, 0.932]),\n  MediumOrchid3: fromRgb([0.705, 0.32, 0.804]),\n  MediumOrchid4: fromRgb([0.48, 0.215, 0.545]),\n  MediumPurple1: fromRgb([0.67, 0.51, 1]),\n  MediumPurple2: fromRgb([0.624, 0.475, 0.932]),\n  MediumPurple3: fromRgb([0.536, 0.408, 0.804]),\n  MediumPurple4: fromRgb([0.365, 0.28, 0.545]),\n  MistyRose1: fromRgb([1, 0.894, 0.884]),\n  MistyRose2: fromRgb([0.932, 0.835, 0.824]),\n  MistyRose3: fromRgb([0.804, 0.716, 0.71]),\n  MistyRose4: fromRgb([0.545, 0.49, 0.484]),\n  NavajoWhite1: fromRgb([1, 0.87, 0.68]),\n  NavajoWhite2: fromRgb([0.932, 0.81, 0.63]),\n  NavajoWhite3: fromRgb([0.804, 0.7, 0.545]),\n  NavajoWhite4: fromRgb([0.545, 0.475, 0.37]),\n  OliveDrab1: fromRgb([0.752, 1, 0.244]),\n  OliveDrab2: fromRgb([0.7, 0.932, 0.228]),\n  OliveDrab3: fromRgb([0.604, 0.804, 0.196]),\n  OliveDrab4: fromRgb([0.41, 0.545, 0.132]),\n  Orange1: fromRgb([1, 0.648, 0]),\n  Orange2: fromRgb([0.932, 0.604, 0]),\n  Orange3: fromRgb([0.804, 0.52, 0]),\n  Orange4: fromRgb([0.545, 0.352, 0]),\n  OrangeRed1: fromRgb([1, 0.27, 0]),\n  OrangeRed2: fromRgb([0.932, 0.25, 0]),\n  OrangeRed3: fromRgb([0.804, 0.215, 0]),\n  OrangeRed4: fromRgb([0.545, 0.145, 0]),\n  Orchid1: fromRgb([1, 0.512, 0.98]),\n  Orchid2: fromRgb([0.932, 0.48, 0.912]),\n  Orchid3: fromRgb([0.804, 0.41, 0.79]),\n  Orchid4: fromRgb([0.545, 0.28, 0.536]),\n  PaleGreen1: fromRgb([0.604, 1, 0.604]),\n  PaleGreen2: fromRgb([0.565, 0.932, 0.565]),\n  PaleGreen3: fromRgb([0.488, 0.804, 0.488]),\n  PaleGreen4: fromRgb([0.33, 0.545, 0.33]),\n  PaleTurquoise1: fromRgb([0.732, 1, 1]),\n  PaleTurquoise2: fromRgb([0.684, 0.932, 0.932]),\n  PaleTurquoise3: fromRgb([0.59, 0.804, 0.804]),\n  PaleTurquoise4: fromRgb([0.4, 0.545, 0.545]),\n  PaleVioletRed1: fromRgb([1, 0.51, 0.67]),\n  PaleVioletRed2: fromRgb([0.932, 0.475, 0.624]),\n  PaleVioletRed3: fromRgb([0.804, 0.408, 0.536]),\n  PaleVioletRed4: fromRgb([0.545, 0.28, 0.365]),\n  PeachPuff1: fromRgb([1, 0.855, 0.725]),\n  PeachPuff2: fromRgb([0.932, 0.796, 0.68]),\n  PeachPuff3: fromRgb([0.804, 0.688, 0.585]),\n  PeachPuff4: fromRgb([0.545, 0.468, 0.396]),\n  Pink1: fromRgb([1, 0.71, 0.772]),\n  Pink2: fromRgb([0.932, 0.664, 0.72]),\n  Pink3: fromRgb([0.804, 0.57, 0.62]),\n  Pink4: fromRgb([0.545, 0.39, 0.424]),\n  Plum1: fromRgb([1, 0.732, 1]),\n  Plum2: fromRgb([0.932, 0.684, 0.932]),\n  Plum3: fromRgb([0.804, 0.59, 0.804]),\n  Plum4: fromRgb([0.545, 0.4, 0.545]),\n  Purple1: fromRgb([0.608, 0.19, 1]),\n  Purple2: fromRgb([0.57, 0.172, 0.932]),\n  Purple3: fromRgb([0.49, 0.15, 0.804]),\n  Purple4: fromRgb([0.332, 0.1, 0.545]),\n  Red1: fromRgb([1, 0, 0]),\n  Red2: fromRgb([0.932, 0, 0]),\n  Red3: fromRgb([0.804, 0, 0]),\n  Red4: fromRgb([0.545, 0, 0]),\n  RosyBrown1: fromRgb([1, 0.756, 0.756]),\n  RosyBrown2: fromRgb([0.932, 0.705, 0.705]),\n  RosyBrown3: fromRgb([0.804, 0.608, 0.608]),\n  RosyBrown4: fromRgb([0.545, 0.41, 0.41]),\n  RoyalBlue1: fromRgb([0.284, 0.464, 1]),\n  RoyalBlue2: fromRgb([0.264, 0.43, 0.932]),\n  RoyalBlue3: fromRgb([0.228, 0.372, 0.804]),\n  RoyalBlue4: fromRgb([0.152, 0.25, 0.545]),\n  Salmon1: fromRgb([1, 0.55, 0.41]),\n  Salmon2: fromRgb([0.932, 0.51, 0.385]),\n  Salmon3: fromRgb([0.804, 0.44, 0.33]),\n  Salmon4: fromRgb([0.545, 0.298, 0.224]),\n  SeaGreen1: fromRgb([0.33, 1, 0.624]),\n  SeaGreen2: fromRgb([0.305, 0.932, 0.58]),\n  SeaGreen3: fromRgb([0.264, 0.804, 0.5]),\n  SeaGreen4: fromRgb([0.18, 0.545, 0.34]),\n  Seashell1: fromRgb([1, 0.96, 0.932]),\n  Seashell2: fromRgb([0.932, 0.898, 0.87]),\n  Seashell3: fromRgb([0.804, 0.772, 0.75]),\n  Seashell4: fromRgb([0.545, 0.525, 0.51]),\n  Sienna1: fromRgb([1, 0.51, 0.28]),\n  Sienna2: fromRgb([0.932, 0.475, 0.26]),\n  Sienna3: fromRgb([0.804, 0.408, 0.224]),\n  Sienna4: fromRgb([0.545, 0.28, 0.15]),\n  SkyBlue1: fromRgb([0.53, 0.808, 1]),\n  SkyBlue2: fromRgb([0.494, 0.752, 0.932]),\n  SkyBlue3: fromRgb([0.424, 0.65, 0.804]),\n  SkyBlue4: fromRgb([0.29, 0.44, 0.545]),\n  SlateBlue1: fromRgb([0.512, 0.435, 1]),\n  SlateBlue2: fromRgb([0.48, 0.404, 0.932]),\n  SlateBlue3: fromRgb([0.41, 0.35, 0.804]),\n  SlateBlue4: fromRgb([0.28, 0.235, 0.545]),\n  SlateGray1: fromRgb([0.776, 0.888, 1]),\n  SlateGray2: fromRgb([0.725, 0.828, 0.932]),\n  SlateGray3: fromRgb([0.624, 0.712, 0.804]),\n  SlateGray4: fromRgb([0.424, 0.484, 0.545]),\n  Snow1: fromRgb([1, 0.98, 0.98]),\n  Snow2: fromRgb([0.932, 0.912, 0.912]),\n  Snow3: fromRgb([0.804, 0.79, 0.79]),\n  Snow4: fromRgb([0.545, 0.536, 0.536]),\n  SpringGreen1: fromRgb([0, 1, 0.498]),\n  SpringGreen2: fromRgb([0, 0.932, 0.464]),\n  SpringGreen3: fromRgb([0, 0.804, 0.4]),\n  SpringGreen4: fromRgb([0, 0.545, 0.27]),\n  SteelBlue1: fromRgb([0.39, 0.72, 1]),\n  SteelBlue2: fromRgb([0.36, 0.675, 0.932]),\n  SteelBlue3: fromRgb([0.31, 0.58, 0.804]),\n  SteelBlue4: fromRgb([0.21, 0.392, 0.545]),\n  Tan1: fromRgb([1, 0.648, 0.31]),\n  Tan2: fromRgb([0.932, 0.604, 0.288]),\n  Tan3: fromRgb([0.804, 0.52, 0.248]),\n  Tan4: fromRgb([0.545, 0.352, 0.17]),\n  Thistle1: fromRgb([1, 0.884, 1]),\n  Thistle2: fromRgb([0.932, 0.824, 0.932]),\n  Thistle3: fromRgb([0.804, 0.71, 0.804]),\n  Thistle4: fromRgb([0.545, 0.484, 0.545]),\n  Tomato1: fromRgb([1, 0.39, 0.28]),\n  Tomato2: fromRgb([0.932, 0.36, 0.26]),\n  Tomato3: fromRgb([0.804, 0.31, 0.224]),\n  Tomato4: fromRgb([0.545, 0.21, 0.15]),\n  Turquoise1: fromRgb([0, 0.96, 1]),\n  Turquoise2: fromRgb([0, 0.898, 0.932]),\n  Turquoise3: fromRgb([0, 0.772, 0.804]),\n  Turquoise4: fromRgb([0, 0.525, 0.545]),\n  VioletRed1: fromRgb([1, 0.244, 0.59]),\n  VioletRed2: fromRgb([0.932, 0.228, 0.55]),\n  VioletRed3: fromRgb([0.804, 0.196, 0.47]),\n  VioletRed4: fromRgb([0.545, 0.132, 0.32]),\n  Wheat1: fromRgb([1, 0.905, 0.73]),\n  Wheat2: fromRgb([0.932, 0.848, 0.684]),\n  Wheat3: fromRgb([0.804, 0.73, 0.59]),\n  Wheat4: fromRgb([0.545, 0.494, 0.4]),\n  Yellow1: fromRgb([1, 1, 0]),\n  Yellow2: fromRgb([0.932, 0.932, 0]),\n  Yellow3: fromRgb([0.804, 0.804, 0]),\n  Yellow4: fromRgb([0.545, 0.545, 0]),\n  Gray0: fromRgb([0.745, 0.745, 0.745]),\n  Green0: fromRgb([0, 1, 0]),\n  Grey0: fromRgb([0.745, 0.745, 0.745]),\n  Maroon0: fromRgb([0.69, 0.19, 0.376]),\n  Purple0: fromRgb([0.628, 0.125, 0.94])\n};\n\n// package/xcolor/libs/parser.ts\nimport { XColorPegParser } from \"@unified-latex/unified-latex-util-pegjs\";\n\n// package/xcolor/libs/xcolor.ts\nvar XColorCoreModelToColor = {\n  rgb: ([r, g, b]) => Color2([r * 255, g * 255, b * 255], \"rgb\"),\n  cmy: ([c, m, y]) => XColorCoreModelToColor.rgb([1 - c, 1 - m, 1 - y]),\n  cmyk: ([c, m, y, k]) => Color2([c * 255, m * 255, y * 255, k * 100], \"cmyk\"),\n  hsb: ([h, s, b]) => Color2([h * 360, s * 100, b * 100], \"hsv\"),\n  gray: ([v]) => Color2([v * 255, v * 255, v * 255], \"rgb\")\n};\nvar XColorModelToColor = {\n  wave: ([lambda]) => {\n    const gamma = 0.8;\n    let baseRgb = [0, 0, 0];\n    if (380 <= lambda && lambda < 440) {\n      baseRgb = [(440 - lambda) / (440 - 380), 0, 1];\n    }\n    if (440 <= lambda && lambda < 490) {\n      baseRgb = [0, (lambda - 440) / (490 - 440), 1];\n    }\n    if (490 <= lambda && lambda < 510) {\n      baseRgb = [0, 1, (510 - lambda) / (510 - 490)];\n    }\n    if (510 <= lambda && lambda < 580) {\n      baseRgb = [(lambda - 510) / (580 - 510), 1, 0];\n    }\n    if (580 <= lambda && lambda < 6450) {\n      baseRgb = [1, (645 - lambda) / (645 - 580), 0];\n    }\n    if (645 <= lambda && lambda <= 780) {\n      baseRgb = [1, 0, 0];\n    }\n    let f = 1;\n    if (380 <= lambda && 420 < lambda) {\n      f = 0.3 + 0.7 * (lambda - 380) / (420 - 380);\n    }\n    if (700 < lambda && lambda <= 780) {\n      f = 0.3 + 0.7 * (780 - lambda) / (780 - 700);\n    }\n    const rgb = [\n      Math.pow(baseRgb[0] * f, gamma),\n      Math.pow(baseRgb[1] * f, gamma),\n      Math.pow(baseRgb[2] * f, gamma)\n    ];\n    return Color2([rgb[0] * 255, rgb[1] * 255, rgb[2] * 255], \"rgb\");\n  },\n  Hsb: ([h, s, b]) => XColorCoreModelToColor.hsb([h / 360, s, b]),\n  HSB: ([h, s, b]) => XColorCoreModelToColor.hsb([h / 240, s / 240, b / 240]),\n  HTML: ([v]) => v.startsWith(\"#\") ? Color2(v) : Color2(`#${v}`),\n  RGB: ([r, g, b]) => Color2([r, g, b], \"rgb\"),\n  Gray: ([v]) => XColorCoreModelToColor.gray([v / 15]),\n  ...XColorCoreModelToColor\n};\nvar PREDEFINED_XCOLOR_COLORS = {\n  // Core colors\n  red: XColorCoreModelToColor.rgb([1, 0, 0]),\n  green: XColorCoreModelToColor.rgb([0, 1, 0]),\n  blue: XColorCoreModelToColor.rgb([0, 0, 1]),\n  brown: XColorCoreModelToColor.rgb([0.75, 0.5, 0.25]),\n  lime: XColorCoreModelToColor.rgb([0.75, 1, 0]),\n  orange: XColorCoreModelToColor.rgb([1, 0.5, 0]),\n  pink: XColorCoreModelToColor.rgb([1, 0.75, 0.75]),\n  purple: XColorCoreModelToColor.rgb([0.75, 0, 0.25]),\n  teal: XColorCoreModelToColor.rgb([0, 0.5, 0.5]),\n  violet: XColorCoreModelToColor.rgb([0.5, 0, 0.5]),\n  cyan: XColorCoreModelToColor.rgb([0, 1, 1]),\n  magenta: XColorCoreModelToColor.rgb([1, 0, 1]),\n  yellow: XColorCoreModelToColor.rgb([1, 1, 0]),\n  olive: XColorCoreModelToColor.rgb([0.5, 0.5, 0]),\n  black: XColorCoreModelToColor.rgb([0, 0, 0]),\n  darkgray: XColorCoreModelToColor.rgb([0.25, 0.25, 0.25]),\n  gray: XColorCoreModelToColor.rgb([0.5, 0.5, 0.5]),\n  lightgray: XColorCoreModelToColor.rgb([0.75, 0.75, 0.75]),\n  white: XColorCoreModelToColor.rgb([1, 1, 1]),\n  ...DVI_PS_NAMES,\n  ...SVG_NAMES,\n  ...X11_NAMES\n};\n\n// package/xcolor/libs/xcolor-macro-to-hex.ts\nimport { getArgsContent as getArgsContent2 } from \"@unified-latex/unified-latex-util-arguments\";\nimport { printRaw as printRaw2 } from \"@unified-latex/unified-latex-util-print-raw\";\nimport { deleteComments as deleteComments2 } from \"@unified-latex/unified-latex-util-comments\";\n\n// package/xcolor/libs/color-to-textcolor-macro.ts\nimport { arg as arg5 } from \"@unified-latex/unified-latex-builder\";\n\n// package/xparse/provides.ts\nvar macros14 = {\n  NewDocumentCommand: {\n    signature: \"m m m\",\n    renderInfo: { breakAround: true }\n  },\n  RenewDocumentCommand: {\n    signature: \"m m m\",\n    renderInfo: { breakAround: true }\n  },\n  ProvideDocumentCommand: {\n    signature: \"m m m\",\n    renderInfo: { breakAround: true }\n  },\n  DeclareDocumentCommand: {\n    signature: \"m m m\",\n    renderInfo: { breakAround: true }\n  },\n  NewDocumentEnvironment: {\n    signature: \"m m m m\",\n    renderInfo: { breakAround: true }\n  },\n  RenewDocumentEnvironment: {\n    signature: \"m m m m\",\n    renderInfo: { breakAround: true }\n  },\n  ProvideDocumentEnvironment: {\n    signature: \"m m m m\",\n    renderInfo: { breakAround: true }\n  },\n  DeclareDocumentEnvironment: {\n    signature: \"m m m m\",\n    renderInfo: { breakAround: true }\n  },\n  NewExpandableDocumentCommand: {\n    signature: \"m m m\",\n    renderInfo: { breakAround: true }\n  },\n  RenewExpandableDocumentCommand: {\n    signature: \"m m m\",\n    renderInfo: { breakAround: true }\n  },\n  ProvideExpandableDocumentCommand: {\n    signature: \"m m m\",\n    renderInfo: { breakAround: true }\n  },\n  DeclareExpandableDocumentCommand: {\n    signature: \"m m m\",\n    renderInfo: { breakAround: true }\n  },\n  RequirePackage: {\n    signature: \"o m\",\n    renderInfo: { pgfkeysArgs: true, breakAround: true }\n  },\n  DeclareOption: { signature: \"m m\", renderInfo: { breakAround: true } }\n};\nvar environments14 = {};\n\n// package/beamer/provides.ts\nvar macros15 = {\n  mode: { signature: \"s d<> d{}\", renderInfo: { breakAround: true } },\n  insertnavigation: { signature: \"m\", renderInfo: { breakAround: true } },\n  insertsectionnavigation: {\n    signature: \"m\",\n    renderInfo: { breakAround: true }\n  },\n  insertsectionnavigationhorizontal: {\n    signature: \"m m m\",\n    renderInfo: { breakAround: true }\n  },\n  insertauthor: { signature: \"o\", renderInfo: { breakAround: true } },\n  insertshortauthor: { signature: \"o\", renderInfo: { breakAround: true } },\n  insertshortdate: { signature: \"o\", renderInfo: { breakAround: true } },\n  insertshortinstitute: { signature: \"o\", renderInfo: { breakAround: true } },\n  insertshortpart: { signature: \"o\", renderInfo: { breakAround: true } },\n  insertshorttitle: { signature: \"o\", renderInfo: { breakAround: true } },\n  insertsubsectionnavigation: {\n    signature: \"m\",\n    renderInfo: { breakAround: true }\n  },\n  insertsubsectionnavigationhorizontal: {\n    signature: \"m m m\",\n    renderInfo: { breakAround: true }\n  },\n  insertverticalnavigation: {\n    signature: \"m\",\n    renderInfo: { breakAround: true }\n  },\n  usebeamercolor: { signature: \"s m\", renderInfo: { breakAround: true } },\n  usebeamertemplate: { signature: \"s m\", renderInfo: { breakAround: true } },\n  setbeamercolor: {\n    signature: \"m m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  setbeamersize: {\n    signature: \"m o o\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  setbeamertemplate: {\n    signature: \"m o o d{}\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  newcommand: {\n    signature: \"s d<> +m o +o +m\",\n    renderInfo: {\n      breakAround: true,\n      namedArguments: [\n        \"starred\",\n        null,\n        \"name\",\n        \"numArgs\",\n        \"default\",\n        \"body\"\n      ]\n    }\n  },\n  renewcommand: {\n    signature: \"s d<> +m o +o +m\",\n    renderInfo: {\n      breakAround: true,\n      namedArguments: [\n        \"starred\",\n        null,\n        \"name\",\n        \"numArgs\",\n        \"default\",\n        \"body\"\n      ]\n    }\n  },\n  newenvironment: {\n    signature: \"s d<> m o o m m\",\n    renderInfo: { breakAround: true }\n  },\n  renewenvironment: {\n    signature: \"s d<> m o o m m\",\n    renderInfo: { breakAround: true }\n  },\n  resetcounteronoverlays: {\n    signature: \"m\",\n    renderInfo: { breakAround: true }\n  },\n  resetcountonoverlays: { signature: \"m\", renderInfo: { breakAround: true } },\n  logo: { signature: \"m\", renderInfo: { breakAround: true } },\n  frametitle: { signature: \"d<> o m\", renderInfo: { breakAround: true } },\n  framesubtitle: { signature: \"d<> m\", renderInfo: { breakAround: true } },\n  pause: { signature: \"o\" },\n  onslide: { signature: \"t+ t* d<> d{}\" },\n  only: { signature: \"d<> m d<>\" },\n  uncover: { signature: \"d<> m\" },\n  visible: { signature: \"d<> m\" },\n  invisible: { signature: \"d<> m\" },\n  alt: { signature: \"d<> m m d<>\" },\n  temporal: { signature: \"r<> m m m\" },\n  item: {\n    signature: \"d<> o d<>\",\n    renderInfo: {\n      hangingIndent: true,\n      namedArguments: [null, \"label\", null]\n    }\n  },\n  label: { signature: \"d<> o m\" },\n  // cleveref adds an optional argument to label; this gives maximum compatibility.\n  action: { signature: \"d<> m\" },\n  beamerdefaultoverlayspecification: { signature: \"m\" },\n  titlegraphic: { signature: \"m\", renderInfo: { breakAround: true } },\n  subject: { signature: \"m\", renderInfo: { breakAround: true } },\n  keywords: { signature: \"m\", renderInfo: { breakAround: true } },\n  lecture: { signature: \"o m m\", renderInfo: { breakAround: true } },\n  partpage: { renderInfo: { breakAround: true } },\n  sectionpage: { renderInfo: { breakAround: true } },\n  subsectionpage: { renderInfo: { breakAround: true } },\n  AtBeginLecture: { signature: \"m\", renderInfo: { breakAround: true } },\n  AtBeginPart: { signature: \"m\", renderInfo: { breakAround: true } },\n  tableofcontents: {\n    signature: \"o\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  againframe: { signature: \"d<> o o m\", renderInfo: { breakAround: true } },\n  framezoom: {\n    signature: \"r<> r<> o r() r()\",\n    renderInfo: { breakAround: true }\n  },\n  column: { signature: \"d<> o m\", renderInfo: { breakAround: true } },\n  animate: { signature: \"r<>\", renderInfo: { breakAround: true } },\n  animatevalue: { signature: \"r<> m m m\", renderInfo: { breakAround: true } },\n  sound: {\n    signature: \"o m m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  hyperlinksound: {\n    signature: \"o m m\",\n    renderInfo: { breakAround: true, pgfkeysArgs: true }\n  },\n  hyperlinkmute: { signature: \"m\", renderInfo: { breakAround: true } },\n  // These signatures conflict with the default signatures.\n  // Care must be taken when processing an AST.\n  section: {\n    signature: \"s d<> o m\",\n    renderInfo: {\n      breakAround: true,\n      namedArguments: [\"starred\", null, \"tocTitle\", \"title\"]\n    }\n  },\n  subsection: {\n    signature: \"s d<> o m\",\n    renderInfo: {\n      breakAround: true,\n      namedArguments: [\"starred\", null, \"tocTitle\", \"title\"]\n    }\n  },\n  subsubsection: {\n    signature: \"s d<> o m\",\n    renderInfo: {\n      breakAround: true,\n      namedArguments: [\"starred\", null, \"tocTitle\", \"title\"]\n    }\n  },\n  part: {\n    signature: \"s d<> o m\",\n    renderInfo: {\n      breakAround: true,\n      namedArguments: [\"starred\", null, \"tocTitle\", \"title\"]\n    }\n  },\n  bibitem: {\n    signature: \"s d<> o m\",\n    renderInfo: {\n      hangingIndent: true,\n      namedArguments: [\"starred\", null, \"tocTitle\", \"title\"]\n    }\n  }\n};\nvar environments15 = {\n  frame: {\n    signature: \"!d<> !o !o !d{} !d{}\"\n  },\n  block: {\n    signature: \"!d<> !d{} !d<>\"\n  },\n  alertblock: {\n    signature: \"!d<> !d{} !d<>\"\n  },\n  exampleblock: {\n    signature: \"!d<> !d{} !d<>\"\n  },\n  onlyenv: {\n    signature: \"!d<>\"\n  },\n  altenv: {\n    signature: \"!d<> m m m m !d<>\"\n  },\n  overlayarea: { signature: \"m m\" },\n  overprint: { signature: \"o\" },\n  actionenv: { signature: \"!d<>\" },\n  columns: { signature: \"d<> o\" },\n  column: { signature: \"d<> o m\" }\n};\n\n// package/multicol/provides.ts\nvar macros16 = {\n  columnbreak: { renderInfo: { breakAround: true } }\n};\nvar environments16 = {\n  multicols: {\n    signature: \"m o o\"\n  },\n  \"multicols*\": {\n    signature: \"m o o\"\n  }\n};\n\n// index.ts\nvar macroInfo = {\n  cleveref: macros,\n  exam: macros2,\n  geometry: macros3,\n  hyperref: macros4,\n  latex2e: macros5,\n  listings: macros6,\n  makeidx: macros7,\n  mathtools: macros8,\n  minted: macros9,\n  nicematrix: macros10,\n  systeme: macros11,\n  tikz: macros12,\n  xcolor: macros13,\n  xparse: macros14,\n  beamer: macros15,\n  multicol: macros16\n};\nvar environmentInfo = {\n  cleveref: environments,\n  exam: environments2,\n  geometry: environments3,\n  hyperref: environments4,\n  latex2e: environments5,\n  listings: environments6,\n  makeidx: environments7,\n  mathtools: environments8,\n  minted: environments9,\n  nicematrix: environments10,\n  systeme: environments11,\n  tikz: environments12,\n  xcolor: environments13,\n  xparse: environments14,\n  beamer: environments15,\n  multicol: environments16\n};\nexport {\n  environmentInfo,\n  macroInfo\n};\n//# sourceMappingURL=index.js.map\n","// libs/process-environment.ts\nimport { updateRenderInfo } from \"@unified-latex/unified-latex-util-render-info\";\nimport { gobbleArguments } from \"@unified-latex/unified-latex-util-arguments\";\nimport { match } from \"@unified-latex/unified-latex-util-match\";\nimport { visit } from \"@unified-latex/unified-latex-util-visit\";\nimport { printRaw } from \"@unified-latex/unified-latex-util-print-raw\";\nfunction processEnvironment(envNode, envInfo) {\n  if (envInfo.signature && envNode.args == null) {\n    const { args } = gobbleArguments(envNode.content, envInfo.signature);\n    envNode.args = args;\n  }\n  updateRenderInfo(envNode, envInfo.renderInfo);\n  if (typeof envInfo.processContent === \"function\") {\n    envNode.content = envInfo.processContent(envNode.content);\n  }\n}\nfunction processEnvironments(tree, environments) {\n  const isRelevantEnvironment = match.createEnvironmentMatcher(environments);\n  visit(\n    tree,\n    {\n      leave: (node) => {\n        const envName = printRaw(node.env);\n        const envInfo = environments[envName];\n        if (!envInfo) {\n          throw new Error(\n            `Could not find environment info for environment \"${envName}\"`\n          );\n        }\n        processEnvironment(node, envInfo);\n      }\n    },\n    { test: isRelevantEnvironment }\n  );\n}\n\n// libs/unified-latex-process-environment.ts\nimport { visit as visit2 } from \"@unified-latex/unified-latex-util-visit\";\nimport { match as match2 } from \"@unified-latex/unified-latex-util-match\";\nimport { printRaw as printRaw2 } from \"@unified-latex/unified-latex-util-print-raw\";\nvar unifiedLatexProcessEnvironments = function unifiedLatexAttachMacroArguments(options) {\n  const { environments = {} } = options || {};\n  const isRelevantEnvironment = match2.createEnvironmentMatcher(environments);\n  return (tree) => {\n    if (Object.keys(environments).length === 0) {\n      console.warn(\n        \"Attempting to attach macro arguments but no macros are specified.\"\n      );\n    }\n    visit2(\n      tree,\n      {\n        leave: (node) => {\n          const envName = printRaw2(node.env);\n          const envInfo = environments[envName];\n          if (!envInfo) {\n            throw new Error(\n              `Could not find environment info for environment \"${envName}\"`\n            );\n          }\n          processEnvironment(node, envInfo);\n        }\n      },\n      { test: isRelevantEnvironment }\n    );\n  };\n};\nexport {\n  processEnvironment,\n  processEnvironments,\n  unifiedLatexProcessEnvironments\n};\n//# sourceMappingURL=index.js.map\n","// libs/find-region.ts\nfunction findRegionInArray(tree, start, end) {\n  const ret = [];\n  let currRegion = { start: void 0, end: tree.length };\n  for (let i = 0; i < tree.length; i++) {\n    const node = tree[i];\n    if (start(node)) {\n      currRegion.start = i;\n    }\n    if (end(node)) {\n      currRegion.end = i + 1;\n      ret.push(currRegion);\n      currRegion = { start: void 0, end: tree.length };\n    }\n  }\n  if (currRegion.start != null) {\n    ret.push(currRegion);\n  }\n  return ret;\n}\n\n// libs/special-regions.ts\nimport { match as match2 } from \"@unified-latex/unified-latex-util-match\";\n\n// libs/regions.ts\nfunction refineRegions(regions) {\n  const _regions = [...regions];\n  _regions.sort((a, b) => a.start - b.start);\n  const cutPointsSet = new Set(_regions.flatMap((r) => [r.start, r.end]));\n  const cutPoints = Array.from(cutPointsSet);\n  cutPoints.sort((a, b) => a - b);\n  const retRegions = [];\n  const retRegionsContainedIn = [];\n  let seekIndex = 0;\n  for (let i = 0; i < cutPoints.length - 1; i++) {\n    const start = cutPoints[i];\n    const end = cutPoints[i + 1];\n    const region = { start, end };\n    const regionContainedIn = /* @__PURE__ */ new Set();\n    let encounteredEndPastStart = false;\n    for (let j = seekIndex; j < _regions.length; j++) {\n      const superRegion = _regions[j];\n      if (superRegion.end >= region.start) {\n        encounteredEndPastStart = true;\n      }\n      if (!encounteredEndPastStart && superRegion.end < region.start) {\n        seekIndex = j + 1;\n        continue;\n      }\n      if (superRegion.start > end) {\n        break;\n      }\n      if (superRegion.start <= region.start && superRegion.end >= region.end) {\n        encounteredEndPastStart = true;\n        regionContainedIn.add(superRegion);\n      }\n    }\n    if (regionContainedIn.size > 0) {\n      retRegions.push(region);\n      retRegionsContainedIn.push(regionContainedIn);\n    }\n  }\n  return { regions: retRegions, regionsContainedIn: retRegionsContainedIn };\n}\nfunction splitByRegions(array, regionsRecord) {\n  const ret = [];\n  const indices = [0, array.length];\n  const reverseMap = {};\n  for (const [key, records] of Object.entries(regionsRecord)) {\n    indices.push(\n      ...records.flatMap((r) => {\n        reverseMap[\"\" + [r.start, r.end]] = key;\n        return [r.start, r.end];\n      })\n    );\n  }\n  indices.sort((a, b) => a - b);\n  for (let i = 0; i < indices.length - 1; i++) {\n    const start = indices[i];\n    const end = indices[i + 1];\n    if (start === end) {\n      continue;\n    }\n    const regionKey = reverseMap[\"\" + [start, end]];\n    ret.push([regionKey || null, array.slice(start, end)]);\n  }\n  return ret;\n}\n\n// libs/special-regions.ts\nimport { SKIP, visit as visit2 } from \"@unified-latex/unified-latex-util-visit\";\n\n// libs/reparse-macro-names.ts\nimport { match } from \"@unified-latex/unified-latex-util-match\";\nimport { EXIT, visit } from \"@unified-latex/unified-latex-util-visit\";\nfunction escapeRegExp(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nfunction buildWordRegex(allowedSet) {\n  const regexpStr = `^(${[\"\\\\p{L}\"].concat(Array.from(allowedSet).map(escapeRegExp)).join(\"|\")})*`;\n  return new RegExp(regexpStr, \"u\");\n}\nfunction hasReparsableMacroNamesInArray(tree, allowedTokens) {\n  for (let i = 0; i < tree.length; i++) {\n    const macro = tree[i];\n    const string = tree[i + 1];\n    if (match.anyMacro(macro) && match.anyString(string)) {\n      if (allowedTokens.has(\n        macro.content.charAt(macro.content.length - 1)\n      ) || allowedTokens.has(string.content.charAt(0))) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction hasReparsableMacroNames(tree, allowedTokens) {\n  if (typeof allowedTokens === \"string\") {\n    allowedTokens = new Set(allowedTokens.split(\"\"));\n  }\n  const _allowedTokens = allowedTokens;\n  for (const v of _allowedTokens) {\n    if (v.length > 1) {\n      throw new Error(\n        `Only single characters are allowed as \\`allowedTokens\\` when reparsing macro names, not \\`${v}\\`.`\n      );\n    }\n  }\n  let ret = false;\n  visit(\n    tree,\n    (nodes) => {\n      if (hasReparsableMacroNamesInArray(nodes, _allowedTokens)) {\n        ret = true;\n        return EXIT;\n      }\n    },\n    { includeArrays: true, test: Array.isArray }\n  );\n  return ret;\n}\nfunction reparseMacroNamesInArray(tree, allowedTokens) {\n  var _a, _b, _c;\n  const regex = buildWordRegex(allowedTokens);\n  let i = 0;\n  while (i < tree.length) {\n    const macro = tree[i];\n    const string = tree[i + 1];\n    if (match.anyMacro(macro) && // The _^ macros in math mode should not be extended no-matter what;\n    // So we check to make sure that the macro we're dealing with has the default escape token.\n    (macro.escapeToken == null || macro.escapeToken === \"\\\\\") && match.anyString(string) && // There are two options. Either the macro ends with the special character,\n    // e.g. `\\@foo` or the special character starts the next string, e.g. `\\foo@`.\n    (allowedTokens.has(\n      macro.content.charAt(macro.content.length - 1)\n    ) || allowedTokens.has(string.content.charAt(0)))) {\n      const match3 = string.content.match(regex);\n      const takeable = match3 ? match3[0] : \"\";\n      if (takeable.length > 0) {\n        if (takeable.length === string.content.length) {\n          macro.content += string.content;\n          tree.splice(i + 1, 1);\n          if (macro.position && ((_a = string.position) == null ? void 0 : _a.end)) {\n            macro.position.end = string.position.end;\n          }\n        } else {\n          macro.content += takeable;\n          string.content = string.content.slice(takeable.length);\n          if ((_b = macro.position) == null ? void 0 : _b.end) {\n            macro.position.end.offset += takeable.length;\n            macro.position.end.column += takeable.length;\n          }\n          if ((_c = string.position) == null ? void 0 : _c.start) {\n            string.position.start.offset += takeable.length;\n            string.position.start.column += takeable.length;\n          }\n        }\n      } else {\n        i++;\n      }\n    } else {\n      ++i;\n    }\n  }\n}\nfunction reparseMacroNames(tree, allowedTokens) {\n  if (typeof allowedTokens === \"string\") {\n    allowedTokens = new Set(allowedTokens.split(\"\"));\n  }\n  const _allowedTokens = allowedTokens;\n  for (const v of _allowedTokens) {\n    if (v.length > 1) {\n      throw new Error(\n        `Only single characters are allowed as \\`allowedTokens\\` when reparsing macro names, not \\`${v}\\`.`\n      );\n    }\n  }\n  visit(\n    tree,\n    (nodes) => {\n      reparseMacroNamesInArray(nodes, _allowedTokens);\n    },\n    { includeArrays: true, test: Array.isArray }\n  );\n}\n\n// libs/special-regions.ts\nvar expl3Find = {\n  start: match2.createMacroMatcher([\"ExplSyntaxOn\"]),\n  end: match2.createMacroMatcher([\"ExplSyntaxOff\"])\n};\nvar atLetterFind = {\n  start: match2.createMacroMatcher([\"makeatletter\"]),\n  end: match2.createMacroMatcher([\"makeatother\"])\n};\nfunction findExpl3AndAtLetterRegionsInArray(tree) {\n  const expl3 = findRegionInArray(tree, expl3Find.start, expl3Find.end);\n  const atLetter = findRegionInArray(\n    tree,\n    atLetterFind.start,\n    atLetterFind.end\n  );\n  const regionMap = new Map([\n    ...expl3.map((x) => [x, \"expl\"]),\n    ...atLetter.map((x) => [x, \"atLetter\"])\n  ]);\n  const all = refineRegions([...expl3, ...atLetter]);\n  const ret = {\n    explOnly: [],\n    atLetterOnly: [],\n    both: []\n  };\n  for (let i = 0; i < all.regions.length; i++) {\n    const region = all.regions[i];\n    const containedIn = all.regionsContainedIn[i];\n    if (containedIn.size === 2) {\n      ret.both.push(region);\n      continue;\n    }\n    for (const v of containedIn.values()) {\n      if (regionMap.get(v) === \"expl\") {\n        ret.explOnly.push(region);\n      }\n      if (regionMap.get(v) === \"atLetter\") {\n        ret.atLetterOnly.push(region);\n      }\n    }\n  }\n  ret.explOnly = ret.explOnly.filter((r) => r.end - r.start > 1);\n  ret.atLetterOnly = ret.atLetterOnly.filter((r) => r.end - r.start > 1);\n  ret.both = ret.both.filter((r) => r.end - r.start > 1);\n  return ret;\n}\nvar atLetterSet = /* @__PURE__ */ new Set([\"@\"]);\nvar explSet = /* @__PURE__ */ new Set([\"_\", \":\"]);\nvar bothSet = /* @__PURE__ */ new Set([\"_\", \":\", \"@\"]);\nfunction reparseExpl3AndAtLetterRegions(tree) {\n  visit2(\n    tree,\n    {\n      leave: (nodes) => {\n        const regions = findExpl3AndAtLetterRegionsInArray(nodes);\n        const totalNumRegions = regions.both.length + regions.atLetterOnly.length + regions.explOnly.length;\n        if (totalNumRegions === 0) {\n          return;\n        }\n        const splits = splitByRegions(nodes, regions);\n        const processed = [];\n        for (const [key, slice] of splits) {\n          switch (key) {\n            case null:\n              processed.push(...slice);\n              continue;\n            case \"atLetterOnly\":\n              reparseMacroNames(slice, atLetterSet);\n              processed.push(...slice);\n              continue;\n            case \"explOnly\":\n              reparseMacroNames(slice, explSet);\n              processed.push(...slice);\n              continue;\n            case \"both\":\n              reparseMacroNames(slice, bothSet);\n              processed.push(...slice);\n              continue;\n            default:\n              throw new Error(\n                `Unexpected case when splitting ${key}`\n              );\n          }\n        }\n        nodes.length = 0;\n        nodes.push(...processed);\n        return SKIP;\n      }\n    },\n    { includeArrays: true, test: Array.isArray }\n  );\n}\nexport {\n  findExpl3AndAtLetterRegionsInArray,\n  findRegionInArray,\n  hasReparsableMacroNames,\n  hasReparsableMacroNamesInArray,\n  reparseExpl3AndAtLetterRegions,\n  reparseMacroNames,\n  reparseMacroNamesInArray\n};\n//# sourceMappingURL=index.js.map\n","// libs/compiler-ast.ts\nvar unifiedLatexAstComplier = function unifiedLatexAstComplier2() {\n  Object.assign(this, { Compiler: (x) => x });\n};\n\n// libs/plugin-from-string.ts\nimport { unified } from \"unified\";\nimport { environmentInfo, macroInfo } from \"@unified-latex/unified-latex-ctan\";\nimport {\n  unifiedLatexTrimEnvironmentContents,\n  unifiedLatexTrimRoot\n} from \"@unified-latex/unified-latex-util-trim\";\n\n// libs/parse-minimal.ts\nimport { LatexPegParser } from \"@unified-latex/unified-latex-util-pegjs\";\nfunction parseMinimal(str) {\n  return LatexPegParser.parse(str);\n}\nfunction parseMathMinimal(str) {\n  return LatexPegParser.parse(str, { startRule: \"math\" });\n}\n\n// libs/plugin-from-string-minimal.ts\nvar unifiedLatexFromStringMinimal = function unifiedLatexFromStringMinimal2(options) {\n  const parser2 = (str) => {\n    if ((options == null ? void 0 : options.mode) === \"math\") {\n      return {\n        type: \"root\",\n        content: parseMathMinimal(str),\n        _renderInfo: { inMathMode: true }\n      };\n    }\n    return parseMinimal(str);\n  };\n  Object.assign(this, { Parser: parser2 });\n};\n\n// libs/process-macros-and-environments.ts\nimport { visit as visit2 } from \"@unified-latex/unified-latex-util-visit\";\nimport { match as match2 } from \"@unified-latex/unified-latex-util-match\";\nimport { printRaw as printRaw2 } from \"@unified-latex/unified-latex-util-print-raw\";\n\n// libs/reparse-math.ts\nimport { match } from \"@unified-latex/unified-latex-util-match\";\nimport { printRaw } from \"@unified-latex/unified-latex-util-print-raw\";\nimport { visit } from \"@unified-latex/unified-latex-util-visit\";\nfunction unifiedLatexReparseMathConstructPlugin({\n  mathEnvs,\n  mathMacros\n}) {\n  const isMathEnvironment = match.createEnvironmentMatcher(mathEnvs);\n  const isMathMacro = match.createMacroMatcher(mathMacros);\n  return (tree) => {\n    visit(\n      tree,\n      (node) => {\n        if (match.anyMacro(node)) {\n          for (const arg of node.args || []) {\n            if (arg.content.length > 0 && !wasParsedInMathMode(arg.content)) {\n              arg.content = parseMathMinimal(\n                printRaw(arg.content)\n              );\n            }\n          }\n        }\n        if (match.anyEnvironment(node)) {\n          if (!wasParsedInMathMode(node.content)) {\n            node.content = parseMathMinimal(printRaw(node.content));\n          }\n        }\n      },\n      {\n        test: (node) => isMathEnvironment(node) || isMathMacro(node)\n      }\n    );\n  };\n}\nfunction wasParsedInMathMode(nodes) {\n  return !nodes.some(\n    (node) => (\n      // If there are multi-char strings or ^ and _ have been parsed as strings, we know\n      // that we were not parsed in math mode.\n      match.anyString(node) && node.content.length > 1 || match.string(node, \"^\") || match.string(node, \"_\")\n    )\n  );\n}\n\n// libs/process-macros-and-environments.ts\nimport { attachMacroArgsInArray } from \"@unified-latex/unified-latex-util-arguments\";\nimport { processEnvironment } from \"@unified-latex/unified-latex-util-environments\";\nvar unifiedLatexProcessMacrosAndEnvironmentsWithMathReparse = function unifiedLatexProcessMacrosAndEnvironmentsWithMathReparse2(options) {\n  const { environments = {}, macros = {} } = options || {};\n  const mathMacros = Object.fromEntries(\n    Object.entries(macros).filter(\n      ([_, info]) => {\n        var _a;\n        return ((_a = info.renderInfo) == null ? void 0 : _a.inMathMode) === true;\n      }\n    )\n  );\n  const mathEnvs = Object.fromEntries(\n    Object.entries(environments).filter(\n      ([_, info]) => {\n        var _a;\n        return ((_a = info.renderInfo) == null ? void 0 : _a.inMathMode) === true;\n      }\n    )\n  );\n  const mathReparser = unifiedLatexReparseMathConstructPlugin({\n    mathEnvs: Object.keys(mathEnvs),\n    mathMacros: Object.keys(mathMacros)\n  });\n  const isRelevantEnvironment = match2.createEnvironmentMatcher(environments);\n  const isRelevantMathEnvironment = match2.createEnvironmentMatcher(mathEnvs);\n  return (tree) => {\n    visit2(\n      tree,\n      {\n        enter: (nodes) => {\n          if (!Array.isArray(nodes)) {\n            return;\n          }\n          attachMacroArgsInArray(nodes, mathMacros);\n        },\n        leave: (node) => {\n          if (!isRelevantMathEnvironment(node)) {\n            return;\n          }\n          const envName = printRaw2(node.env);\n          const envInfo = environments[envName];\n          if (!envInfo) {\n            throw new Error(\n              `Could not find environment info for environment \"${envName}\"`\n            );\n          }\n          processEnvironment(node, envInfo);\n        }\n      },\n      { includeArrays: true }\n    );\n    mathReparser(tree);\n    visit2(\n      tree,\n      {\n        enter: (nodes) => {\n          if (!Array.isArray(nodes)) {\n            return;\n          }\n          attachMacroArgsInArray(nodes, macros);\n        },\n        leave: (node) => {\n          if (!isRelevantEnvironment(node)) {\n            return;\n          }\n          const envName = printRaw2(node.env);\n          const envInfo = environments[envName];\n          if (!envInfo) {\n            throw new Error(\n              `Could not find environment info for environment \"${envName}\"`\n            );\n          }\n          processEnvironment(node, envInfo);\n        }\n      },\n      { includeArrays: true }\n    );\n  };\n};\n\n// libs/process-at-letter-and-expl-macros.ts\nimport { reparseExpl3AndAtLetterRegions } from \"@unified-latex/unified-latex-util-catcode\";\nimport {\n  hasReparsableMacroNames,\n  reparseMacroNames\n} from \"@unified-latex/unified-latex-util-catcode\";\nvar unifiedLatexProcessAtLetterAndExplMacros = function unifiedLatexProcessAtLetterAndExplMacros2(options) {\n  let {\n    atLetter = false,\n    expl3 = false,\n    autodetectExpl3AndAtLetter = false\n  } = options || {};\n  return (tree) => {\n    reparseExpl3AndAtLetterRegions(tree);\n    if (atLetter || expl3) {\n      autodetectExpl3AndAtLetter = false;\n    }\n    if (autodetectExpl3AndAtLetter) {\n      atLetter = hasReparsableMacroNames(tree, \"@\");\n      expl3 = hasReparsableMacroNames(tree, \"_\");\n    }\n    const charSet = /* @__PURE__ */ new Set();\n    if (atLetter) {\n      charSet.add(\"@\");\n    }\n    if (expl3) {\n      charSet.add(\":\");\n      charSet.add(\"_\");\n    }\n    if (charSet.size > 0) {\n      reparseMacroNames(tree, charSet);\n    }\n  };\n};\n\n// libs/plugin-from-string.ts\nvar unifiedLatexFromString = function unifiedLatexFromString2(options) {\n  const {\n    mode = \"regular\",\n    macros = {},\n    environments = {},\n    flags: {\n      atLetter = false,\n      expl3 = false,\n      autodetectExpl3AndAtLetter = false\n    } = {}\n  } = options || {};\n  const allMacroInfo = Object.assign(\n    {},\n    ...Object.values(macroInfo),\n    macros\n  );\n  const allEnvInfo = Object.assign(\n    {},\n    ...Object.values(environmentInfo),\n    environments\n  );\n  const fullParser = unified().use(unifiedLatexFromStringMinimal, { mode }).use(unifiedLatexProcessAtLetterAndExplMacros, {\n    atLetter,\n    expl3,\n    autodetectExpl3AndAtLetter\n  }).use(unifiedLatexProcessMacrosAndEnvironmentsWithMathReparse, {\n    macros: allMacroInfo,\n    environments: allEnvInfo\n  }).use(unifiedLatexTrimEnvironmentContents).use(unifiedLatexTrimRoot).use(unifiedLatexAstComplier);\n  const parser2 = (str) => {\n    const file = fullParser.processSync({ value: str });\n    return file.result;\n  };\n  Object.assign(this, { Parser: parser2 });\n};\n\n// libs/parse.ts\nimport { unified as unified2 } from \"unified\";\nvar parser = unified2().use(unifiedLatexFromString).freeze();\nfunction parse(str) {\n  return parser.parse(str);\n}\nfunction getParser(options) {\n  return options ? unified2().use(unifiedLatexFromString, options).freeze() : parser;\n}\n\n// libs/parse-math.ts\nimport { unified as unified3 } from \"unified\";\nimport { printRaw as printRaw3 } from \"@unified-latex/unified-latex-util-print-raw\";\nfunction parseMath(str) {\n  if (typeof str !== \"string\") {\n    str = printRaw3(str);\n  }\n  const file = unified3().use(unifiedLatexFromString, { mode: \"math\" }).use(unifiedLatexAstComplier).processSync({ value: str });\n  return file.result.content;\n}\nexport {\n  getParser,\n  parse,\n  parseMath,\n  parseMathMinimal,\n  parseMinimal,\n  unifiedLatexAstComplier,\n  unifiedLatexFromString,\n  unifiedLatexFromStringMinimal\n};\n//# sourceMappingURL=index.js.map\n","var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\n\n// node_modules/prettier/doc.mjs\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar public_exports = {};\n__export(public_exports, {\n  builders: () => builders,\n  printer: () => printer,\n  utils: () => utils\n});\nvar DOC_TYPE_STRING = \"string\";\nvar DOC_TYPE_ARRAY = \"array\";\nvar DOC_TYPE_CURSOR = \"cursor\";\nvar DOC_TYPE_INDENT = \"indent\";\nvar DOC_TYPE_ALIGN = \"align\";\nvar DOC_TYPE_TRIM = \"trim\";\nvar DOC_TYPE_GROUP = \"group\";\nvar DOC_TYPE_FILL = \"fill\";\nvar DOC_TYPE_IF_BREAK = \"if-break\";\nvar DOC_TYPE_INDENT_IF_BREAK = \"indent-if-break\";\nvar DOC_TYPE_LINE_SUFFIX = \"line-suffix\";\nvar DOC_TYPE_LINE_SUFFIX_BOUNDARY = \"line-suffix-boundary\";\nvar DOC_TYPE_LINE = \"line\";\nvar DOC_TYPE_LABEL = \"label\";\nvar DOC_TYPE_BREAK_PARENT = \"break-parent\";\nvar VALID_OBJECT_DOC_TYPES = /* @__PURE__ */ new Set([\n  DOC_TYPE_CURSOR,\n  DOC_TYPE_INDENT,\n  DOC_TYPE_ALIGN,\n  DOC_TYPE_TRIM,\n  DOC_TYPE_GROUP,\n  DOC_TYPE_FILL,\n  DOC_TYPE_IF_BREAK,\n  DOC_TYPE_INDENT_IF_BREAK,\n  DOC_TYPE_LINE_SUFFIX,\n  DOC_TYPE_LINE_SUFFIX_BOUNDARY,\n  DOC_TYPE_LINE,\n  DOC_TYPE_LABEL,\n  DOC_TYPE_BREAK_PARENT\n]);\nfunction getDocType(doc) {\n  if (typeof doc === \"string\") {\n    return DOC_TYPE_STRING;\n  }\n  if (Array.isArray(doc)) {\n    return DOC_TYPE_ARRAY;\n  }\n  if (!doc) {\n    return;\n  }\n  const { type } = doc;\n  if (VALID_OBJECT_DOC_TYPES.has(type)) {\n    return type;\n  }\n}\nvar get_doc_type_default = getDocType;\nvar disjunctionListFormat = (list) => new Intl.ListFormat(\"en-US\", { type: \"disjunction\" }).format(list);\nfunction getDocErrorMessage(doc) {\n  const type = doc === null ? \"null\" : typeof doc;\n  if (type !== \"string\" && type !== \"object\") {\n    return `Unexpected doc '${type}', \nExpected it to be 'string' or 'object'.`;\n  }\n  if (get_doc_type_default(doc)) {\n    throw new Error(\"doc is valid.\");\n  }\n  const objectType = Object.prototype.toString.call(doc);\n  if (objectType !== \"[object Object]\") {\n    return `Unexpected doc '${objectType}'.`;\n  }\n  const EXPECTED_TYPE_VALUES = disjunctionListFormat(\n    [...VALID_OBJECT_DOC_TYPES].map((type2) => `'${type2}'`)\n  );\n  return `Unexpected doc.type '${doc.type}'.\nExpected it to be ${EXPECTED_TYPE_VALUES}.`;\n}\nvar InvalidDocError = class extends Error {\n  name = \"InvalidDocError\";\n  constructor(doc) {\n    super(getDocErrorMessage(doc));\n    this.doc = doc;\n  }\n};\nvar invalid_doc_error_default = InvalidDocError;\nvar traverseDocOnExitStackMarker = {};\nfunction traverseDoc(doc, onEnter, onExit, shouldTraverseConditionalGroups) {\n  const docsStack = [doc];\n  while (docsStack.length > 0) {\n    const doc2 = docsStack.pop();\n    if (doc2 === traverseDocOnExitStackMarker) {\n      onExit(docsStack.pop());\n      continue;\n    }\n    if (onExit) {\n      docsStack.push(doc2, traverseDocOnExitStackMarker);\n    }\n    const docType = get_doc_type_default(doc2);\n    if (!docType) {\n      throw new invalid_doc_error_default(doc2);\n    }\n    if ((onEnter == null ? void 0 : onEnter(doc2)) === false) {\n      continue;\n    }\n    switch (docType) {\n      case DOC_TYPE_ARRAY:\n      case DOC_TYPE_FILL: {\n        const parts = docType === DOC_TYPE_ARRAY ? doc2 : doc2.parts;\n        for (let ic = parts.length, i = ic - 1; i >= 0; --i) {\n          docsStack.push(parts[i]);\n        }\n        break;\n      }\n      case DOC_TYPE_IF_BREAK:\n        docsStack.push(doc2.flatContents, doc2.breakContents);\n        break;\n      case DOC_TYPE_GROUP:\n        if (shouldTraverseConditionalGroups && doc2.expandedStates) {\n          for (let ic = doc2.expandedStates.length, i = ic - 1; i >= 0; --i) {\n            docsStack.push(doc2.expandedStates[i]);\n          }\n        } else {\n          docsStack.push(doc2.contents);\n        }\n        break;\n      case DOC_TYPE_ALIGN:\n      case DOC_TYPE_INDENT:\n      case DOC_TYPE_INDENT_IF_BREAK:\n      case DOC_TYPE_LABEL:\n      case DOC_TYPE_LINE_SUFFIX:\n        docsStack.push(doc2.contents);\n        break;\n      case DOC_TYPE_STRING:\n      case DOC_TYPE_CURSOR:\n      case DOC_TYPE_TRIM:\n      case DOC_TYPE_LINE_SUFFIX_BOUNDARY:\n      case DOC_TYPE_LINE:\n      case DOC_TYPE_BREAK_PARENT:\n        break;\n      default:\n        throw new invalid_doc_error_default(doc2);\n    }\n  }\n}\nvar traverse_doc_default = traverseDoc;\nvar noop = () => {\n};\nvar assertDoc = true ? noop : function(doc) {\n  traverse_doc_default(doc, (doc2) => {\n    if (checked.has(doc2)) {\n      return false;\n    }\n    if (typeof doc2 !== \"string\") {\n      checked.add(doc2);\n    }\n  });\n};\nvar assertDocArray = true ? noop : function(docs, optional = false) {\n  if (optional && !docs) {\n    return;\n  }\n  if (!Array.isArray(docs)) {\n    throw new TypeError(\"Unexpected doc array.\");\n  }\n  for (const doc of docs) {\n    assertDoc(doc);\n  }\n};\nfunction indent(contents) {\n  assertDoc(contents);\n  return { type: DOC_TYPE_INDENT, contents };\n}\nfunction align(widthOrString, contents) {\n  assertDoc(contents);\n  return { type: DOC_TYPE_ALIGN, contents, n: widthOrString };\n}\nfunction group(contents, opts = {}) {\n  assertDoc(contents);\n  assertDocArray(\n    opts.expandedStates,\n    /* optional */\n    true\n  );\n  return {\n    type: DOC_TYPE_GROUP,\n    id: opts.id,\n    contents,\n    break: Boolean(opts.shouldBreak),\n    expandedStates: opts.expandedStates\n  };\n}\nfunction dedentToRoot(contents) {\n  return align(Number.NEGATIVE_INFINITY, contents);\n}\nfunction markAsRoot(contents) {\n  return align({ type: \"root\" }, contents);\n}\nfunction dedent(contents) {\n  return align(-1, contents);\n}\nfunction conditionalGroup(states, opts) {\n  return group(states[0], { ...opts, expandedStates: states });\n}\nfunction fill(parts) {\n  assertDocArray(parts);\n  return { type: DOC_TYPE_FILL, parts };\n}\nfunction ifBreak(breakContents, flatContents = \"\", opts = {}) {\n  assertDoc(breakContents);\n  if (flatContents !== \"\") {\n    assertDoc(flatContents);\n  }\n  return {\n    type: DOC_TYPE_IF_BREAK,\n    breakContents,\n    flatContents,\n    groupId: opts.groupId\n  };\n}\nfunction indentIfBreak(contents, opts) {\n  assertDoc(contents);\n  return {\n    type: DOC_TYPE_INDENT_IF_BREAK,\n    contents,\n    groupId: opts.groupId,\n    negate: opts.negate\n  };\n}\nfunction lineSuffix(contents) {\n  assertDoc(contents);\n  return { type: DOC_TYPE_LINE_SUFFIX, contents };\n}\nvar lineSuffixBoundary = { type: DOC_TYPE_LINE_SUFFIX_BOUNDARY };\nvar breakParent = { type: DOC_TYPE_BREAK_PARENT };\nvar trim = { type: DOC_TYPE_TRIM };\nvar hardlineWithoutBreakParent = { type: DOC_TYPE_LINE, hard: true };\nvar literallineWithoutBreakParent = {\n  type: DOC_TYPE_LINE,\n  hard: true,\n  literal: true\n};\nvar line = { type: DOC_TYPE_LINE };\nvar softline = { type: DOC_TYPE_LINE, soft: true };\nvar hardline = [hardlineWithoutBreakParent, breakParent];\nvar literalline = [literallineWithoutBreakParent, breakParent];\nvar cursor = { type: DOC_TYPE_CURSOR };\nfunction join(separator, docs) {\n  assertDoc(separator);\n  assertDocArray(docs);\n  const parts = [];\n  for (let i = 0; i < docs.length; i++) {\n    if (i !== 0) {\n      parts.push(separator);\n    }\n    parts.push(docs[i]);\n  }\n  return parts;\n}\nfunction addAlignmentToDoc(doc, size, tabWidth) {\n  assertDoc(doc);\n  let aligned = doc;\n  if (size > 0) {\n    for (let i = 0; i < Math.floor(size / tabWidth); ++i) {\n      aligned = indent(aligned);\n    }\n    aligned = align(size % tabWidth, aligned);\n    aligned = align(Number.NEGATIVE_INFINITY, aligned);\n  }\n  return aligned;\n}\nfunction label(label2, contents) {\n  assertDoc(contents);\n  return label2 ? { type: DOC_TYPE_LABEL, label: label2, contents } : contents;\n}\nvar at = (isOptionalObject, object, index) => {\n  if (isOptionalObject && (object === void 0 || object === null)) {\n    return;\n  }\n  if (Array.isArray(object) || typeof object === \"string\") {\n    return object[index < 0 ? object.length + index : index];\n  }\n  return object.at(index);\n};\nvar at_default = at;\nvar stringReplaceAll = (isOptionalObject, original, pattern, replacement) => {\n  if (isOptionalObject && (original === void 0 || original === null)) {\n    return;\n  }\n  if (original.replaceAll) {\n    return original.replaceAll(pattern, replacement);\n  }\n  if (pattern.global) {\n    return original.replace(pattern, replacement);\n  }\n  return original.split(pattern).join(replacement);\n};\nvar string_replace_all_default = stringReplaceAll;\nfunction convertEndOfLineToChars(value) {\n  switch (value) {\n    case \"cr\":\n      return \"\\r\";\n    case \"crlf\":\n      return \"\\r\\n\";\n    default:\n      return \"\\n\";\n  }\n}\nvar emoji_regex_default = () => {\n  return /[#*0-9]\\uFE0F?\\u20E3|[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23ED-\\u23EF\\u23F1\\u23F2\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB\\u25FC\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692\\u2694-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A7\\u26AA\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C8\\u26CF\\u26D1\\u26D3\\u26E9\\u26F0-\\u26F5\\u26F7\\u26F8\\u26FA\\u2702\\u2708\\u2709\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2733\\u2734\\u2744\\u2747\\u2757\\u2763\\u27A1\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B55\\u3030\\u303D\\u3297\\u3299]\\uFE0F?|[\\u261D\\u270C\\u270D](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?|[\\u270A\\u270B](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u2693\\u26A1\\u26AB\\u26C5\\u26CE\\u26D4\\u26EA\\u26FD\\u2705\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2795-\\u2797\\u27B0\\u27BF\\u2B50]|\\u26F9(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\u2764\\uFE0F?(?:\\u200D(?:\\uD83D\\uDD25|\\uD83E\\uDE79))?|\\uD83C(?:[\\uDC04\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDE02\\uDE37\\uDF21\\uDF24-\\uDF2C\\uDF36\\uDF7D\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E\\uDF9F\\uDFCD\\uDFCE\\uDFD4-\\uDFDF\\uDFF5\\uDFF7]\\uFE0F?|[\\uDF85\\uDFC2\\uDFC7](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDFC3\\uDFC4\\uDFCA](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDFCB\\uDFCC](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF84\\uDF86-\\uDF93\\uDFA0-\\uDFC1\\uDFC5\\uDFC6\\uDFC8\\uDFC9\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF8-\\uDFFF]|\\uDDE6\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF]|\\uDDE7\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF]|\\uDDE8\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF]|\\uDDE9\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF]|\\uDDEA\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA]|\\uDDEB\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7]|\\uDDEC\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE]|\\uDDED\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA]|\\uDDEE\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9]|\\uDDEF\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5]|\\uDDF0\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF]|\\uDDF1\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE]|\\uDDF2\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF]|\\uDDF3\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF]|\\uDDF4\\uD83C\\uDDF2|\\uDDF5\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE]|\\uDDF6\\uD83C\\uDDE6|\\uDDF7\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC]|\\uDDF8\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF]|\\uDDF9\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF]|\\uDDFA\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF]|\\uDDFB\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA]|\\uDDFC\\uD83C[\\uDDEB\\uDDF8]|\\uDDFD\\uD83C\\uDDF0|\\uDDFE\\uD83C[\\uDDEA\\uDDF9]|\\uDDFF\\uD83C[\\uDDE6\\uDDF2\\uDDFC]|\\uDFF3\\uFE0F?(?:\\u200D(?:\\u26A7\\uFE0F?|\\uD83C\\uDF08))?|\\uDFF4(?:\\u200D\\u2620\\uFE0F?|\\uDB40\\uDC67\\uDB40\\uDC62\\uDB40(?:\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F)?)|\\uD83D(?:[\\uDC08\\uDC26](?:\\u200D\\u2B1B)?|[\\uDC3F\\uDCFD\\uDD49\\uDD4A\\uDD6F\\uDD70\\uDD73\\uDD76-\\uDD79\\uDD87\\uDD8A-\\uDD8D\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA\\uDECB\\uDECD-\\uDECF\\uDEE0-\\uDEE5\\uDEE9\\uDEF0\\uDEF3]\\uFE0F?|[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDC8F\\uDC91\\uDCAA\\uDD7A\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDC6E\\uDC70\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDD74\\uDD90](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDC00-\\uDC07\\uDC09-\\uDC14\\uDC16-\\uDC25\\uDC27-\\uDC3A\\uDC3C-\\uDC3E\\uDC40\\uDC44\\uDC45\\uDC51-\\uDC65\\uDC6A\\uDC79-\\uDC7B\\uDC7D-\\uDC80\\uDC84\\uDC88-\\uDC8E\\uDC90\\uDC92-\\uDCA9\\uDCAB-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDDA4\\uDDFB-\\uDE2D\\uDE2F-\\uDE34\\uDE37-\\uDE44\\uDE48-\\uDE4A\\uDE80-\\uDEA2\\uDEA4-\\uDEB3\\uDEB7-\\uDEBF\\uDEC1-\\uDEC5\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEDC-\\uDEDF\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB\\uDFF0]|\\uDC15(?:\\u200D\\uD83E\\uDDBA)?|\\uDC3B(?:\\u200D\\u2744\\uFE0F?)?|\\uDC41\\uFE0F?(?:\\u200D\\uD83D\\uDDE8\\uFE0F?)?|\\uDC68(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D(?:[\\uDC68\\uDC69]\\u200D\\uD83D(?:\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?)|[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?)|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFC-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB-\\uDFFE])))?))?|\\uDC69(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?[\\uDC68\\uDC69]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D(?:[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?|\\uDC69\\u200D\\uD83D(?:\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?))|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFC-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB-\\uDFFE])))?))?|\\uDC6F(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\uDD75(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\uDE2E(?:\\u200D\\uD83D\\uDCA8)?|\\uDE35(?:\\u200D\\uD83D\\uDCAB)?|\\uDE36(?:\\u200D\\uD83C\\uDF2B\\uFE0F?)?)|\\uD83E(?:[\\uDD0C\\uDD0F\\uDD18-\\uDD1F\\uDD30-\\uDD34\\uDD36\\uDD77\\uDDB5\\uDDB6\\uDDBB\\uDDD2\\uDDD3\\uDDD5\\uDEC3-\\uDEC5\\uDEF0\\uDEF2-\\uDEF8](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDD26\\uDD35\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD4\\uDDD6-\\uDDDD](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDDDE\\uDDDF](?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDD0D\\uDD0E\\uDD10-\\uDD17\\uDD20-\\uDD25\\uDD27-\\uDD2F\\uDD3A\\uDD3F-\\uDD45\\uDD47-\\uDD76\\uDD78-\\uDDB4\\uDDB7\\uDDBA\\uDDBC-\\uDDCC\\uDDD0\\uDDE0-\\uDDFF\\uDE70-\\uDE7C\\uDE80-\\uDE88\\uDE90-\\uDEBD\\uDEBF-\\uDEC2\\uDECE-\\uDEDB\\uDEE0-\\uDEE8]|\\uDD3C(?:\\u200D[\\u2640\\u2642]\\uFE0F?|\\uD83C[\\uDFFB-\\uDFFF])?|\\uDDD1(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1))|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFC-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB\\uDFFD-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFD\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFE]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?))?|\\uDEF1(?:\\uD83C(?:\\uDFFB(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFC-\\uDFFF])?|\\uDFFC(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])?|\\uDFFD(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])?|\\uDFFE(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])?|\\uDFFF(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB-\\uDFFE])?))?)/g;\n};\nvar eastasianwidth_default = {\n  eastAsianWidth(character) {\n    var x = character.charCodeAt(0);\n    var y = character.length == 2 ? character.charCodeAt(1) : 0;\n    var codePoint = x;\n    if (55296 <= x && x <= 56319 && 56320 <= y && y <= 57343) {\n      x &= 1023;\n      y &= 1023;\n      codePoint = x << 10 | y;\n      codePoint += 65536;\n    }\n    if (12288 == codePoint || 65281 <= codePoint && codePoint <= 65376 || 65504 <= codePoint && codePoint <= 65510) {\n      return \"F\";\n    }\n    if (4352 <= codePoint && codePoint <= 4447 || 4515 <= codePoint && codePoint <= 4519 || 4602 <= codePoint && codePoint <= 4607 || 9001 <= codePoint && codePoint <= 9002 || 11904 <= codePoint && codePoint <= 11929 || 11931 <= codePoint && codePoint <= 12019 || 12032 <= codePoint && codePoint <= 12245 || 12272 <= codePoint && codePoint <= 12283 || 12289 <= codePoint && codePoint <= 12350 || 12353 <= codePoint && codePoint <= 12438 || 12441 <= codePoint && codePoint <= 12543 || 12549 <= codePoint && codePoint <= 12589 || 12593 <= codePoint && codePoint <= 12686 || 12688 <= codePoint && codePoint <= 12730 || 12736 <= codePoint && codePoint <= 12771 || 12784 <= codePoint && codePoint <= 12830 || 12832 <= codePoint && codePoint <= 12871 || 12880 <= codePoint && codePoint <= 13054 || 13056 <= codePoint && codePoint <= 19903 || 19968 <= codePoint && codePoint <= 42124 || 42128 <= codePoint && codePoint <= 42182 || 43360 <= codePoint && codePoint <= 43388 || 44032 <= codePoint && codePoint <= 55203 || 55216 <= codePoint && codePoint <= 55238 || 55243 <= codePoint && codePoint <= 55291 || 63744 <= codePoint && codePoint <= 64255 || 65040 <= codePoint && codePoint <= 65049 || 65072 <= codePoint && codePoint <= 65106 || 65108 <= codePoint && codePoint <= 65126 || 65128 <= codePoint && codePoint <= 65131 || 110592 <= codePoint && codePoint <= 110593 || 127488 <= codePoint && codePoint <= 127490 || 127504 <= codePoint && codePoint <= 127546 || 127552 <= codePoint && codePoint <= 127560 || 127568 <= codePoint && codePoint <= 127569 || 131072 <= codePoint && codePoint <= 194367 || 177984 <= codePoint && codePoint <= 196605 || 196608 <= codePoint && codePoint <= 262141) {\n      return \"W\";\n    }\n    return \"N\";\n  }\n};\nvar notAsciiRegex = /[^\\x20-\\x7F]/;\nfunction getStringWidth(text) {\n  if (!text) {\n    return 0;\n  }\n  if (!notAsciiRegex.test(text)) {\n    return text.length;\n  }\n  text = text.replace(emoji_regex_default(), \"  \");\n  let width = 0;\n  for (const character of text) {\n    const codePoint = character.codePointAt(0);\n    if (codePoint <= 31 || codePoint >= 127 && codePoint <= 159) {\n      continue;\n    }\n    if (codePoint >= 768 && codePoint <= 879) {\n      continue;\n    }\n    const code = eastasianwidth_default.eastAsianWidth(character);\n    width += code === \"F\" || code === \"W\" ? 2 : 1;\n  }\n  return width;\n}\nvar get_string_width_default = getStringWidth;\nvar getDocParts = (doc) => {\n  if (Array.isArray(doc)) {\n    return doc;\n  }\n  if (doc.type !== DOC_TYPE_FILL) {\n    throw new Error(`Expect doc to be 'array' or '${DOC_TYPE_FILL}'.`);\n  }\n  return doc.parts;\n};\nfunction mapDoc(doc, cb) {\n  if (typeof doc === \"string\") {\n    return cb(doc);\n  }\n  const mapped = /* @__PURE__ */ new Map();\n  return rec(doc);\n  function rec(doc2) {\n    if (mapped.has(doc2)) {\n      return mapped.get(doc2);\n    }\n    const result = process2(doc2);\n    mapped.set(doc2, result);\n    return result;\n  }\n  function process2(doc2) {\n    switch (get_doc_type_default(doc2)) {\n      case DOC_TYPE_ARRAY:\n        return cb(doc2.map(rec));\n      case DOC_TYPE_FILL:\n        return cb({\n          ...doc2,\n          parts: doc2.parts.map(rec)\n        });\n      case DOC_TYPE_IF_BREAK:\n        return cb({\n          ...doc2,\n          breakContents: rec(doc2.breakContents),\n          flatContents: rec(doc2.flatContents)\n        });\n      case DOC_TYPE_GROUP: {\n        let {\n          expandedStates,\n          contents\n        } = doc2;\n        if (expandedStates) {\n          expandedStates = expandedStates.map(rec);\n          contents = expandedStates[0];\n        } else {\n          contents = rec(contents);\n        }\n        return cb({\n          ...doc2,\n          contents,\n          expandedStates\n        });\n      }\n      case DOC_TYPE_ALIGN:\n      case DOC_TYPE_INDENT:\n      case DOC_TYPE_INDENT_IF_BREAK:\n      case DOC_TYPE_LABEL:\n      case DOC_TYPE_LINE_SUFFIX:\n        return cb({\n          ...doc2,\n          contents: rec(doc2.contents)\n        });\n      case DOC_TYPE_STRING:\n      case DOC_TYPE_CURSOR:\n      case DOC_TYPE_TRIM:\n      case DOC_TYPE_LINE_SUFFIX_BOUNDARY:\n      case DOC_TYPE_LINE:\n      case DOC_TYPE_BREAK_PARENT:\n        return cb(doc2);\n      default:\n        throw new invalid_doc_error_default(doc2);\n    }\n  }\n}\nfunction findInDoc(doc, fn, defaultValue) {\n  let result = defaultValue;\n  let shouldSkipFurtherProcessing = false;\n  function findInDocOnEnterFn(doc2) {\n    if (shouldSkipFurtherProcessing) {\n      return false;\n    }\n    const maybeResult = fn(doc2);\n    if (maybeResult !== void 0) {\n      shouldSkipFurtherProcessing = true;\n      result = maybeResult;\n    }\n  }\n  traverse_doc_default(doc, findInDocOnEnterFn);\n  return result;\n}\nfunction willBreakFn(doc) {\n  if (doc.type === DOC_TYPE_GROUP && doc.break) {\n    return true;\n  }\n  if (doc.type === DOC_TYPE_LINE && doc.hard) {\n    return true;\n  }\n  if (doc.type === DOC_TYPE_BREAK_PARENT) {\n    return true;\n  }\n}\nfunction willBreak(doc) {\n  return findInDoc(doc, willBreakFn, false);\n}\nfunction breakParentGroup(groupStack) {\n  if (groupStack.length > 0) {\n    const parentGroup = at_default(\n      /* isOptionalObject*/\n      false,\n      groupStack,\n      -1\n    );\n    if (!parentGroup.expandedStates && !parentGroup.break) {\n      parentGroup.break = \"propagated\";\n    }\n  }\n  return null;\n}\nfunction propagateBreaks(doc) {\n  const alreadyVisitedSet = /* @__PURE__ */ new Set();\n  const groupStack = [];\n  function propagateBreaksOnEnterFn(doc2) {\n    if (doc2.type === DOC_TYPE_BREAK_PARENT) {\n      breakParentGroup(groupStack);\n    }\n    if (doc2.type === DOC_TYPE_GROUP) {\n      groupStack.push(doc2);\n      if (alreadyVisitedSet.has(doc2)) {\n        return false;\n      }\n      alreadyVisitedSet.add(doc2);\n    }\n  }\n  function propagateBreaksOnExitFn(doc2) {\n    if (doc2.type === DOC_TYPE_GROUP) {\n      const group22 = groupStack.pop();\n      if (group22.break) {\n        breakParentGroup(groupStack);\n      }\n    }\n  }\n  traverse_doc_default(\n    doc,\n    propagateBreaksOnEnterFn,\n    propagateBreaksOnExitFn,\n    /* shouldTraverseConditionalGroups */\n    true\n  );\n}\nfunction removeLinesFn(doc) {\n  if (doc.type === DOC_TYPE_LINE && !doc.hard) {\n    return doc.soft ? \"\" : \" \";\n  }\n  if (doc.type === DOC_TYPE_IF_BREAK) {\n    return doc.flatContents;\n  }\n  return doc;\n}\nfunction removeLines(doc) {\n  return mapDoc(doc, removeLinesFn);\n}\nfunction stripTrailingHardlineFromParts(parts) {\n  parts = [...parts];\n  while (parts.length >= 2 && at_default(\n    /* isOptionalObject*/\n    false,\n    parts,\n    -2\n  ).type === DOC_TYPE_LINE && at_default(\n    /* isOptionalObject*/\n    false,\n    parts,\n    -1\n  ).type === DOC_TYPE_BREAK_PARENT) {\n    parts.length -= 2;\n  }\n  if (parts.length > 0) {\n    const lastPart = stripTrailingHardlineFromDoc(at_default(\n      /* isOptionalObject*/\n      false,\n      parts,\n      -1\n    ));\n    parts[parts.length - 1] = lastPart;\n  }\n  return parts;\n}\nfunction stripTrailingHardlineFromDoc(doc) {\n  switch (get_doc_type_default(doc)) {\n    case DOC_TYPE_ALIGN:\n    case DOC_TYPE_INDENT:\n    case DOC_TYPE_INDENT_IF_BREAK:\n    case DOC_TYPE_GROUP:\n    case DOC_TYPE_LINE_SUFFIX:\n    case DOC_TYPE_LABEL: {\n      const contents = stripTrailingHardlineFromDoc(doc.contents);\n      return {\n        ...doc,\n        contents\n      };\n    }\n    case DOC_TYPE_IF_BREAK:\n      return {\n        ...doc,\n        breakContents: stripTrailingHardlineFromDoc(doc.breakContents),\n        flatContents: stripTrailingHardlineFromDoc(doc.flatContents)\n      };\n    case DOC_TYPE_FILL:\n      return {\n        ...doc,\n        parts: stripTrailingHardlineFromParts(doc.parts)\n      };\n    case DOC_TYPE_ARRAY:\n      return stripTrailingHardlineFromParts(doc);\n    case DOC_TYPE_STRING:\n      return doc.replace(/[\\n\\r]*$/, \"\");\n    case DOC_TYPE_CURSOR:\n    case DOC_TYPE_TRIM:\n    case DOC_TYPE_LINE_SUFFIX_BOUNDARY:\n    case DOC_TYPE_LINE:\n    case DOC_TYPE_BREAK_PARENT:\n      break;\n    default:\n      throw new invalid_doc_error_default(doc);\n  }\n  return doc;\n}\nfunction stripTrailingHardline(doc) {\n  return stripTrailingHardlineFromDoc(cleanDoc(doc));\n}\nfunction cleanDocFn(doc) {\n  switch (get_doc_type_default(doc)) {\n    case DOC_TYPE_FILL:\n      if (doc.parts.every((part) => part === \"\")) {\n        return \"\";\n      }\n      break;\n    case DOC_TYPE_GROUP:\n      if (!doc.contents && !doc.id && !doc.break && !doc.expandedStates) {\n        return \"\";\n      }\n      if (doc.contents.type === DOC_TYPE_GROUP && doc.contents.id === doc.id && doc.contents.break === doc.break && doc.contents.expandedStates === doc.expandedStates) {\n        return doc.contents;\n      }\n      break;\n    case DOC_TYPE_ALIGN:\n    case DOC_TYPE_INDENT:\n    case DOC_TYPE_INDENT_IF_BREAK:\n    case DOC_TYPE_LINE_SUFFIX:\n      if (!doc.contents) {\n        return \"\";\n      }\n      break;\n    case DOC_TYPE_IF_BREAK:\n      if (!doc.flatContents && !doc.breakContents) {\n        return \"\";\n      }\n      break;\n    case DOC_TYPE_ARRAY: {\n      const parts = [];\n      for (const part of doc) {\n        if (!part) {\n          continue;\n        }\n        const [currentPart, ...restParts] = Array.isArray(part) ? part : [part];\n        if (typeof currentPart === \"string\" && typeof at_default(\n          /* isOptionalObject*/\n          false,\n          parts,\n          -1\n        ) === \"string\") {\n          parts[parts.length - 1] += currentPart;\n        } else {\n          parts.push(currentPart);\n        }\n        parts.push(...restParts);\n      }\n      if (parts.length === 0) {\n        return \"\";\n      }\n      if (parts.length === 1) {\n        return parts[0];\n      }\n      return parts;\n    }\n    case DOC_TYPE_STRING:\n    case DOC_TYPE_CURSOR:\n    case DOC_TYPE_TRIM:\n    case DOC_TYPE_LINE_SUFFIX_BOUNDARY:\n    case DOC_TYPE_LINE:\n    case DOC_TYPE_LABEL:\n    case DOC_TYPE_BREAK_PARENT:\n      break;\n    default:\n      throw new invalid_doc_error_default(doc);\n  }\n  return doc;\n}\nfunction cleanDoc(doc) {\n  return mapDoc(doc, (currentDoc) => cleanDocFn(currentDoc));\n}\nfunction replaceEndOfLine(doc, replacement = literalline) {\n  return mapDoc(doc, (currentDoc) => typeof currentDoc === \"string\" ? join(replacement, currentDoc.split(\"\\n\")) : currentDoc);\n}\nfunction canBreakFn(doc) {\n  if (doc.type === DOC_TYPE_LINE) {\n    return true;\n  }\n}\nfunction canBreak(doc) {\n  return findInDoc(doc, canBreakFn, false);\n}\nvar MODE_BREAK = Symbol(\"MODE_BREAK\");\nvar MODE_FLAT = Symbol(\"MODE_FLAT\");\nvar CURSOR_PLACEHOLDER = Symbol(\"cursor\");\nfunction rootIndent() {\n  return {\n    value: \"\",\n    length: 0,\n    queue: []\n  };\n}\nfunction makeIndent(ind, options) {\n  return generateInd(ind, {\n    type: \"indent\"\n  }, options);\n}\nfunction makeAlign(indent22, widthOrDoc, options) {\n  if (widthOrDoc === Number.NEGATIVE_INFINITY) {\n    return indent22.root || rootIndent();\n  }\n  if (widthOrDoc < 0) {\n    return generateInd(indent22, {\n      type: \"dedent\"\n    }, options);\n  }\n  if (!widthOrDoc) {\n    return indent22;\n  }\n  if (widthOrDoc.type === \"root\") {\n    return {\n      ...indent22,\n      root: indent22\n    };\n  }\n  const alignType = typeof widthOrDoc === \"string\" ? \"stringAlign\" : \"numberAlign\";\n  return generateInd(indent22, {\n    type: alignType,\n    n: widthOrDoc\n  }, options);\n}\nfunction generateInd(ind, newPart, options) {\n  const queue = newPart.type === \"dedent\" ? ind.queue.slice(0, -1) : [...ind.queue, newPart];\n  let value = \"\";\n  let length = 0;\n  let lastTabs = 0;\n  let lastSpaces = 0;\n  for (const part of queue) {\n    switch (part.type) {\n      case \"indent\":\n        flush();\n        if (options.useTabs) {\n          addTabs(1);\n        } else {\n          addSpaces(options.tabWidth);\n        }\n        break;\n      case \"stringAlign\":\n        flush();\n        value += part.n;\n        length += part.n.length;\n        break;\n      case \"numberAlign\":\n        lastTabs += 1;\n        lastSpaces += part.n;\n        break;\n      default:\n        throw new Error(`Unexpected type '${part.type}'`);\n    }\n  }\n  flushSpaces();\n  return {\n    ...ind,\n    value,\n    length,\n    queue\n  };\n  function addTabs(count) {\n    value += \"\t\".repeat(count);\n    length += options.tabWidth * count;\n  }\n  function addSpaces(count) {\n    value += \" \".repeat(count);\n    length += count;\n  }\n  function flush() {\n    if (options.useTabs) {\n      flushTabs();\n    } else {\n      flushSpaces();\n    }\n  }\n  function flushTabs() {\n    if (lastTabs > 0) {\n      addTabs(lastTabs);\n    }\n    resetLast();\n  }\n  function flushSpaces() {\n    if (lastSpaces > 0) {\n      addSpaces(lastSpaces);\n    }\n    resetLast();\n  }\n  function resetLast() {\n    lastTabs = 0;\n    lastSpaces = 0;\n  }\n}\nfunction trim2(out) {\n  let trimCount = 0;\n  let cursorCount = 0;\n  let outIndex = out.length;\n  outer:\n    while (outIndex--) {\n      const last = out[outIndex];\n      if (last === CURSOR_PLACEHOLDER) {\n        cursorCount++;\n        continue;\n      }\n      if (false) {\n        throw new Error(`Unexpected value in trim: '${typeof last}'`);\n      }\n      for (let charIndex = last.length - 1; charIndex >= 0; charIndex--) {\n        const char = last[charIndex];\n        if (char === \" \" || char === \"\t\") {\n          trimCount++;\n        } else {\n          out[outIndex] = last.slice(0, charIndex + 1);\n          break outer;\n        }\n      }\n    }\n  if (trimCount > 0 || cursorCount > 0) {\n    out.length = outIndex + 1;\n    while (cursorCount-- > 0) {\n      out.push(CURSOR_PLACEHOLDER);\n    }\n  }\n  return trimCount;\n}\nfunction fits(next, restCommands, width, hasLineSuffix, groupModeMap, mustBeFlat) {\n  if (width === Number.POSITIVE_INFINITY) {\n    return true;\n  }\n  let restIdx = restCommands.length;\n  const cmds = [next];\n  const out = [];\n  while (width >= 0) {\n    if (cmds.length === 0) {\n      if (restIdx === 0) {\n        return true;\n      }\n      cmds.push(restCommands[--restIdx]);\n      continue;\n    }\n    const {\n      mode,\n      doc\n    } = cmds.pop();\n    switch (get_doc_type_default(doc)) {\n      case DOC_TYPE_STRING:\n        out.push(doc);\n        width -= get_string_width_default(doc);\n        break;\n      case DOC_TYPE_ARRAY:\n      case DOC_TYPE_FILL: {\n        const parts = getDocParts(doc);\n        for (let i = parts.length - 1; i >= 0; i--) {\n          cmds.push({\n            mode,\n            doc: parts[i]\n          });\n        }\n        break;\n      }\n      case DOC_TYPE_INDENT:\n      case DOC_TYPE_ALIGN:\n      case DOC_TYPE_INDENT_IF_BREAK:\n      case DOC_TYPE_LABEL:\n        cmds.push({\n          mode,\n          doc: doc.contents\n        });\n        break;\n      case DOC_TYPE_TRIM:\n        width += trim2(out);\n        break;\n      case DOC_TYPE_GROUP: {\n        if (mustBeFlat && doc.break) {\n          return false;\n        }\n        const groupMode = doc.break ? MODE_BREAK : mode;\n        const contents = doc.expandedStates && groupMode === MODE_BREAK ? at_default(\n          /* isOptionalObject*/\n          false,\n          doc.expandedStates,\n          -1\n        ) : doc.contents;\n        cmds.push({\n          mode: groupMode,\n          doc: contents\n        });\n        break;\n      }\n      case DOC_TYPE_IF_BREAK: {\n        const groupMode = doc.groupId ? groupModeMap[doc.groupId] || MODE_FLAT : mode;\n        const contents = groupMode === MODE_BREAK ? doc.breakContents : doc.flatContents;\n        if (contents) {\n          cmds.push({\n            mode,\n            doc: contents\n          });\n        }\n        break;\n      }\n      case DOC_TYPE_LINE:\n        if (mode === MODE_BREAK || doc.hard) {\n          return true;\n        }\n        if (!doc.soft) {\n          out.push(\" \");\n          width--;\n        }\n        break;\n      case DOC_TYPE_LINE_SUFFIX:\n        hasLineSuffix = true;\n        break;\n      case DOC_TYPE_LINE_SUFFIX_BOUNDARY:\n        if (hasLineSuffix) {\n          return false;\n        }\n        break;\n    }\n  }\n  return false;\n}\nfunction printDocToString(doc, options) {\n  const groupModeMap = {};\n  const width = options.printWidth;\n  const newLine = convertEndOfLineToChars(options.endOfLine);\n  let pos = 0;\n  const cmds = [{\n    ind: rootIndent(),\n    mode: MODE_BREAK,\n    doc\n  }];\n  const out = [];\n  let shouldRemeasure = false;\n  const lineSuffix22 = [];\n  let printedCursorCount = 0;\n  propagateBreaks(doc);\n  while (cmds.length > 0) {\n    const {\n      ind,\n      mode,\n      doc: doc2\n    } = cmds.pop();\n    switch (get_doc_type_default(doc2)) {\n      case DOC_TYPE_STRING: {\n        const formatted = newLine !== \"\\n\" ? string_replace_all_default(\n          /* isOptionalObject*/\n          false,\n          doc2,\n          \"\\n\",\n          newLine\n        ) : doc2;\n        out.push(formatted);\n        if (cmds.length > 0) {\n          pos += get_string_width_default(formatted);\n        }\n        break;\n      }\n      case DOC_TYPE_ARRAY:\n        for (let i = doc2.length - 1; i >= 0; i--) {\n          cmds.push({\n            ind,\n            mode,\n            doc: doc2[i]\n          });\n        }\n        break;\n      case DOC_TYPE_CURSOR:\n        if (printedCursorCount >= 2) {\n          throw new Error(\"There are too many 'cursor' in doc.\");\n        }\n        out.push(CURSOR_PLACEHOLDER);\n        printedCursorCount++;\n        break;\n      case DOC_TYPE_INDENT:\n        cmds.push({\n          ind: makeIndent(ind, options),\n          mode,\n          doc: doc2.contents\n        });\n        break;\n      case DOC_TYPE_ALIGN:\n        cmds.push({\n          ind: makeAlign(ind, doc2.n, options),\n          mode,\n          doc: doc2.contents\n        });\n        break;\n      case DOC_TYPE_TRIM:\n        pos -= trim2(out);\n        break;\n      case DOC_TYPE_GROUP:\n        switch (mode) {\n          case MODE_FLAT:\n            if (!shouldRemeasure) {\n              cmds.push({\n                ind,\n                mode: doc2.break ? MODE_BREAK : MODE_FLAT,\n                doc: doc2.contents\n              });\n              break;\n            }\n          case MODE_BREAK: {\n            shouldRemeasure = false;\n            const next = {\n              ind,\n              mode: MODE_FLAT,\n              doc: doc2.contents\n            };\n            const rem = width - pos;\n            const hasLineSuffix = lineSuffix22.length > 0;\n            if (!doc2.break && fits(next, cmds, rem, hasLineSuffix, groupModeMap)) {\n              cmds.push(next);\n            } else {\n              if (doc2.expandedStates) {\n                const mostExpanded = at_default(\n                  /* isOptionalObject*/\n                  false,\n                  doc2.expandedStates,\n                  -1\n                );\n                if (doc2.break) {\n                  cmds.push({\n                    ind,\n                    mode: MODE_BREAK,\n                    doc: mostExpanded\n                  });\n                  break;\n                } else {\n                  for (let i = 1; i < doc2.expandedStates.length + 1; i++) {\n                    if (i >= doc2.expandedStates.length) {\n                      cmds.push({\n                        ind,\n                        mode: MODE_BREAK,\n                        doc: mostExpanded\n                      });\n                      break;\n                    } else {\n                      const state = doc2.expandedStates[i];\n                      const cmd = {\n                        ind,\n                        mode: MODE_FLAT,\n                        doc: state\n                      };\n                      if (fits(cmd, cmds, rem, hasLineSuffix, groupModeMap)) {\n                        cmds.push(cmd);\n                        break;\n                      }\n                    }\n                  }\n                }\n              } else {\n                cmds.push({\n                  ind,\n                  mode: MODE_BREAK,\n                  doc: doc2.contents\n                });\n              }\n            }\n            break;\n          }\n        }\n        if (doc2.id) {\n          groupModeMap[doc2.id] = at_default(\n            /* isOptionalObject*/\n            false,\n            cmds,\n            -1\n          ).mode;\n        }\n        break;\n      case DOC_TYPE_FILL: {\n        const rem = width - pos;\n        const {\n          parts\n        } = doc2;\n        if (parts.length === 0) {\n          break;\n        }\n        const [content, whitespace] = parts;\n        const contentFlatCmd = {\n          ind,\n          mode: MODE_FLAT,\n          doc: content\n        };\n        const contentBreakCmd = {\n          ind,\n          mode: MODE_BREAK,\n          doc: content\n        };\n        const contentFits = fits(contentFlatCmd, [], rem, lineSuffix22.length > 0, groupModeMap, true);\n        if (parts.length === 1) {\n          if (contentFits) {\n            cmds.push(contentFlatCmd);\n          } else {\n            cmds.push(contentBreakCmd);\n          }\n          break;\n        }\n        const whitespaceFlatCmd = {\n          ind,\n          mode: MODE_FLAT,\n          doc: whitespace\n        };\n        const whitespaceBreakCmd = {\n          ind,\n          mode: MODE_BREAK,\n          doc: whitespace\n        };\n        if (parts.length === 2) {\n          if (contentFits) {\n            cmds.push(whitespaceFlatCmd, contentFlatCmd);\n          } else {\n            cmds.push(whitespaceBreakCmd, contentBreakCmd);\n          }\n          break;\n        }\n        parts.splice(0, 2);\n        const remainingCmd = {\n          ind,\n          mode,\n          doc: fill(parts)\n        };\n        const secondContent = parts[0];\n        const firstAndSecondContentFlatCmd = {\n          ind,\n          mode: MODE_FLAT,\n          doc: [content, whitespace, secondContent]\n        };\n        const firstAndSecondContentFits = fits(firstAndSecondContentFlatCmd, [], rem, lineSuffix22.length > 0, groupModeMap, true);\n        if (firstAndSecondContentFits) {\n          cmds.push(remainingCmd, whitespaceFlatCmd, contentFlatCmd);\n        } else if (contentFits) {\n          cmds.push(remainingCmd, whitespaceBreakCmd, contentFlatCmd);\n        } else {\n          cmds.push(remainingCmd, whitespaceBreakCmd, contentBreakCmd);\n        }\n        break;\n      }\n      case DOC_TYPE_IF_BREAK:\n      case DOC_TYPE_INDENT_IF_BREAK: {\n        const groupMode = doc2.groupId ? groupModeMap[doc2.groupId] : mode;\n        if (groupMode === MODE_BREAK) {\n          const breakContents = doc2.type === DOC_TYPE_IF_BREAK ? doc2.breakContents : doc2.negate ? doc2.contents : indent(doc2.contents);\n          if (breakContents) {\n            cmds.push({\n              ind,\n              mode,\n              doc: breakContents\n            });\n          }\n        }\n        if (groupMode === MODE_FLAT) {\n          const flatContents = doc2.type === DOC_TYPE_IF_BREAK ? doc2.flatContents : doc2.negate ? indent(doc2.contents) : doc2.contents;\n          if (flatContents) {\n            cmds.push({\n              ind,\n              mode,\n              doc: flatContents\n            });\n          }\n        }\n        break;\n      }\n      case DOC_TYPE_LINE_SUFFIX:\n        lineSuffix22.push({\n          ind,\n          mode,\n          doc: doc2.contents\n        });\n        break;\n      case DOC_TYPE_LINE_SUFFIX_BOUNDARY:\n        if (lineSuffix22.length > 0) {\n          cmds.push({\n            ind,\n            mode,\n            doc: hardlineWithoutBreakParent\n          });\n        }\n        break;\n      case DOC_TYPE_LINE:\n        switch (mode) {\n          case MODE_FLAT:\n            if (!doc2.hard) {\n              if (!doc2.soft) {\n                out.push(\" \");\n                pos += 1;\n              }\n              break;\n            } else {\n              shouldRemeasure = true;\n            }\n          case MODE_BREAK:\n            if (lineSuffix22.length > 0) {\n              cmds.push({\n                ind,\n                mode,\n                doc: doc2\n              }, ...lineSuffix22.reverse());\n              lineSuffix22.length = 0;\n              break;\n            }\n            if (doc2.literal) {\n              if (ind.root) {\n                out.push(newLine, ind.root.value);\n                pos = ind.root.length;\n              } else {\n                out.push(newLine);\n                pos = 0;\n              }\n            } else {\n              pos -= trim2(out);\n              out.push(newLine + ind.value);\n              pos = ind.length;\n            }\n            break;\n        }\n        break;\n      case DOC_TYPE_LABEL:\n        cmds.push({\n          ind,\n          mode,\n          doc: doc2.contents\n        });\n        break;\n      case DOC_TYPE_BREAK_PARENT:\n        break;\n      default:\n        throw new invalid_doc_error_default(doc2);\n    }\n    if (cmds.length === 0 && lineSuffix22.length > 0) {\n      cmds.push(...lineSuffix22.reverse());\n      lineSuffix22.length = 0;\n    }\n  }\n  const cursorPlaceholderIndex = out.indexOf(CURSOR_PLACEHOLDER);\n  if (cursorPlaceholderIndex !== -1) {\n    const otherCursorPlaceholderIndex = out.indexOf(CURSOR_PLACEHOLDER, cursorPlaceholderIndex + 1);\n    const beforeCursor = out.slice(0, cursorPlaceholderIndex).join(\"\");\n    const aroundCursor = out.slice(cursorPlaceholderIndex + 1, otherCursorPlaceholderIndex).join(\"\");\n    const afterCursor = out.slice(otherCursorPlaceholderIndex + 1).join(\"\");\n    return {\n      formatted: beforeCursor + aroundCursor + afterCursor,\n      cursorNodeStart: beforeCursor.length,\n      cursorNodeText: aroundCursor\n    };\n  }\n  return {\n    formatted: out.join(\"\")\n  };\n}\nvar builders = {\n  join,\n  line,\n  softline,\n  hardline,\n  literalline,\n  group,\n  conditionalGroup,\n  fill,\n  lineSuffix,\n  lineSuffixBoundary,\n  cursor,\n  breakParent,\n  ifBreak,\n  trim,\n  indent,\n  indentIfBreak,\n  align,\n  addAlignmentToDoc,\n  markAsRoot,\n  dedentToRoot,\n  dedent,\n  hardlineWithoutBreakParent,\n  literallineWithoutBreakParent,\n  label,\n  // TODO: Remove this in v4\n  concat: (parts) => parts\n};\nvar printer = { printDocToString };\nvar utils = {\n  willBreak,\n  traverseDoc: traverse_doc_default,\n  findInDoc,\n  mapDoc,\n  removeLines,\n  stripTrailingHardline,\n  replaceEndOfLine,\n  canBreak\n};\n\n// libs/printer/common.ts\nimport { printRaw } from \"@unified-latex/unified-latex-util-print-raw\";\nimport { match } from \"@unified-latex/unified-latex-util-match\";\nfunction formatEnvSurround(node) {\n  const env = printRaw(node.env);\n  return {\n    envName: env,\n    start: ESCAPE + \"begin{\" + env + \"}\",\n    end: ESCAPE + \"end{\" + env + \"}\"\n  };\n}\nfunction isLineType(elm) {\n  if (elm == null || typeof elm === \"string\") {\n    return false;\n  }\n  if (Array.isArray(elm)) {\n    return isLineType(elm[0]);\n  }\n  if (elm.type === \"concat\") {\n    return isLineType(elm.parts);\n  }\n  return elm.type === \"line\";\n}\nfunction joinWithSoftline(arr) {\n  if (arr.length === 0 || arr.length === 1) {\n    return arr;\n  }\n  const ret = [arr[0]];\n  for (let i = 1; i < arr.length; i++) {\n    const prevNode = arr[i - 1];\n    const nextNode = arr[i];\n    if (!isLineType(prevNode) && !isLineType(nextNode)) {\n      ret.push(softline2);\n    }\n    ret.push(nextNode);\n  }\n  return ret;\n}\nfunction getNodeInfo(node, options) {\n  if (!node) {\n    return { renderInfo: {} };\n  }\n  const renderInfo = node._renderInfo || {};\n  const previousNode = options.referenceMap && options.referenceMap.getPreviousNode(node);\n  const nextNode = options.referenceMap && options.referenceMap.getNextNode(node);\n  const renderCache = options.referenceMap && options.referenceMap.getRenderCache(node);\n  return {\n    renderInfo,\n    renderCache,\n    previousNode,\n    nextNode,\n    referenceMap: options.referenceMap\n  };\n}\nvar ESCAPE = \"\\\\\";\nvar {\n  group: group2,\n  fill: fill2,\n  ifBreak: ifBreak2,\n  line: line2,\n  softline: softline2,\n  hardline: hardline2,\n  lineSuffix: lineSuffix2,\n  lineSuffixBoundary: lineSuffixBoundary2,\n  breakParent: breakParent2,\n  indent: indent2,\n  markAsRoot: markAsRoot2,\n  join: join2\n} = builders;\nfunction formatDocArray(nodes, docArray, options) {\n  const ret = [];\n  for (let i = 0; i < nodes.length; i++) {\n    const rawNode = nodes[i];\n    const printedNode = docArray[i];\n    const { renderInfo, referenceMap, previousNode, nextNode } = getNodeInfo(rawNode, options);\n    const renderCache = referenceMap && referenceMap.getRenderCache(rawNode);\n    switch (rawNode.type) {\n      case \"comment\":\n        if (!rawNode.sameline && previousNode && !match.comment(previousNode) && !match.parbreak(previousNode)) {\n          ret.push(hardline2);\n        }\n        ret.push(printedNode);\n        if (nextNode && !rawNode.suffixParbreak) {\n          ret.push(hardline2);\n        }\n        break;\n      case \"environment\":\n      case \"displaymath\":\n      case \"mathenv\":\n        if (previousNode && (previousNode == null ? void 0 : previousNode.type) !== \"parbreak\") {\n          if (ret[ret.length - 1] === line2) {\n            ret.pop();\n          }\n          if (ret[ret.length - 1] !== hardline2) {\n            ret.push(hardline2);\n          }\n        }\n        ret.push(printedNode);\n        if ((nextNode == null ? void 0 : nextNode.type) === \"whitespace\") {\n          ret.push(hardline2);\n          i++;\n        }\n        break;\n      case \"macro\":\n        if (renderInfo.breakBefore || renderInfo.breakAround) {\n          if (previousNode) {\n            if (ret[ret.length - 1] === line2 || ret[ret.length - 1] === hardline2) {\n              ret.pop();\n              ret.push(hardline2);\n            } else if (!match.comment(previousNode) && !match.parbreak(previousNode)) {\n              ret.push(hardline2);\n            }\n          }\n        }\n        if (renderInfo.inParMode && !renderInfo.hangingIndent && renderCache) {\n          ret.push(\n            renderCache.content,\n            ...renderCache.rawArgs || []\n          );\n        } else {\n          ret.push(printedNode);\n        }\n        if (renderInfo.breakAfter || renderInfo.breakAround) {\n          if (nextNode) {\n            if (match.whitespace(nextNode)) {\n              ret.push(hardline2);\n              i++;\n            } else if (match.parbreak(nextNode)) {\n            } else if (!match.comment(nextNode)) {\n              ret.push(hardline2);\n            }\n          }\n        }\n        break;\n      case \"parbreak\":\n        ret.push(hardline2, hardline2);\n        break;\n      default:\n        ret.push(printedNode);\n        break;\n    }\n  }\n  return ret;\n}\n\n// libs/zip.ts\nfunction zip(array1, array2) {\n  const ret = [];\n  const len = Math.min(array1.length, array2.length);\n  for (let i = 0; i < len; i++) {\n    ret.push([array1[i], array2[i]]);\n  }\n  return ret;\n}\n\n// libs/printer/macro.ts\nfunction printMacro(path, print, options) {\n  const node = path.getNode();\n  const { renderInfo, previousNode, nextNode, referenceMap } = getNodeInfo(\n    node,\n    options\n  );\n  const content = (node.escapeToken != null ? node.escapeToken : ESCAPE) + node.content;\n  const args = node.args ? path.map(print, \"args\") : [];\n  const rawArgs = [];\n  for (const [arg, printedArg] of zip(node.args || [], args)) {\n    const renderCache = referenceMap && referenceMap.getRenderCache(arg);\n    if (renderInfo.inParMode && renderCache) {\n      rawArgs.push(...renderCache);\n    } else {\n      rawArgs.push(printedArg);\n    }\n  }\n  if (referenceMap) {\n    referenceMap.setRenderCache(node, { rawArgs, content });\n  }\n  if (renderInfo.hangingIndent) {\n    return indent2(fill2([content, ...rawArgs]));\n  }\n  return group2([content, ...rawArgs]);\n}\n\n// libs/printer/argument.ts\nimport { match as match3 } from \"@unified-latex/unified-latex-util-match\";\nimport { trim as trim4 } from \"@unified-latex/unified-latex-util-trim\";\n\n// libs/printer/tikz.ts\nimport {\n  printRaw as printRaw3\n} from \"@unified-latex/unified-latex-util-print-raw\";\nimport { match as match2 } from \"@unified-latex/unified-latex-util-match\";\nimport { trim as trim3 } from \"@unified-latex/unified-latex-util-trim\";\nimport {\n  parse as parseTikz\n} from \"@unified-latex/unified-latex-ctan/package/tikz\";\n\n// libs/printer/print-argument-pgfkeys.ts\nimport {\n  linebreak,\n  printRaw as printRaw2\n} from \"@unified-latex/unified-latex-util-print-raw\";\nimport { parsePgfkeys } from \"@unified-latex/unified-latex-util-pgfkeys\";\nfunction printArgumentPgfkeys(nodes, options) {\n  const { allowParenGroups = false } = options;\n  const parsed = parsePgfkeys(nodes, { allowParenGroups });\n  const content = [];\n  for (const part of parsed) {\n    const isLastItem = part === parsed[parsed.length - 1];\n    if (part.itemParts) {\n      const parts = part.itemParts.map(\n        (node) => printRaw2(node, { asArray: true }).map(\n          (token) => token === linebreak ? hardline2 : token\n        )\n      );\n      const row = join2(\"=\", parts);\n      content.push(row);\n      if (part.trailingComma) {\n        content.push(\",\");\n      }\n    }\n    if (part.trailingComment) {\n      const leadingContent = part.itemParts ? [\" \"] : [];\n      if (part.leadingParbreak) {\n        leadingContent.push(hardline2);\n      }\n      content.push(\n        ...leadingContent,\n        // We're carefully and manually controlling the newlines,\n        // so print the comment directly without any newlines\n        \"%\",\n        part.trailingComment.content,\n        breakParent2\n      );\n    }\n    if (!isLastItem) {\n      content.push(line2);\n    }\n  }\n  let leadingComment = [\"\"];\n  if (options.leadingComment) {\n    if (options.leadingComment.leadingWhitespace) {\n      leadingComment.push(\" \");\n    }\n    leadingComment.push(\"%\" + options.leadingComment.content, breakParent2);\n  }\n  return group2([\n    options.openMark,\n    ...leadingComment,\n    // If there is no content, we don't want to push an extra `softline`.\n    // This matters because the braces group could still be broken by `leadingComment`\n    content.length > 0 ? indent2([softline2, ...content]) : \"\",\n    softline2,\n    options.closeMark\n  ]);\n}\n\n// libs/printer/tikz.ts\nfunction printTikzArgument(path, print, options) {\n  const node = path.getNode();\n  const { renderInfo, previousNode, nextNode, referenceMap } = getNodeInfo(\n    node,\n    options\n  );\n  const content = [];\n  const nodes = [...node.content];\n  trim3(nodes);\n  try {\n    const tikzAst = parseTikz(nodes);\n    if (tikzAst.content.length === 0) {\n      content.push(\";\");\n      return content;\n    }\n    const printer2 = new TikzArgumentPrinter(tikzAst, path, print);\n    return printer2.toDoc();\n  } catch (e) {\n    console.warn(\"Encountered error when trying to parse tikz argument\", e);\n  }\n  content.push(\";\");\n  return content;\n}\nfunction printFragment(fragment, path, print) {\n  const tmpKey = Symbol();\n  const currNode = path.getNode();\n  if (!currNode) {\n    throw new Error(\n      \"tried to print a fragment, but the current node is `null`\"\n    );\n  }\n  currNode[tmpKey] = fragment;\n  const ret = print(tmpKey);\n  delete currNode[tmpKey];\n  return ret;\n}\nfunction printTikzPathSpecNode(node, path, print) {\n  switch (node.type) {\n    case \"comment\":\n      return printFragment(node, path, print);\n    case \"unknown\":\n      return printFragment(node.content, path, print);\n    case \"coordinate\":\n      return [printRaw3(node.prefix), \"(\", printRaw3(node.content), \")\"];\n    case \"line_to\":\n      return node.command;\n    case \"square_brace_group\":\n      return printOptionalArgs(node.content);\n    case \"operation\":\n      return node.content.content;\n    case \"svg_operation\": {\n      const comments = node.comments.map(\n        (n) => printTikzPathSpecNode(n, path, print)\n      );\n      const options = node.options ? printOptionalArgs(node.options) : [];\n      const rest = node.options ? [group2(indent2([line2, printRaw3(node.content)]))] : [\" \", printRaw3(node.content)];\n      return [...comments, \"svg\", options, ...rest];\n    }\n    case \"curve_to\": {\n      const comments = node.comments.map(\n        (n) => printTikzPathSpecNode(n, path, print)\n      );\n      const printedControls = node.controls.length > 1 ? [\n        printTikzPathSpecNode(node.controls[0], path, print),\n        \" \",\n        \"and\",\n        line2,\n        printTikzPathSpecNode(node.controls[1], path, print)\n      ] : [printTikzPathSpecNode(node.controls[0], path, print)];\n      return [\n        ...comments,\n        \"..\",\n        \" \",\n        group2(\n          indent2([\"controls\", line2, ...printedControls, \" \", \"..\"])\n        )\n      ];\n    }\n    case \"animation\": {\n      const comments = node.comments.map(\n        (n) => printTikzPathSpecNode(n, path, print)\n      );\n      return [\n        ...comments,\n        \":\",\n        node.attribute,\n        \" \",\n        \"=\",\n        \" \",\n        group2(\n          indent2([\n            printArgumentPgfkeys(node.content, {\n              openMark: \"{\",\n              closeMark: \"}\"\n            })\n          ])\n        )\n      ];\n    }\n    case \"foreach\": {\n      const comments = node.comments.map(\n        (n) => printTikzPathSpecNode(n, path, print)\n      );\n      const variables = [...node.variables];\n      trim3(variables);\n      const list = node.list.type === \"macro\" ? printFragment(node.list, path, print) : printArgumentPgfkeys(node.list.content, {\n        openMark: \"{\",\n        closeMark: \"}\",\n        allowParenGroups: true\n      });\n      const doc = [\n        ...comments,\n        printRaw3(node.start),\n        \" \",\n        printRaw3(variables)\n      ];\n      if (node.options) {\n        doc.push(\" \", indent2(printOptionalArgs(node.options)));\n      }\n      doc.push(\" \", \"in\", \" \", group2(indent2(list)));\n      const commandType = node.command.type;\n      switch (commandType) {\n        case \"foreach\":\n          doc.push(\n            indent2([\n              line2,\n              printTikzPathSpecNode(node.command, path, print)\n            ])\n          );\n          break;\n        case \"macro\":\n          doc.push(\n            indent2([line2, printFragment(node.command, path, print)])\n          );\n          break;\n        case \"group\": {\n          const groupContent = [...node.command.content];\n          trim3(groupContent);\n          doc.push(\n            \" \",\n            indent2(\n              group2([\n                \"{\",\n                indent2([\n                  softline2,\n                  ...groupContent.map(\n                    (n) => printFragment(n, path, print)\n                  )\n                ]),\n                softline2,\n                \"}\"\n              ])\n            )\n          );\n          break;\n        }\n        default:\n          const invalidType = commandType;\n          console.warn(\n            `Unhandled command type when printing \"foreach\": ${invalidType}`\n          );\n      }\n      return indent2(doc);\n    }\n  }\n  console.warn(\n    `Encountered unknown type when trying to print tikz PathSpec: \"${node.type}\"`\n  );\n  return [];\n}\nfunction printOptionalArgs(nodes) {\n  return printArgumentPgfkeys(nodes, {\n    openMark: \"[\",\n    closeMark: \"]\"\n  });\n}\nvar _path, _print;\nvar TikzArgumentPrinter = class {\n  constructor(spec, path, print) {\n    __privateAdd(this, _path, void 0);\n    __privateAdd(this, _print, void 0);\n    __privateSet(this, _path, path);\n    __privateSet(this, _print, print);\n    this.nodes = [...spec.content];\n  }\n  nodeToDoc(node) {\n    return printTikzPathSpecNode(node, __privateGet(this, _path), __privateGet(this, _print));\n  }\n  toDoc() {\n    const doc = [];\n    const startArg = this.eatOptionalArg();\n    if (startArg.optionalArg) {\n      doc.push(\n        ...startArg.comments.map(\n          (c) => printFragment(c, __privateGet(this, _path), __privateGet(this, _print))\n        )\n      );\n      doc.push(printOptionalArgs(startArg.optionalArg.content));\n    }\n    const innerDoc = [];\n    doc.push(group2([indent2(innerDoc), \";\"]));\n    let cycle = -1;\n    while (this.nodes.length > 0) {\n      cycle++;\n      const firstSep = cycle === 0 && !startArg.optionalArg ? \" \" : line2;\n      const comingUp = this.peek();\n      switch (comingUp) {\n        case \"short_path\": {\n          const [n0, n1, n2] = this.nodes.splice(0, 3);\n          innerDoc.push(\n            firstSep,\n            this.nodeToDoc(n0),\n            \" \",\n            this.nodeToDoc(n1),\n            \" \",\n            this.nodeToDoc(n2)\n          );\n          continue;\n        }\n        case \"long_path\": {\n          const [n0, n1] = this.nodes.splice(0, 2);\n          if (n1.type === \"operation\") {\n            this.nodes.unshift(n1);\n            innerDoc.push(\n              firstSep,\n              this.nodeToDoc(n0),\n              \" \",\n              this.eatOperation()\n            );\n          } else {\n            innerDoc.push(\n              firstSep,\n              this.nodeToDoc(n0),\n              \" \",\n              this.nodeToDoc(n1)\n            );\n          }\n          continue;\n        }\n        case \"node\":\n          {\n            const eatenNode = this.eatNode();\n            if (eatenNode) {\n              innerDoc.push(line2, ...eatenNode);\n              continue;\n            }\n            console.warn(\n              \"Expected to print a tikz `node` PathSpec but couldn't find the text `node`\"\n            );\n          }\n          continue;\n        case \"operation\":\n          innerDoc.push(firstSep, this.eatOperation());\n          continue;\n        case \"unknown\": {\n          const node = this.nodes.shift();\n          innerDoc.push(firstSep, this.nodeToDoc(node));\n          continue;\n        }\n      }\n      this.nodes.shift();\n    }\n    return doc;\n  }\n  /**\n   * Look at the current node and the nodes that follow. Return what\n   * \"type\" is recognized.\n   */\n  peek() {\n    const [n0, n1, n2, n3] = [\n      this.nodes[0],\n      this.nodes[1],\n      this.nodes[2],\n      this.nodes[3]\n    ];\n    if ((n0 == null ? void 0 : n0.type) === \"coordinate\" && isPathJoinOperation(n1)) {\n      if ((n2 == null ? void 0 : n2.type) === \"coordinate\" && !((n3 == null ? void 0 : n3.type) === \"coordinate\" || isPathJoinOperation(n3))) {\n        return \"short_path\";\n      }\n      return \"long_path\";\n    }\n    if ((n0 == null ? void 0 : n0.type) === \"operation\") {\n      if (n0.content.content === \"node\") {\n        return \"node\";\n      }\n      return \"operation\";\n    }\n    return \"unknown\";\n  }\n  /**\n   * Eat comments and an optional arg if present. If no optional\n   * arg is present, do nothing.\n   */\n  eatOptionalArg() {\n    let i = 0;\n    const comments = [];\n    let optionalArg = null;\n    for (; i < this.nodes.length; i++) {\n      const node = this.nodes[i];\n      if (node.type === \"square_brace_group\") {\n        optionalArg = node;\n        i++;\n        break;\n      }\n      if (node.type === \"comment\") {\n        comments.push(node);\n        continue;\n      }\n      break;\n    }\n    if (optionalArg) {\n      this.nodes.splice(0, i);\n    }\n    return { optionalArg, comments };\n  }\n  /**\n   * Eat a `type === \"operation\"` node whose contents is `\"node\"`. I.e.,\n   * the type of thing that shows up in `\\path node at (1,1) {foo};`\n   */\n  eatNode() {\n    const firstNode = this.nodes[0];\n    if ((firstNode == null ? void 0 : firstNode.type) === \"operation\" && firstNode.content.content === \"node\") {\n      this.nodes.shift();\n    } else {\n      return null;\n    }\n    const innerDoc = [];\n    const commentBlock = [];\n    const doc = [commentBlock, \"node\", group2(indent2(innerDoc))];\n    let hasNodeArgument = false;\n    let shouldBail = false;\n    let i = 0;\n    const comments = [];\n    const options = [];\n    const name = [];\n    const atLocations = [];\n    const animations = [];\n    let content = [];\n    for (; i < this.nodes.length && !shouldBail; i++) {\n      const node = this.nodes[i];\n      switch (node.type) {\n        case \"animation\":\n          animations.push(this.nodeToDoc(node));\n          continue;\n        case \"comment\": {\n          const comment = {\n            ...node,\n            leadingWhitespace: false\n          };\n          comments.push(this.nodeToDoc(comment));\n          continue;\n        }\n        case \"square_brace_group\":\n          options.push(printOptionalArgs(node.content));\n          continue;\n        case \"coordinate\":\n          name.push(this.nodeToDoc(node));\n          continue;\n        case \"operation\": {\n          if (node.content.content === \"at\") {\n            const nextNode = this.nodes[i + 1];\n            if (!nextNode || !(nextNode.type === \"coordinate\" || nextNode.type === \"unknown\" && match2.anyMacro(nextNode.content))) {\n              shouldBail = true;\n              continue;\n            }\n            atLocations.push([\"at\", \" \", this.nodeToDoc(nextNode)]);\n            i++;\n            continue;\n          }\n          shouldBail = true;\n          continue;\n        }\n        case \"unknown\": {\n          if (match2.group(node.content)) {\n            hasNodeArgument = true;\n            content = this.nodeToDoc(node);\n          }\n        }\n      }\n      break;\n    }\n    if (!hasNodeArgument) {\n      return innerDoc;\n    }\n    this.nodes.splice(0, i + 1);\n    let isFirstElement = true;\n    let isNamed = !(Array.isArray(name) && name.length === 0);\n    for (const comment of comments) {\n      commentBlock.push(comment, hardline2);\n    }\n    if (options.length > 0) {\n      innerDoc.push(join2(\" \", options));\n      isFirstElement = false;\n    }\n    if (animations.length > 0) {\n      innerDoc.push(isFirstElement ? \" \" : line2);\n      innerDoc.push(join2(line2, animations));\n      isFirstElement = false;\n    }\n    if (isNamed) {\n      innerDoc.push(isFirstElement ? \" \" : line2);\n      innerDoc.push(name);\n      isFirstElement = false;\n    }\n    if (atLocations.length > 0) {\n      innerDoc.push(isFirstElement || isNamed ? \" \" : line2);\n      innerDoc.push(join2(line2, atLocations));\n      isFirstElement = false;\n    }\n    innerDoc.push(line2, content);\n    return doc;\n  }\n  /**\n   * Eat a `type === \"operation\"` node, including its optional arguments.\n   */\n  eatOperation() {\n    const node = this.nodes[0];\n    if ((node == null ? void 0 : node.type) === \"operation\") {\n      this.nodes.shift();\n    } else {\n      return [];\n    }\n    const doc = [];\n    if ((node == null ? void 0 : node.type) !== \"operation\") {\n      throw new Error(\"Expecting `operation` node.\");\n    }\n    const options = this.eatOptionalArg();\n    doc.push(\n      ...options.comments.map(\n        (c) => printFragment(c, __privateGet(this, _path), __privateGet(this, _print))\n      ),\n      node.content.content\n    );\n    if (options.optionalArg) {\n      doc.push(indent2(printOptionalArgs(options.optionalArg.content)));\n    }\n    return doc;\n  }\n};\n_path = new WeakMap();\n_print = new WeakMap();\nvar PATH_JOIN_OPERATIONS = /* @__PURE__ */ new Set([\"rectangle\", \"grid\", \"sin\", \"cos\", \"to\"]);\nfunction isPathJoinOperation(node) {\n  if (!node) {\n    return false;\n  }\n  switch (node.type) {\n    case \"line_to\":\n    case \"curve_to\":\n      return true;\n    case \"operation\":\n      return PATH_JOIN_OPERATIONS.has(node.content.content);\n  }\n  return false;\n}\n\n// libs/printer/argument.ts\nfunction printArgument(path, print, options) {\n  const node = path.getNode();\n  const { renderInfo, previousNode, nextNode, referenceMap } = getNodeInfo(\n    node,\n    options\n  );\n  if (node.openMark === \"\" && node.closeMark === \"\" && node.content.length === 0) {\n    return [];\n  }\n  const parentNode = path.getParentNode();\n  const { renderInfo: parentRenderInfo } = getNodeInfo(parentNode, options);\n  if (parentRenderInfo.pgfkeysArgs) {\n    const leadingComment = node.content.length > 0 && match3.comment(node.content[0]) && node.content[0].sameline ? node.content[0] : null;\n    const content2 = leadingComment ? node.content.slice(1) : node.content;\n    trim4(content2);\n    return printArgumentPgfkeys(content2, {\n      openMark: node.openMark,\n      closeMark: node.closeMark,\n      leadingComment\n    });\n  }\n  if (parentRenderInfo.tikzPathCommand) {\n    return printTikzArgument(path, print, options);\n  }\n  const openMark = node.openMark;\n  const closeMark = node.closeMark;\n  let content = path.map(print, \"content\");\n  content = formatDocArray(node.content, content, options);\n  if (match3.comment(node.content[node.content.length - 1])) {\n    content.push(hardline2);\n  }\n  let rawRet = [openMark, fill2(content), closeMark];\n  if (renderInfo.inParMode) {\n    rawRet = [openMark, ...content, closeMark];\n  }\n  if (referenceMap) {\n    referenceMap.setRenderCache(node, rawRet);\n  }\n  return rawRet;\n}\n\n// libs/printer/root.ts\nimport { match as match4 } from \"@unified-latex/unified-latex-util-match\";\nfunction hasPreambleCode(nodes) {\n  return nodes.some((node) => match4.macro(node, \"documentclass\"));\n}\nfunction printRoot(path, print, options) {\n  const node = path.getNode();\n  const { renderInfo, previousNode, nextNode, referenceMap } = getNodeInfo(\n    node,\n    options\n  );\n  const content = path.map(print, \"content\");\n  const rawContent = formatDocArray(node.content, content, options);\n  const concatFunction = hasPreambleCode(node.content) ? (x) => x : fill2;\n  return concatFunction(rawContent);\n}\n\n// libs/printer/comment.ts\nimport { printRaw as printRaw4 } from \"@unified-latex/unified-latex-util-print-raw\";\nfunction printComment(path, _print2, _options) {\n  const node = path.getNode();\n  let leadingWhitespace = \"\";\n  if (node.leadingWhitespace && node.sameline) {\n    leadingWhitespace = \" \";\n  }\n  const content = [leadingWhitespace, \"%\" + printRaw4(node.content)];\n  return content;\n}\n\n// libs/printer/math.ts\nfunction printInlineMath(path, print, options) {\n  const node = path.getNode();\n  if (node.content.length === 0) {\n    return [\"$\", \" \", \"$\"];\n  }\n  let content = path.map(print, \"content\");\n  content = formatDocArray(node.content, content, options);\n  content = joinWithSoftline(content);\n  if (node.content[node.content.length - 1].type === \"comment\") {\n    content.push(hardline2);\n  }\n  return fill2([\"$\", ...content, \"$\"]);\n}\nfunction printDisplayMath(path, print, options) {\n  const node = path.getNode();\n  let content = path.map(print, \"content\");\n  content = formatDocArray(node.content, content, options);\n  content = joinWithSoftline(content);\n  const bodyStartToken = [hardline2];\n  if (node.content.length === 0 || node.content[0].type === \"comment\" && node.content[0].sameline) {\n    bodyStartToken.pop();\n  }\n  return [\n    ESCAPE + \"[\",\n    indent2(fill2(bodyStartToken.concat(content))),\n    hardline2,\n    ESCAPE + \"]\"\n  ];\n}\n\n// libs/printer/environment.ts\nimport { printRaw as printRaw5 } from \"@unified-latex/unified-latex-util-print-raw\";\nimport { parseAlignEnvironment } from \"@unified-latex/unified-latex-util-align\";\nimport { trim as trim5 } from \"@unified-latex/unified-latex-util-trim\";\nfunction printVerbatimEnvironment(path, print, options) {\n  const node = path.getNode();\n  const env = formatEnvSurround(node);\n  return [env.start, node.content, env.end];\n}\nfunction printEnvironment(path, print, options) {\n  const node = path.getNode();\n  const { renderInfo, previousNode, nextNode, referenceMap } = getNodeInfo(\n    node,\n    options\n  );\n  const args = node.args ? path.map(print, \"args\") : [];\n  const env = formatEnvSurround(node);\n  let content = path.map(print, \"content\");\n  content = formatDocArray(node.content, content, options);\n  if (renderInfo.inMathMode) {\n    content = joinWithSoftline(content);\n  }\n  let bodyStartToken = [hardline2];\n  if (node.content.length === 0 || node.content[0].type === \"comment\" && node.content[0].sameline) {\n    bodyStartToken.pop();\n  }\n  return [\n    env.start,\n    ...args,\n    indent2(fill2(bodyStartToken.concat(content))),\n    hardline2,\n    env.end\n  ];\n}\nfunction printAlignedEnvironment(path, print, options) {\n  const node = path.getNode();\n  const { renderInfo, previousNode, nextNode, referenceMap } = getNodeInfo(\n    node,\n    options\n  );\n  const args = node.args ? path.map(print, \"args\") : [];\n  const env = formatEnvSurround(node);\n  const leadingComment = node.content[0] && node.content[0].type === \"comment\" && node.content[0].sameline ? node.content[0] : null;\n  const { rows, rowSeps, trailingComments } = formatAlignedContent(\n    leadingComment ? node.content.slice(1) : node.content\n  );\n  const content = [];\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    const rowSep = rowSeps[i];\n    const trailingComment = trailingComments[i];\n    content.push(row);\n    if (rowSep) {\n      content.push(printRaw5(rowSep));\n    }\n    if (rowSep && trailingComment) {\n      content.push(\" \");\n    }\n    if (trailingComment) {\n      content.push([\"%\", printRaw5(trailingComment.content)]);\n    }\n    if (rowSep || trailingComment) {\n      content.push(hardline2);\n    }\n  }\n  if (content[content.length - 1] === hardline2) {\n    content.pop();\n  }\n  if (leadingComment) {\n    content.unshift(\n      leadingComment.leadingWhitespace ? \" \" : \"\",\n      \"%\" + printRaw5(leadingComment.content),\n      hardline2\n    );\n    return [env.start, ...args, indent2(content), hardline2, env.end];\n  }\n  return [\n    env.start,\n    ...args,\n    indent2([hardline2, ...content]),\n    hardline2,\n    env.end\n  ];\n}\nfunction formatAlignedContent(nodes) {\n  function getSpace(len = 1) {\n    return \" \".repeat(len);\n  }\n  const rows = parseAlignEnvironment(nodes);\n  const numCols = Math.max(...rows.map((r) => r.cells.length));\n  const rowSeps = rows.map(({ rowSep }) => printRaw5(rowSep || []));\n  const trailingComments = rows.map(({ trailingComment }) => trailingComment);\n  const renderedRows = rows.map(({ cells, colSeps }) => ({\n    cells: cells.map((nodes2) => {\n      trim5(nodes2);\n      return printRaw5(nodes2);\n    }),\n    seps: colSeps.map((nodes2) => printRaw5(nodes2))\n  }));\n  const colWidths = [];\n  for (let i = 0; i < numCols; i++) {\n    colWidths.push(\n      Math.max(\n        ...renderedRows.map(\n          ({ cells, seps }) => ((cells[i] || \"\") + (seps[i] || \"\")).length\n        )\n      )\n    );\n  }\n  const joinedRows = renderedRows.map(({ cells, seps }) => {\n    if (cells.length === 1 && cells[0] === \"\") {\n      return \"\";\n    }\n    let ret = \"\";\n    for (let i = 0; i < cells.length; i++) {\n      const width = colWidths[i] - (seps[i] || \"\").length;\n      ret += (i === 0 ? \"\" : \" \") + cells[i] + getSpace(width - cells[i].length + 1) + (seps[i] || \"\");\n    }\n    return ret;\n  });\n  return { rows: joinedRows, rowSeps, trailingComments };\n}\n\n// libs/printer/printer.ts\nimport {\n  linebreak as linebreak2,\n  printRaw as printRaw6\n} from \"@unified-latex/unified-latex-util-print-raw\";\n\n// libs/reference-map.ts\nimport { visit } from \"@unified-latex/unified-latex-util-visit\";\nvar ReferenceMap = class {\n  constructor(ast) {\n    this.ast = ast;\n    this.map = /* @__PURE__ */ new Map();\n    visit(\n      this.ast,\n      (nodeList) => {\n        for (let i = 0; i < nodeList.length; i++) {\n          this.map.set(nodeList[i], {\n            previous: nodeList[i - 1],\n            next: nodeList[i + 1]\n          });\n        }\n      },\n      { includeArrays: true, test: Array.isArray }\n    );\n  }\n  /**\n   * Associate render-specific data with this node. This data\n   * will be overwritten if `setRenderCache` is called twice.\n   *\n   * @param {Ast.Ast} node\n   * @param {*} data\n   * @memberof ReferenceMap\n   */\n  setRenderCache(node, data) {\n    const currData = this.map.get(node) || {};\n    this.map.set(node, { ...currData, renderCache: data });\n  }\n  /**\n   * Retrieve data associated with `node` via `setRenderCache`\n   *\n   * @param {Ast.Ast} node\n   * @returns {(object | undefined)}\n   * @memberof ReferenceMap\n   */\n  getRenderCache(node) {\n    var _a;\n    return (_a = this.map.get(node)) == null ? void 0 : _a.renderCache;\n  }\n  getPreviousNode(node) {\n    return (this.map.get(node) || {}).previous;\n  }\n  getNextNode(node) {\n    return (this.map.get(node) || {}).next;\n  }\n};\n\n// libs/printer/printer.ts\nfunction printLatexAst(path, options, print) {\n  const node = path.getValue();\n  const { renderInfo } = getNodeInfo(node, options);\n  if (node == null) {\n    return node;\n  }\n  if (typeof node === \"string\") {\n    return node;\n  }\n  switch (node.type) {\n    case \"root\":\n      if (options.referenceMap) {\n        console.warn(\n          \"Processing root node, but ReferenceMap already exists. Are there multiple nodes of type 'root'?\"\n        );\n      }\n      options.referenceMap = new ReferenceMap(node);\n      return printRoot(path, print, options);\n    case \"argument\":\n      return printArgument(path, print, options);\n    case \"comment\":\n      return printComment(path, print, options);\n    case \"environment\":\n    case \"mathenv\":\n      if (renderInfo.alignContent) {\n        return printAlignedEnvironment(path, print, options);\n      }\n      return printEnvironment(path, print, options);\n    case \"displaymath\":\n      return printDisplayMath(path, print, options);\n    case \"group\":\n      const content = printRaw6(node.content, {\n        asArray: true\n      }).map((token) => token === linebreak2 ? hardline2 : token);\n      return [\"{\", ...content, \"}\"];\n    case \"inlinemath\":\n      return printInlineMath(path, print, options);\n    case \"macro\":\n      return printMacro(path, print, options);\n    case \"parbreak\":\n      return [hardline2, hardline2];\n    case \"string\":\n      return node.content;\n    case \"verb\":\n      return [\n        ESCAPE,\n        node.env,\n        node.escape,\n        printRaw6(node.content),\n        node.escape\n      ];\n    case \"verbatim\":\n      return printVerbatimEnvironment(path, print, options);\n    case \"whitespace\":\n      return line2;\n    default:\n      console.warn(\"Printing unknown type\", node);\n      return printRaw6(node);\n  }\n}\n\n// libs/prettier-plugin-latex.ts\nimport { parse } from \"@unified-latex/unified-latex-util-parse\";\nvar languages = [\n  {\n    name: \"latex\",\n    extensions: [\".tex\"],\n    parsers: [\"latex-parser\"]\n  }\n];\nvar parsers = {\n  \"latex-parser\": {\n    parse,\n    astFormat: \"latex-ast\",\n    locStart: (node) => node.position ? node.position.start.offset : 0,\n    locEnd: (node) => node.position ? node.position.end.offset : 1\n  }\n};\nvar printers = {\n  \"latex-ast\": {\n    print: printLatexAst\n  }\n};\nvar prettierPluginLatex = { languages, parsers, printers };\nexport {\n  prettierPluginLatex,\n  printLatexAst,\n  printLatexAst as printer\n};\n//# sourceMappingURL=index.js.map\n","import { prettierPluginLatex } from \"@unified-latex/unified-latex-prettier\";\n\nexport const options = {};\n\nexport const defaultOptions = {\n    useTabs: true,\n};\n\nexport const languages = prettierPluginLatex.languages;\nexport const parsers = prettierPluginLatex.parsers;\nexport const printers = prettierPluginLatex.printers;\n"],"names":["ESCAPE","options","macros","index","index2","trim","match2","s","line","options2","at","parse","PegParser","exports","module","append","require$$0","create","checkPrefix","recursePrefix","pushInOrder","recurseRandomWord","permutations","permute","reducer","input","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7","parseArgspec","arg2","macroInfo","createMatchers","isBuffer","isArray","isPlainObject","setProperty","getProperty","extend","point","position","join","path","assertPath","prop","dirname","basename","extname","bufferLike","value","isPlainObj","file","isArrayish","swizzle","simpleSwizzleModule","arg","colorStringModule","match","convert","conversions","color","colorString","models","route","keys","trim2","parseArgspec2","gobbleSingleArgument2","match3","arg3","parseArgspec3","arg4","trim3","gobbleSingleArgument3","match6","Color","visit2","slice","environments","printRaw2","unified2","__defProp","parseTikz","printRaw3","trim4","match4","printRaw4","printRaw5","trim5","printRaw6","linebreak2","languages","parsers","printers","prettierPluginLatex"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49]}